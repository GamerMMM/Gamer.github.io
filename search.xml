<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2024/uncategorized/00_b_R%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="课程准备"><a href="#课程准备" class="headerlink" title="课程准备"></a>课程准备</h1><h2 id="1-R语言基础"><a href="#1-R语言基础" class="headerlink" title="1_R语言基础"></a>1_R语言基础</h2><h3 id="01-R语言简介"><a href="#01-R语言简介" class="headerlink" title="01 R语言简介"></a>01 R语言简介</h3><h4 id="R语言历史"><a href="#R语言历史" class="headerlink" title="R语言历史"></a>R语言历史</h4><p>R语言是一款<strong>统计软件</strong>，R语言也是一门<strong>编程语言</strong>，R语言也是一个<strong>数据分析平台</strong>。R是一个免费自由且跨平台通用的<strong>统计计算与绘图软件</strong>，它有 Windows、Mac、Linux 等版本，均可免费下载使用。R 项目(The R Project for Statistical Computing)最早由新西兰奥克兰大学(Auckland University)的 Robert Gentleman(1959-)和 Ross Ihaka(1954-) 开发，故软件取两人名字的首字母命名为 R 。该项目始于 1993年，2000年发布了首个官方版本 R 1.0.0 ，后期维护由 R 核心团队(R Core Team)负责。截止 2022-06-23,，已发布到 4.2.1版本。凭借其开源、免费、自由等开放式理念，R 迅速获得流行，目前已成为学术研究和商业应用领域最为常用的数据分析软件之一。随着大数据行业的发展，R语言变得越来越流行，R语言发挥了越来越重要的作用。</p>
<h4 id="为什么要学习-R语言"><a href="#为什么要学习-R语言" class="headerlink" title="为什么要学习 R语言"></a>为什么要学习 R语言</h4><p>R是个多面手，你做科研过程的数据计算、统计检验、统计建模、数据挖掘、数据可视化它全包了。学了它，不用向以前必须学习统计软件STATA或者SPSS，同时还要学Graphpad、origin等绘图工具。同时R的脚本会记录你的数据处理工作的整个过程，过3年，你的学弟依旧可以拿着你的原始数据，重现你l论文的数据统计与可视化结果。</p>
<p>R能干啥，可能从下面的 <a href="https://cran.r-project.org/web/views/">R task view</a>看得更清楚</p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208242250328.png" alt="image-20220824225001163"></p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208242251893.png" alt="image-20220824225135768"></p>
<h3 id="02-R语言的优缺点"><a href="#02-R语言的优缺点" class="headerlink" title="02 R语言的优缺点"></a>02 R语言的优缺点</h3><h4 id="R语言的优点"><a href="#R语言的优点" class="headerlink" title="R语言的优点"></a>R语言的优点</h4><ul>
<li><strong>开源、免费，具有完整的统计学功能，有大量的扩展包</strong> <ul>
<li>有效的数据处理和保存机制。 </li>
<li>拥有一整套数组和矩阵的操作运算符。 </li>
<li>一系列连贯而又完整的数据分析中间工具。 </li>
<li>图形统计可以对数据直接进行分析和显示，可用于多种图形设备。 </li>
<li>一种相当完善、简洁和高效的程序设计语言。 </li>
<li>R语言是彻底面向对象的统计编程语言。 </li>
<li>R语言和其它编程语言、数据库之间有很好的接口。 </li>
<li>R语言是自由软件，可以放心大胆地使用，但其功能却不比任何其它同类软件差。 </li>
<li>R语言具有丰富的网上资源</li>
</ul>
</li>
</ul>
<h4 id="R语言的缺点"><a href="#R语言的缺点" class="headerlink" title="R语言的缺点"></a>R语言的缺点</h4><ul>
<li><strong>开源、免费，具有完整的统计学功能，有大量的扩展包</strong> <ul>
<li>学习成本大； </li>
<li>不擅长处理非结构数据； </li>
<li>计算消耗资源较多； </li>
<li>R的扩展包太多了，比较混乱，不容易找到适合的扩展包； </li>
<li>不擅长多线程处理。</li>
</ul>
</li>
</ul>
<h4 id="R语言与-Excel对比"><a href="#R语言与-Excel对比" class="headerlink" title="R语言与 Excel对比"></a>R语言与 Excel对比</h4><ul>
<li>R语言开源免费，Excel收费； </li>
<li>R语言支持 Linux版本，Excel只支持 windows，macos，ios，Android； </li>
<li>能够计算大数据，Excel默认只能处理 100万行数据； </li>
<li>R语言有更好扩展能力，有很多现成的包； </li>
<li>R语言有更好的绘图能力，例如可以很方便绘制热图，基因组圈图等复杂图形； </li>
<li>R语言的 Bioconductor项目可以处理生物数据，例如基因表达数据，单细胞测序等； </li>
<li>R语言学习成本较大，不如 Excel简单。</li>
</ul>
<p>是时候放弃excel了</p>
<h4 id="R语言与-Python对比"><a href="#R语言与-Python对比" class="headerlink" title="R语言与 Python对比"></a>R语言与 Python对比</h4><ul>
<li>R语言具有更强大的统计学功能； </li>
<li>R语言的 Bioconductor项目可以处理生物数据，例如基因表达数据，单细胞测序等； </li>
<li>R语言的绘图能力更强，尤其是 ggplot2包； </li>
<li>python兼容性不好； </li>
<li>python具有更强大的文本处理能力； </li>
<li>python资源管理更好，R不擅长多线程计算，更消耗资源</li>
</ul>
<p>我建议：目前的科研状态，一定要学习 R 或 Python，至少学一种，实际上应该都会。如果你对&#x3D;&#x3D;生物统计学、生物信息学&#x3D;&#x3D;更感兴趣，我建议你先学<strong>R</strong>。如果你对机器学习最感兴趣，特别是像深度学习这样的现代方法，那么应该首先选择 Python。当然如果你有python基础，直接使用python就可，不学R。如果没有，先学R。这两种语言很多的地方是相通的。学会了一个再学另外一个相对简单。真正的数据分析科学家与工程师，都是左手R 右手Python的。看下面的链接</p>
<p><a href="https://zhuanlan.zhihu.com/p/24792838">R vs Python：R是现在最好的数据科学语言吗？</a></p>
<h4 id="本课程为啥不在使用SPSS？"><a href="#本课程为啥不在使用SPSS？" class="headerlink" title="本课程为啥不在使用SPSS？"></a>本课程为啥不在使用SPSS？</h4><ul>
<li>因为不开源，使用的时候写论文写统计方法，有人要问你使用的SPSS的序列号，不好回答。</li>
<li>另外在科学图形绘制上，SPSS没有任何优势</li>
<li>最新的统计方法都是在目前都是R上出现，最新的SPSS需要调用R插件进行新的统计方法的使用。</li>
</ul>
<h3 id="03-结构化数据与非结构化数据"><a href="#03-结构化数据与非结构化数据" class="headerlink" title="03 结构化数据与非结构化数据"></a>03 结构化数据与非结构化数据</h3><ul>
<li>结构化数据：信息能够用数据或统一的结构加以表示，我们称之为结构化数据，如数字、符号； </li>
<li>非结构化数据：信息无法用数字或统一的结构表示，如文本、图像、声音、网页等，我们称之为非结构化数据。</li>
</ul>
<p>R语言更擅长处理结构化数据，因此，在使用 R之前，尽量确保数据是严格的表格结构。也就是二位的表格，分为行和列。在 R语言中，行称为“观测”，列称为“变量”。</p>
<h3 id="04-数据分析的六个过程"><a href="#04-数据分析的六个过程" class="headerlink" title="04 数据分析的六个过程"></a>04 数据分析的六个过程</h3><ol>
<li>数据采集 </li>
<li>数据存储 </li>
<li>统计分析 </li>
<li>数据挖掘 </li>
<li>数据可视化 </li>
<li>生成报告</li>
</ol>
<h2 id="2-R与-Rstudio软件安装"><a href="#2-R与-Rstudio软件安装" class="headerlink" title="2_R与 Rstudio软件安装"></a>2_R与 Rstudio软件安装</h2><h3 id="01-R软件安装"><a href="#01-R软件安装" class="headerlink" title="01 R软件安装"></a>01 R软件安装</h3><p>R语言支持 windows，macos，linux等多个系统平台，提供图形化界面，下载和安装都不难，可以直接从官网进行下载，当前最新版本为 4.2.1。R语言平均每半年更新一个比较大的版本，中间也会有一些小版本，建议安装最新的版本。可以从 R的官网下载软件安装包，软件最好安装到系统默认目录下。</p>
<p>R官网： <a href="https://www.r-project.org/">https://www.r-project.org/</a> ,如下图</p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251046474.png" alt="image-20220825104635253"></p>
<p>windows系统：<br>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/windows/base/R-4.2.1-win.exe">https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/windows/base/R-4.2.1-win.exe</a></p>
<p>Mac系统 :<br>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/macosx/base/R-4.2.1.pkg">https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/macosx/base/R-4.2.1.pkg</a> </p>
<h3 id="02Rstudio软件安装"><a href="#02Rstudio软件安装" class="headerlink" title="02Rstudio软件安装"></a>02Rstudio软件安装</h3><p>当前 R语言的集成开发环境很多，但其中 Rstudio可以说是最优秀的，Rstudio是 R软件的一个集成开发环境，为 R的使用提供了极大的便利，Rstudio本身并不集成 R软件，<em><strong>需要首先安装 R软件</strong></em>，Rstudio会调用 R软件。Rstudio支持 windows，macos，Linux等多个系统平台，并且提供免费的桌面版与服务器版本可供选择，服务器版本可以搭建多用户使用场景，直接通过网络浏览器访问 R。此外，Rstudio公司还开发了大量 R语言的扩展包，操作简单，功能强大，极大扩展了 R语言的功能。到10月份Rstudio将更名为Posit，将R与python的链接更方便</p>
<p>官方网站：<a href="https://www.rstudio.com/%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE">https://www.rstudio.com/，如下图</a></p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251059734.png" alt="image-20220825105959538"></p>
<p>下载地址： </p>
<p>windows：<br><a href="https://download1.rstudio.org/desktop/windows/RStudio-2022.07.1-554.exe">https://download1.rstudio.org/desktop/windows/RStudio-2022.07.1-554.exe</a></p>
<p>macos：<br><a href="https://download1.rstudio.org/desktop/macos/RStudio-2022.07.1-554.dmg">https://download1.rstudio.org/desktop/macos/RStudio-2022.07.1-554.dmg</a></p>
<h4 id="rstudio设置"><a href="#rstudio设置" class="headerlink" title="rstudio设置"></a>rstudio设置</h4><p>为了更好地使用 Rstuido软件，需要对软件进行一些设置，主要包括主题背景，字体大小，<br>字体编码，默认软件源等。 </p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251106828.png" alt="image-20220825110612716"></p>
<h3 id="03-解决windows下-Rstudio无法识别中文问题"><a href="#03-解决windows下-Rstudio无法识别中文问题" class="headerlink" title="03 解决windows下 Rstudio无法识别中文问题"></a>03 解决windows下 Rstudio无法识别中文问题</h3><p>方法一：创建一个新账户<br>创建一个新的英文账户，或者修改本地账户为使用 windows账户登录。 </p>
<p>方法二：修改缓存目录<br>Rstudio遇到中文报错，主要原因在于，Rstudio需要一个临时缓存文件，windows系统下这个默认目录在”C:\User\XXXX\AppData\Local\Temp”。其中 XXXX为用户名，如果是中文，则无法识别，所以，我们需要修改 TEMP和 TMP这个目录环境变量。右键此电脑，选择属性，然后点到高级系统设置，选择环境变量 </p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251116185.png" alt="image-20220825111659009"></p>
<p>修改 TEMP和 TMP变量，其中不能有中文，如下</p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251121020.png" alt="image-20220825112113735"></p>
<h2 id="3-开始使用-R"><a href="#3-开始使用-R" class="headerlink" title="3_开始使用 R"></a>3_开始使用 R</h2><h3 id="01设置工作目录"><a href="#01设置工作目录" class="headerlink" title="01设置工作目录"></a>01设置工作目录</h3><p>使用 R语言的第一个过程就是设置工作目录，使用 R语言经常需要读写文件，设置好工作目录可以方便读写文件。需要对不同系统目录的写法有所了解，windows目录结构与 Linux(Mac)目录结构主要差别在两点：第一，Linux(Mac)系统不存在盘符，所有数据路径都是有“&#x2F;”开始；第二：Linux系统采用正斜线分割目录，windows采用反斜线分割目录。在 R中可以使用正斜线。另外，Rstudio目前对中文支持并不好，目录中最好不要有中文，否则会报错。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">windows系统目录结构：C:\Users\xxx\Desktop\</span><br><span class="line">macos系统目录结构：/Users/xxx/Desktop/ </span><br><span class="line">Linux系统目录结构：/home/xxx/</span><br></pre></td></tr></table></figure>

<h4 id="设置工作目录"><a href="#设置工作目录" class="headerlink" title="设置工作目录"></a>设置工作目录</h4><p>方法一：Crtl+Shift+H快捷键 (windows) ; cmd+Shift+H快捷键(Mac) 或者通过菜单，如下</p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251132625.png" alt="image-20220825113225359"></p>
<p>方法二：使用鼠标，通过文件管理窗口设置工作目录 </p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251145911.png" alt="image-20220825114553695"></p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251146924.png" alt="image-20220825114628797"></p>
<p>方法三：使用 R函数 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前目录</span></span><br><span class="line">getwd<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#设置想要的工作目录，这里以账户为xxx的桌面为例子，设置为工作目录，注意使用的路径符号为正斜杆/.</span></span><br><span class="line">setwd<span class="punctuation">(</span><span class="string">&quot;c:/Users/xxx/Desktop/&quot;</span><span class="punctuation">)</span>   </span><br></pre></td></tr></table></figure>



<h4 id="02创建-Project"><a href="#02创建-Project" class="headerlink" title="02创建 Project"></a>02创建 Project</h4><p>创建 Project可以将所有数据放到一个目录下，R的 Project会保存分析过程中全部内容，方便管理以及分享。 </p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208251150139.png" alt="image-20220825115043896"></p>
<h4 id="03-R软件的运行"><a href="#03-R软件的运行" class="headerlink" title="03 R软件的运行"></a>03 R软件的运行</h4><p>R软件有交互式与脚本式运行两种方式，交互式便于进行数据探索，脚本式便于批量化和自动化处理。</p>
<p>脚本方式运行中，创建一个扩展名为.R的文件，例如test.R可以在Rstudio脚本窗口中一条条 运行，也可以一起全部运行。</p>
<p>[<del>在Linux命令行中，可以使用Rscript命令运行脚本文件，或者使用R -f 来运行，当计算量较大，需要较长的运算时，或者可重复性计算等条件下，需要使用无监督的脚本式运行。在使用脚本运行R时，需要保证脚本能够正确执行，通常先使用小数据进行测试，并且运行过程中将结果及时保存为文件，例如绘制出的图片，而不是交互式显示。R脚本也可以提供选项参数，将R脚本转换为一个可执行程序。</del>]  </p>
<h4 id="04-函数"><a href="#04-函数" class="headerlink" title="04 函数"></a>04 函数</h4><h5 id="R语言函数"><a href="#R语言函数" class="headerlink" title="R语言函数"></a>R语言函数</h5><p>学习 R语言的本质就是学习 R函数的过程，因为在 R中，每一步操作都需要使用 R的函数。在 R语言中，每个 R函数都需要后面介绍小括号，这是为了与环境中的变量区分开。比如定义一个名为 data的变量，R中还自带一个 data函数，这样就无法区分，因此，R函数需要接上小括号，例如 data()函数。R中需要使用选项参数，用来调节 R函数的功能。选项和参数之间用等号连接。不同选项后面接不同的参数，例如有的选项接数值参数，有的接字符串，有的接逻辑值。例如下面的案例。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一条典型的R函数 </span></span><br><span class="line">plot<span class="punctuation">(</span>x <span class="operator">=</span> women<span class="operator">$</span>height<span class="punctuation">,</span>y <span class="operator">=</span> women<span class="operator">$</span>weight<span class="punctuation">,</span>col<span class="operator">=</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span>pch<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">16</span><span class="punctuation">,</span><span class="number">17</span><span class="punctuation">,</span><span class="number">18</span><span class="punctuation">)</span><span class="punctuation">,</span>ann <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>其中 plot()为绘图函数，后面必须是小括号； </li>
<li>x选项为输入 x轴的值，接一个向量； </li>
<li>y选项为输入 y轴的值，接一个向量； </li>
<li>col选项为颜色值，接一个字符串； </li>
<li>pch选项为点的性状，接一个数值向量； </li>
<li>ann选项为是否显示x轴与y轴的标签，接一个逻辑值；</li>
</ul>
<h5 id="游戏：测试计算机算力"><a href="#游戏：测试计算机算力" class="headerlink" title="游戏：测试计算机算力"></a>游戏：测试计算机算力</h5><p>随机生成十万，百万，千万，亿，十亿个随机数，然后利用 R进行求和计算。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#十万随机数 </span></span><br><span class="line">x <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">100000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>x<span class="punctuation">)</span>  </span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">system.time<span class="punctuation">(</span>x <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">1000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#用户时间: 是处理用户应用程序代码（R 代码）所花费的 CPU 时间。</span></span><br><span class="line"><span class="comment">#系统时间: 用户应用程序访问系统资源，则该处理时间将报告为系统时间。</span></span><br><span class="line"><span class="comment">#流逝时间: 它测量代码块运行时经过的时钟时间,用户必须等待 R 完成运行代码的整体时间。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#百万随机数 </span></span><br><span class="line">x_1 <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">1000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span>  </span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x_1<span class="punctuation">)</span></span><br><span class="line">system.time<span class="punctuation">(</span>x_1 <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">1000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#千万随机数 </span></span><br><span class="line">x_2 <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">10000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span>  </span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x_2<span class="punctuation">)</span></span><br><span class="line">system.time<span class="punctuation">(</span>x_2 <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">10000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">)</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#亿随机数 </span></span><br><span class="line">x_3 <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">100000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span>  </span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x_3<span class="punctuation">)</span>  </span><br><span class="line">system.time<span class="punctuation">(</span>x_3 <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">100000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">)</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#小心点，别轻易尝试，会很慢,10亿</span></span><br><span class="line">system.time<span class="punctuation">(</span>x_4 <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">1000000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x_4<span class="punctuation">)</span></span><br><span class="line"><span class="comment">#100亿，内存不够报错Error: cannot allocate vector of size 74.5 Gb</span></span><br><span class="line">system.time<span class="punctuation">(</span>x <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">10000000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#展示环境变量</span></span><br><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#清除环境变量</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span><span class="operator">=</span> <span class="string">&quot;x_1&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#清除所有变量，但是注意并没有清除内存</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span><span class="operator">=</span>ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清除内存</span></span><br><span class="line">gc<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 揭示下结果</span></span><br><span class="line"><span class="comment"># used (Mb) gc trigger   (Mb)   max used   (Mb)</span></span><br><span class="line"><span class="comment"># Ncells  994704 53.2    2064062  110.3    1471043   78.6</span></span><br><span class="line"><span class="comment"># Vcells 2690772 20.6 1028036240 7843.3 1113693366 8496.9</span></span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"><span class="comment">#used是当前使用情况,gc trigger是会触发垃圾回收的值,maxused是上次gc()操作或者是此次启动R后使用最大值.(Mb)是Ncells和Vcells的大小转换为Mb单位时的值.</span></span><br><span class="line"><span class="comment">#Ncells即cons cells,32位R中占28B,64位R中占56B,我是用的64位的R,所以</span></span><br><span class="line"><span class="number">994704</span><span class="operator">*</span><span class="number">56</span><span class="operator">/</span><span class="punctuation">(</span><span class="number">1024</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#53.12292,约等于53.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Vcells即vector cells,占8B,所以</span></span><br><span class="line"><span class="number">2690772</span><span class="operator">*</span><span class="number">8</span><span class="operator">/</span><span class="punctuation">(</span><span class="number">1024</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#20.52896,约等于20.6</span></span><br></pre></td></tr></table></figure>

<h5 id="R语言括号"><a href="#R语言括号" class="headerlink" title="R语言括号"></a>R语言括号</h5><ul>
<li>括号按照性状可以分为小括号，中括号以及大括号，大括号也叫作花括号。在 R语言中，各种括号实现不同的功能。其中小括号具有重要作用。是函数式编程语言，所有的功能都需要通过函数完成。在 R中，为了区分字符，变量，数据集，函数以及扩展包，所以函数后面必须接小括号。例如 sum三个字符，如果要表示一个字符，就使用双引号，如果表示求和函数，作为 sum()，如果作为一个变量，数据集，直接写 sum即可。如果代表一个 R包，则直接 library加载即可。 </li>
<li>中括号在 R中也有重要作用，数据索引时要用到。 </li>
<li>花括号与其他编程语言类似，都表示一个代码块，用在自定义 R函数中。</li>
</ul>
<h5 id="R语言提示警告以及错误"><a href="#R语言提示警告以及错误" class="headerlink" title="R语言提示警告以及错误"></a>R语言提示警告以及错误</h5><p>正确区分软件错误，R语言在运行过程中会输出很多信息，这些信息主要包括三类，分别是：</p>
<ul>
<li><input disabled="" type="checkbox"> 运行状态信息，正常信息，不用担心； </li>
<li><input disabled="" type="checkbox"> 警告信息 warnings，不影响软件运行，需要注意； </li>
<li><input disabled="" type="checkbox"> 错误信息 Error，软件终止运行，需要检查错误；</li>
</ul>
<h4 id="05常用快捷键"><a href="#05常用快捷键" class="headerlink" title="05常用快捷键"></a>05常用快捷键</h4><p>下面列出 R或者 Rstudio中一些常用快捷键: </p>
<ul>
<li><p><strong>alt+-</strong> </p>
<p>R语言的赋值使用“&lt;-”，每次需要敲两个字符，非常麻烦，在 Rstudio中可以使用“alt+-”直接生成，非常方便，如果使用右侧 alt键，更加容易。 </p>
</li>
<li><p><strong>ctrl+shfit+h</strong> </p>
<p>使用 R第一件事情就是设置工作目录，如果不习惯敲 setwd()函数或者不熟悉系统目录结构，可以使用该快捷键直接用鼠标选择。 </p>
</li>
<li><p><strong>esc</strong> </p>
<p>中断程序，非常有用。 </p>
</li>
<li><p><strong>tab</strong></p>
</li>
</ul>
<p>tab自动补齐，可以补齐函数，选项参数等； </p>
<ul>
<li><p><strong>ctrl+L</strong> </p>
<p>相当于清屏，与 Linux 一致。 </p>
</li>
<li><p>上下箭头 </p>
<p>历史记录； </p>
</li>
<li><p><strong>ctrl+sfhit+F10</strong> </p>
<p>重新启动 R，有些情况下需要重新启动 R，这个时候无需关闭整个 Rstudio，使用该快捷键即可重新启动 R。 </p>
</li>
<li><p><strong>ctrl+r</strong> </p>
<p>ctrl+r快捷键可以快速调出使用过的历史记录，如果有些命令太长，使用这个快捷键非常方便。 </p>
</li>
<li><p><strong>ctrl+向上</strong> </p>
<p>也是快速调出历史记录，与 ctrl+r类似。 </p>
</li>
<li><p><strong>ctrl++，ctrl+-</strong> </p>
<p>调整字体大小。 </p>
</li>
<li><p><strong>ctrl+shift+m</strong> </p>
<p>如果使用 tidyverse系列包，经常需要使用管道符“%&gt;%”，使用该快捷键可以直接输出管道符。 </p>
</li>
<li><p><strong>alt+shift+k</strong> </p>
<p>可以快速调出所有快捷键列表。</p>
</li>
</ul>
<h3 id="06自定义R环境"><a href="#06自定义R环境" class="headerlink" title="06自定义R环境"></a>06自定义R环境</h3><p>R语言可以通过自定义修改默认行为，例如修改默认提示符，修改默认镜像地址，修改默认加载包目录，默认有效数字位数，启动后自动加载包等。<br>R每次启动时，会从默认目录下（windows系统一般为我的文档）读取.Rpofile文件，对 R的自定义，就是修改该配置文件。这个默认配置文件类似于 Linux系统家目录下的.bashrc文件。 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过 file.edit()函数创建文件 </span></span><br><span class="line">file.edit<span class="punctuation">(</span><span class="string">&quot;~/.Rprofile&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">## 在Rprofile完成下面工作 ##</span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#修改提示符 </span></span><br><span class="line"><span class="comment">#options(prompt=&quot;$&quot;) </span></span><br><span class="line"><span class="comment">#options(prompt=&quot;&gt;&quot;) </span></span><br><span class="line"><span class="comment">#修改次级提示符 </span></span><br><span class="line"><span class="comment">#options (continue=&quot;+&quot;)</span></span><br><span class="line"><span class="comment">#options(continue = &quot;% &quot;)</span></span><br><span class="line"><span class="comment">#修改默认包加载目录 </span></span><br><span class="line"><span class="comment">#.libPaths(&quot;C:/Users/Administrator/AppData/Local/R/win-library/4.2&quot;) </span></span><br><span class="line">.libPaths<span class="punctuation">(</span><span class="string">&quot;G:/R/R-4.2.1/library/&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#修改默认 R镜像 </span></span><br><span class="line">local<span class="punctuation">(</span><span class="punctuation">&#123;</span>r <span class="operator">&lt;-</span>getOption<span class="punctuation">(</span><span class="string">&quot;repos&quot;</span><span class="punctuation">)</span> </span><br><span class="line">r<span class="punctuation">[</span><span class="string">&quot;CRAN&quot;</span><span class="punctuation">]</span><span class="operator">&lt;-</span><span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;</span> </span><br><span class="line">options<span class="punctuation">(</span>repos<span class="operator">=</span>r<span class="punctuation">)</span><span class="punctuation">&#125;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#修改 bioconductor镜像 </span></span><br><span class="line">options<span class="punctuation">(</span>BioC_mirror<span class="operator">=</span><span class="string">&quot;http://mirrors.ustc.edu.cn/bioc/&quot;</span><span class="punctuation">)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动加载函数 </span></span><br><span class="line">.First <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span> </span><br><span class="line"><span class="comment"># library(BioCManager,quietly = TRUE) </span></span><br><span class="line">cat <span class="punctuation">(</span><span class="string">&quot;\nWelcome at&quot;</span><span class="punctuation">,</span>date<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="string">&quot;\n&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="punctuation">&#125;</span> </span><br><span class="line"> </span><br><span class="line">.Last <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span> </span><br><span class="line">cat <span class="punctuation">(</span><span class="string">&quot;\nGoodbye at &quot;</span><span class="punctuation">,</span>date<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="string">&quot;\n&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure>



<h2 id="4-语言包管理"><a href="#4-语言包管理" class="headerlink" title="4_语言包管理"></a>4_语言包管理</h2><p>R语言的一大优势就是有各种各样的扩展包，所谓 R扩展包，就是将数据处理的算法通过 R函数来实现，在加上测试数据，说明文档整合在一起，就是 R的扩展包。在使用 R的过程中，肯定需要使用到 R的包，因此，需要掌握 R包的管理，包括包的查找，安装，加载，升级，取消加载，删除，查看帮助文档等等操作。 </p>
<h3 id="如何选择合适的-R包"><a href="#如何选择合适的-R包" class="headerlink" title="如何选择合适的 R包"></a>如何选择合适的 R包</h3><ul>
<li>1.通过 R TaskView查找需要的软件包，根据大类查找；在Rstudio的help中的Home打开R resource选择CRAN Task Views，网站如下：<a href="https://cran.rstudio.com/web/views/">https://cran.rstudio.com/web/views/</a></li>
</ul>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208252300203.png" alt="image-20220825230033920"></p>
<p>##有关生物信息的的task views取消了 需要看</p>
<p><a href="https://cran.r-hub.io/web/views/Genetics.html">https://cran.r-hub.io/web/views/Genetics.html</a></p>
<p>###有关统计学习与教学的包</p>
<p><a href="https://cran.rstudio.com/web/views/TeachingStatistics.html">https://cran.rstudio.com/web/views/TeachingStatistics.html</a></p>
<ul>
<li>2阅读文献，参考里面使用的 R包。 </li>
<li>3 bioconductor项目</li>
</ul>
<p>Bioconductor 是建立在 R语言环境上的，用于生物信息数据的注释、处理、分析及可视化工具包的总集，由一系列 R扩展包组成。很多生物数据都是使用 bioconductor包来分析的。 </p>
<p>Bioconductor官网：<a href="http://www.bioconductor.org/">http://www.bioconductor.org/</a> </p>
<h3 id="R包的管理"><a href="#R包的管理" class="headerlink" title="R包的管理"></a>R包的管理</h3><p>由于不用 R包之间存在相互依赖的关系，因此，强烈推荐采用在线安装的方式，这样软件可以自动解决依赖关系问题，节约大量时间。R默认的服务器在国外，为了加快下载速度，需要将 R镜像站点修改为国内镜像站点。 </p>
<h4 id="R包默认安装到以下目录"><a href="#R包默认安装到以下目录" class="headerlink" title="R包默认安装到以下目录"></a>R包默认安装到以下目录</h4><p>R包的默认安装路径与登录账号是否为管理员有关，如果登录的为管理员账号，则默认安装到 R安装目录下。如果登录的为普通账户，则在每个账号下的**&#x3D;&#x3D;我的文档&#x3D;&#x3D;**中。 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#windows系统： </span></span><br><span class="line">G<span class="operator">:</span><span class="punctuation">\</span>R<span class="punctuation">\</span>R<span class="operator">-</span><span class="number">4.2</span>.1<span class="punctuation">\</span>library </span><br><span class="line">C<span class="operator">:</span><span class="punctuation">\</span>Users<span class="punctuation">\</span>xxxx<span class="punctuation">\</span>Documents<span class="punctuation">\</span>R<span class="punctuation">\</span>win<span class="operator">-</span>library<span class="punctuation">\</span><span class="number">4.2</span> </span><br><span class="line"><span class="comment">#macos系统： </span></span><br><span class="line"><span class="operator">/</span>Library<span class="operator">/</span>Frameworks<span class="operator">/</span>R.framework<span class="operator">/</span>Versions<span class="operator">/</span><span class="number">4.0</span><span class="operator">/</span>Resources<span class="operator">/</span>library </span><br><span class="line"> </span><br><span class="line"><span class="comment">#查看R包安装目录 </span></span><br><span class="line">.libPaths<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line">.Library </span><br></pre></td></tr></table></figure>

<h4 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h4><p>通过网络安装 R包，网络速度影响比较大，因此要选择合适的镜像，一般选择距离较近的镜像。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">chooseCRANmirror<span class="punctuation">(</span><span class="punctuation">)</span>   </span><br><span class="line">chooseBioCmirror<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line">setRepositories<span class="punctuation">(</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>

<p>常用 R镜像站点 </p>
<ul>
<li>CRAN站点： <ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/CRAN/">https://mirrors.tuna.tsinghua.edu.cn/CRAN/</a> </li>
<li><a href="https://mirrors.ustc.edu.cn/CRAN/">https://mirrors.ustc.edu.cn/CRAN/</a></li>
</ul>
</li>
<li>Bioconductor镜像： <ul>
<li><a href="https://mirrors.ustc.edu.cn/bioc/">https://mirrors.ustc.edu.cn/bioc/</a> </li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/bioconductor/">https://mirrors.tuna.tsinghua.edu.cn/bioconductor/</a></li>
</ul>
</li>
<li>github: <ul>
<li><a href="https://github.com/">https://github.com/</a></li>
</ul>
</li>
</ul>
<h3 id="R包管理"><a href="#R包管理" class="headerlink" title="R包管理"></a>R包管理</h3><p>可以将每个 R包开成一个手机 App，R包的管理类似于手机应用的管理，包括搜索，下载，安装，打开，卸载等操作。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装 vcd包 </span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;vcd&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#一次安装多个包 </span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;ggplot2&quot;</span><span class="punctuation">,</span><span class="string">&quot;pheatmap&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  </span><br><span class="line"><span class="comment">#查看已安装的包 </span></span><br><span class="line">installed.packages<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#加载 R包 </span></span><br><span class="line">library<span class="punctuation">(</span>vcd<span class="punctuation">)</span> </span><br><span class="line">require<span class="punctuation">(</span>vcd<span class="punctuation">)</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#升级软件包 </span></span><br><span class="line">update.packages<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#删除扩展包，从磁盘中移除 </span></span><br><span class="line">remove.packages<span class="punctuation">(</span><span class="string">&quot;vcd&quot;</span><span class="punctuation">)</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#取消加载，从内存中移除 </span></span><br><span class="line">detach<span class="punctuation">(</span><span class="string">&quot;package:vcd&quot;</span><span class="punctuation">)</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#其余函数 </span></span><br><span class="line"><span class="comment">#列出 R包中的函数 </span></span><br><span class="line">ls<span class="punctuation">(</span>package<span class="operator">:</span>base<span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#加载包中的数据集 </span></span><br><span class="line">data<span class="punctuation">(</span>package<span class="operator">=</span><span class="string">&quot;vcd&quot;</span><span class="punctuation">)</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#查看当前环境哪些包加载 </span></span><br><span class="line"> search<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#列出当前包 </span></span><br><span class="line"><span class="punctuation">(</span>.packages<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#列出有效包 </span></span><br><span class="line"><span class="punctuation">(</span>.packages<span class="punctuation">(</span>all.available<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">)</span><span class="punctuation">)</span>  </span><br><span class="line"><span class="comment">#列出加载包的路径 </span></span><br><span class="line">find.package<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line">path.package<span class="punctuation">(</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>

<h4 id="安装-github网站的-R包"><a href="#安装-github网站的-R包" class="headerlink" title="安装 github网站的 R包"></a>安装 github网站的 R包</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 devtools </span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;devtools&quot;</span><span class="punctuation">)</span> </span><br><span class="line">library<span class="punctuation">(</span>devtools<span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#github在线安装 </span></span><br><span class="line">install_github<span class="punctuation">(</span><span class="string">&quot;github_user_name/package_name&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#下载到本地安装 </span></span><br><span class="line">devtools<span class="operator">::</span>install_local<span class="punctuation">(</span><span class="string">&quot;path_to_package_file.zip&quot;</span><span class="punctuation">)</span>  </span><br></pre></td></tr></table></figure>

<h4 id="安装-Bioconductor网站的-R包"><a href="#安装-Bioconductor网站的-R包" class="headerlink" title="安装 Bioconductor网站的 R包"></a>安装 Bioconductor网站的 R包</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;BiocManager&quot;</span><span class="punctuation">)</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&quot;DESeq2&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>



<h4 id="检查更新R包，不建议频繁更新，半年一次就好"><a href="#检查更新R包，不建议频繁更新，半年一次就好" class="headerlink" title="检查更新R包，不建议频繁更新，半年一次就好"></a>检查更新R包，不建议频繁更新，半年一次就好</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装rvcheck</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&quot;rvcheck&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#加载rvcheck</span></span><br><span class="line">library<span class="punctuation">(</span>rvcheck<span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#检查R版本是否要更新</span></span><br><span class="line">check_r<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#更新全部R以及包</span></span><br><span class="line">rvcheck<span class="operator">::</span>update_all<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h4 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h4><p>学习 R语言需要经常查看帮助文档，包括 R包的帮助文档，查看帮助文档可以快速了解一些函数的用法。不过由于开发者不同，因此帮助文档的水平也参差不齐。查看帮助文档，可以使用 help()函数，一般的 R函数都会自带案例代码，可以直接使用 example()函数运行这些代码。此外，一些 R包还提供一种 vignette格式的文档。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#打开帮助页 </span></span><br><span class="line">help<span class="punctuation">(</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#查看函数帮助 </span></span><br><span class="line"><span class="operator">?</span>ggplot2 </span><br><span class="line"><span class="comment">#查看扩展包里函数 </span></span><br><span class="line"><span class="operator">?</span><span class="operator">?</span>heatmap   </span><br><span class="line"><span class="comment">#查看包帮助文档 </span></span><br><span class="line">help<span class="punctuation">(</span>package<span class="operator">=</span><span class="string">&quot;ggplot2&quot;</span> <span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#运行函数案例代码 </span></span><br><span class="line">example<span class="punctuation">(</span><span class="string">&quot;heatmap&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#查看 vignettes格式文档   </span></span><br><span class="line">browseVignettes<span class="punctuation">(</span><span class="punctuation">)</span>  </span><br><span class="line"><span class="comment">#R网站搜索 </span></span><br><span class="line">RSiteSearch<span class="punctuation">(</span><span class="string">&quot;heatmap&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h4 id="R包迁移"><a href="#R包迁移" class="headerlink" title="R包迁移"></a>R包迁移</h4><h4 id="直接拷贝-R包"><a href="#直接拷贝-R包" class="headerlink" title="直接拷贝 R包"></a>直接拷贝 R包</h4><p>R包一般都是一个完整文件，只需要将 R包整个文件夹迁移走，一般就可以运行。对 R包进行迁移时，尽量保证 R版本一致。直接将整个 R包目录拷贝到新的目录下即可。首先找到 R包的安装目录，然后将整个目录打包，拷贝到另外一个目录解压缩。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#找到R包的安装目录</span></span><br><span class="line">.libPaths<span class="punctuation">(</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>

<p>该方法只是一种方案，绝大部分包是可以的。但是注意不能将 windows系统安装的迁移到Linux下。该方法也不是万无一失，比如 R包需要系统一些配置，缺少了还是无法运行。</p>
<h4 id="获取名字重新安装"><a href="#获取名字重新安装" class="headerlink" title="获取名字重新安装"></a>获取名字重新安装</h4><p>获取要迁移的 R包名字列表，在一台设备上使用循环逐个安装。但是该方法无法处理 github上安装的包。  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保存 A设备上的 R包名字列表； </span></span><br><span class="line">oldip <span class="operator">&lt;-</span> installed.packages<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> </span><br><span class="line">save<span class="punctuation">(</span>oldip<span class="punctuation">,</span>file <span class="operator">=</span> <span class="string">&quot;installedPacckages.Rdata&quot;</span><span class="punctuation">)</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#在 B设备上进行安装； </span></span><br><span class="line">load<span class="punctuation">(</span><span class="string">&quot;installedPacckages.Rdata&quot;</span><span class="punctuation">)</span> </span><br><span class="line">newip <span class="operator">&lt;-</span> installed.packages<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> </span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> setdiff<span class="punctuation">(</span>oldip<span class="punctuation">,</span>newip<span class="punctuation">)</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span> </span><br><span class="line">  BiocManager<span class="operator">::</span>install<span class="punctuation">(</span>i<span class="punctuation">)</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5_文件操作"></a>5_文件操作</h2><p>一般情况下我们需要分析的数据都是存储在文件中，那么利用 R分析数据的第一步就是将输入读入 R语言。如果分析的数据是记录着纸质载体上，还需要将数据手动录入，然后保存为一个文件。在 R中分析文件一般是文件文件，通常是以逗号分隔的 csv文件，如果数据本身包含逗号，就需要使用制表符 tab分隔的文件。有些情况下还有需要处理其他统计软件生成的文件，例如 Excel生成的 xlsx格式文件等。R可以很方便的读写多种格式文件。</p>
<h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>1、csv<br>逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。通常，所有记录都有完全相同的字段序列。通常都是纯文本文件。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name,age </span><br><span class="line">张三,20 </span><br><span class="line">李四,30 </span><br></pre></td></tr></table></figure>

<p>2、tsv<br>TSV：tab separated values；即“制表符分隔值”，如： </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">name    age </span><br><span class="line">张三      <span class="number">20</span> </span><br><span class="line">李四      <span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3 id="Rstudio导入文件"><a href="#Rstudio导入文件" class="headerlink" title="Rstudio导入文件"></a>Rstudio导入文件</h3><p>通过 Rstudio导入文件 , 如下：</p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208270034840.png" alt="image-20220827003446667"></p>
<ul>
<li>data ：文件路径 </li>
<li>header ： 第一行是否作为表头 </li>
<li>sep ：分隔符 </li>
<li>row.names： 哪一列作为行名 </li>
<li>stringsAsFactors： 字符串是否作为因子 </li>
<li>na.strings ：空值用什么表示</li>
</ul>
<h3 id="函数读入文件"><a href="#函数读入文件" class="headerlink" title="函数读入文件"></a>函数读入文件</h3><p>在 Rstudio中，可以通过点击鼠标读入文件，在读入文件之前，需要对文件格式和内容有所了解。例如文件是否是一个标准的列表形式，也就是是否为结构化数据。文件存储格式，是二进制还是纯文本，如果是纯文本，文件扩展名是什么？用什么分隔符分割？文件有多少行，多少列？ 第一行是否为列名，第一列是否为行名？清楚了这些之后就可以读入文件了。 </p>
<p>R提供了大量读入文件的函数，这些函数通常是以 read.*开头，后面接文件扩展，例如 read.csv，read.xlsx，read.spss等。其中最常用的为 read.table。read.table包括以下重要选项参数。 </p>
<p>1、data：后面接文件路径，注意文件路径一定要加引号，注意 windows系统文件路径的写法。 </p>
<p>2、header：只接逻辑值 TRUE或者 FALSE，代表第一行是否作为表头，默认为 FALSE。如果不设置，R会默认添加 V1，V2等作为列名。 </p>
<p>3、sep：分隔符，读入文件最重要的一个选项，如果设置错误，文件格式很乱，通常就是逗号“，”，制表符“\t”或者冒号“：”等。 </p>
<p>4、row.names：后面接数字，指定哪一列作为行名，默认是 0，通常可以设置为 1。 </p>
<p>5、stringsAsFactors：后面接逻辑值，设置为T，R语言默认会将文件中的字符串自动转换为因子。 </p>
<p>6、na.strings：后面接字符串，指定文件中空值的表示方法。 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读入一个文件，存入 x变量   </span></span><br><span class="line">x <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span><span class="string">&quot;./1998cross-sectional+data+set_released+version.csv&quot;</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#读入文件，指定分隔符 </span></span><br><span class="line">x <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span>file <span class="operator">=</span> <span class="string">&quot;./1998cross-sectional+data+set_released+version.csv&quot;</span><span class="punctuation">,</span> header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>sep <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#读入文件，指定分隔符和列名 </span></span><br><span class="line">x <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span>file <span class="operator">=</span> <span class="string">&quot;./1998cross-sectional+data+set_released+version.csv&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>row.names <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span>  </span><br><span class="line"><span class="comment">#读入文件，指定分隔符、表头与行名以及字符串不作为因子 </span></span><br><span class="line">x <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span>file <span class="operator">=</span> <span class="string">&quot;differential_expression.csv&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>sep <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">,</span>row.names <span class="operator">=</span> </span><br><span class="line">                <span class="number">1</span><span class="punctuation">,</span>na.strings <span class="operator">=</span> <span class="string">&quot;NA&quot;</span><span class="punctuation">,</span>stringsAsFactors <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span>  </span><br></pre></td></tr></table></figure>

<p>无论使用哪个函数读取文件，R中读入的数据都存储为数据框这种数据类型。通常将文件<strong>保存为一个变量</strong>。读入文件之后，需要验证文件是否读入成功，通常使用 head函数截取文件头部显示出来，判断格式是否正确，在 Rstudio中也可以使用 View()函数将全部内容显示出来。如果格式不正确就需要修改命令重新读取文件；如果没有问题，就可以对数据进行后续的分析了。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看数据结构 </span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#查看文件头部 </span></span><br><span class="line">head<span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#查看文件尾部 </span></span><br><span class="line">tail<span class="punctuation">(</span>dta<span class="punctuation">)</span>  </span><br><span class="line"><span class="comment">#查看行名，列名 </span></span><br><span class="line">rownames<span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line">colnames<span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#View窗口中查看数据 </span></span><br><span class="line">View<span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#查看数据属性信息 </span></span><br><span class="line">str<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure>



<h3 id="函数写入文件"><a href="#函数写入文件" class="headerlink" title="函数写入文件"></a>函数写入文件</h3><p>数据处理结束之后，需要将存储在变量中的结果保存到文件中，R提供了大量写入文件的函数，这些函数通常与 read系列都是对应的，用法也类似使用起来也并不难。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写入文件 </span></span><br><span class="line">write.csv<span class="punctuation">(</span>x <span class="operator">=</span> x<span class="punctuation">,</span>file <span class="operator">=</span> <span class="string">&quot;matrix.csv&quot;</span><span class="punctuation">,</span>sep <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">,</span>append <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span>  </span><br></pre></td></tr></table></figure>

<ul>
<li>x：要写入文件中的数据集名字。 </li>
<li>File：文件路径和文件名，注意加引号，需要自己给文件命名，注意扩展名最好与分隔符</li>
<li>匹配。 </li>
<li>sep：分隔符，如果是 csv文件，sep设置为逗号，制表符分割，则设置为“\t”</li>
<li>append:接逻辑值，是否追加写入</li>
</ul>
<h3 id="读写-excel文件"><a href="#读写-excel文件" class="headerlink" title="读写 excel文件"></a>读写 excel文件</h3><p>Excel是全球最流行的电子表格程序，即使你可以使用 R语言处理所有的数据分析工作，但是总有一天你不得不处理别人传给你 Excel生成的电子表格需要你帮忙处理。还好 R可以很方便的处理 excel的电子表格。通常处理 Excel表格有两种方法。</p>
<p>方法一：将excel文件另存为 csv或者 tsv </p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208270943740.png" alt="image-20220827094314568"></p>
<p>方法二：readr，xlsx，openxlsx等包<br>R中有大量可以读写 Excel电子表格的包，使用方法与 read.table()函数类似，只需注意Excel的电子表格分为工作簿与工作表，一个工作簿中包含多个工作表（sheet），因此需要指定读取工作簿中那个工作表，可以指定工作表的名字，也可以使用顺序号</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装 openxlsx包 </span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;openxlsx&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#加载 openxlsx包 </span></span><br><span class="line">library<span class="punctuation">(</span>openxlsx<span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#读入 excel文件，指定 sheet的序号或者名称</span></span><br><span class="line">x <span class="operator">&lt;-</span> read.xlsx<span class="punctuation">(</span>xlsxFile<span class="operator">=</span> <span class="string">&quot;./lettuce.xlsx&quot;</span><span class="punctuation">,</span>sheet <span class="operator">=</span> <span class="string">&quot;treatment&quot;</span><span class="punctuation">,</span> rows <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">60</span><span class="punctuation">,</span>cols <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">)</span> </span><br><span class="line">x <span class="operator">&lt;-</span> read.xlsx<span class="punctuation">(</span>xlsxFile<span class="operator">=</span> <span class="string">&quot;./lettuce.xlsx&quot;</span><span class="punctuation">,</span>sheet <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> rows <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">60</span><span class="punctuation">,</span>cols <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#写入 Excel文件，设置 sheet名 </span></span><br><span class="line">write.xlsx<span class="punctuation">(</span>x <span class="operator">=</span> x<span class="punctuation">,</span>sheetName <span class="operator">=</span> <span class="string">&quot;dta&quot;</span><span class="punctuation">,</span>file <span class="operator">=</span> <span class="string">&quot;dta.xlsx&quot;</span><span class="punctuation">,</span>append <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>

<h3 id="其他-R数据格式"><a href="#其他-R数据格式" class="headerlink" title="其他 R数据格式"></a>其他 R数据格式</h3><p>除了常规各种文本表格之外，R还提供了两种文件格式，分别是 RDS与 Rdata格式。RDS可以用来存储单个数据集，Rdata可以存储多个 R数据集。R内置格式的好处是对 R软件支持更好，便于分享，且内置压缩算法，同样的数据内容，文件更小，便于传输。 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据集iris 数据框&quot;data.frame&quot;结构</span></span><br><span class="line"><span class="operator">?</span>iris </span><br><span class="line">head<span class="punctuation">(</span>iris<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>iris<span class="punctuation">)</span></span><br><span class="line">data<span class="punctuation">(</span>iris<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据集iris 数组&quot;array&quot;结构</span></span><br><span class="line"><span class="operator">?</span>iris3</span><br><span class="line">head<span class="punctuation">(</span>iris3<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>iris3<span class="punctuation">)</span></span><br><span class="line">data<span class="punctuation">(</span>iris3<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前工作目录</span></span><br><span class="line">getwd<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#文件夹下所有内容</span></span><br><span class="line">dir<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#write RDS file</span></span><br><span class="line">saveRDS<span class="punctuation">(</span>iris<span class="punctuation">,</span>file<span class="operator">=</span><span class="string">&quot;iris.RDS&quot;</span><span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#read RDS file</span></span><br><span class="line">rdsdata <span class="operator">&lt;-</span> readRDS<span class="punctuation">(</span><span class="string">&quot;iris.RDS&quot;</span><span class="punctuation">)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#Write RData file </span></span><br><span class="line">save<span class="punctuation">(</span>iris<span class="punctuation">,</span>iris3<span class="punctuation">,</span>file <span class="operator">=</span> <span class="string">&quot;iris.Rdata&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#加载变量</span></span><br><span class="line">load<span class="punctuation">(</span><span class="string">&quot;iris.Rdata&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#所有变量存储在.Rdata</span></span><br><span class="line">save.image<span class="punctuation">(</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>



<h3 id="补充R语言下的文件夹与文件操作"><a href="#补充R语言下的文件夹与文件操作" class="headerlink" title="补充R语言下的文件夹与文件操作"></a>补充R语言下的文件夹与文件操作</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#查看当前目录下文件</span></span><br><span class="line">dir<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#列出当前文件夹下所有文件夹，包括隐藏文件夹</span></span><br><span class="line">list.dirs<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#列出当前文件夹下所有文件夹，所有文件</span></span><br><span class="line">list.files<span class="punctuation">(</span>path <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#显示文件夹下面所有的文件，包括以.开头的文件，可以设置all.files = TRUE</span></span><br><span class="line">list.files<span class="punctuation">(</span>path <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span>all.files <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#只关注csv文件可以使用模式匹配，也就是正则表达式</span></span><br><span class="line">list.files<span class="punctuation">(</span>path <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span>pattern <span class="operator">=</span> <span class="string">&quot;csv$&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line">dir.create<span class="punctuation">(</span><span class="string">&quot;ab&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#删除文件夹</span></span><br><span class="line">unlink<span class="punctuation">(</span><span class="string">&quot;ab&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建文件</span></span><br><span class="line">file.create<span class="punctuation">(</span><span class="string">&quot;file_name.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#编辑文件</span></span><br><span class="line">file.edit<span class="punctuation">(</span><span class="string">&quot;file_name.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#重命名文件</span></span><br><span class="line">file.rename<span class="punctuation">(</span><span class="string">&quot;file_name.txt&quot;</span><span class="punctuation">,</span><span class="string">&quot;file_name_2.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#复制文件</span></span><br><span class="line">file.copy<span class="punctuation">(</span><span class="string">&quot;file_name_2.txt&quot;</span><span class="punctuation">,</span><span class="string">&quot;file_name_3.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">file.remove<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;file_name_2.txt&quot;</span><span class="punctuation">,</span><span class="string">&quot;file_name_3.txt&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>



<h2 id="6-数据结构"><a href="#6-数据结构" class="headerlink" title="6_数据结构"></a>6_数据结构</h2><p>在使用R语言过程中，每一步中都需要关注R语言的数据结构。数据结构是R语言中最重要的内容，也是最难的一部分，学会了这部分之后，R语言就不难了。很多时候，函数无法运行，都是因为数据结构的问题。在学习R语言数据结构之前需要首先了解下数据的类型。 </p>
<h3 id="1数据类型"><a href="#1数据类型" class="headerlink" title="1数据类型"></a>1数据类型</h3><p>数据类型主要表示数据代表哪种内容，是字符串还是数值，逻辑值，或者时间日期等。数值可以用于计算，字符串不能用来计算，逻辑值用来判断等。其实这个在excel中我们也见过，Excel中数据类型如下图所示：</p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208272153190.png" alt="image-20220827215303054"></p>
<p>R的数值类型主要包括字符、数值、复数、逻辑4类，如下。我们主要用字符、数值和逻辑三类。</p>
<p>R的数值类型 </p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208272154474.png" alt="image-20220827215449356"></p>
<h3 id="2常用数据结构"><a href="#2常用数据结构" class="headerlink" title="2常用数据结构"></a>2常用数据结构</h3><p>R的数据结构主要包括以下几种：向量、，每一种都有固定的用处，学习R语言需要非常熟悉每一种数据结构的特点。</p>
<p><img src="https://gitee.com/yuming2020/note/raw/master/202208272211265.png" alt="image-20220827221123112"></p>
<h3 id="3内置数据集"><a href="#3内置数据集" class="headerlink" title="3内置数据集"></a>3内置数据集</h3><p>R 语言的一个好处是内置了大量数据集，一般 R扩展包也包含数据集，这样无需自己准备输入文件，可以很方便的重复案例的内容。启动 R之后，默认已经加载了 datasets包，里面包含了大量数据集，使用 data()函数可以显示所有数据集。直接敲数据集的名字就能够打印出数据集的内容，内置数据集与自己通过文件将数据读入 R中，存储为变量效果上是一样的。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有内置数据集 ，来自‘datasets’这个包  </span></span><br><span class="line">data<span class="punctuation">(</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#加载扩展包数据集   </span></span><br><span class="line">data<span class="punctuation">(</span>package <span class="operator">=</span> <span class="string">&quot;MASS&quot;</span><span class="punctuation">)</span>    </span><br><span class="line">data<span class="punctuation">(</span>package <span class="operator">=</span> <span class="string">&quot;ggplot2&quot;</span><span class="punctuation">)</span>   </span><br></pre></td></tr></table></figure>

<h3 id="4-向量"><a href="#4-向量" class="headerlink" title="4 向量"></a>4 向量</h3><p>向量：vector，是 R中最重要的一个概念，它是构成其他数据结构的基础。向量其实是用于存储数值型、字符型或逻辑型数据的一维数组。R中的向量与解析几何或者物理学中有数值和方向的量不同，R中的<strong>向量是一个集合，即可以是数值的集合也可以是字符串或者逻辑值的集合</strong>。其余数据结构都由向量构成。 </p>
<h4 id="4-1-创建向量"><a href="#4-1-创建向量" class="headerlink" title="4.1 创建向量"></a>4.1 创建向量</h4><p>用函数 c来创建向量。c代表 concatenate连接，也可以理解为收集 collect，或者合并 combine。新手经常犯的错误就是忘了使用 c()函数。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#R内置向量 </span></span><br><span class="line">rivers </span><br><span class="line">euro </span><br><span class="line">plot<span class="punctuation">(</span>rivers<span class="punctuation">)</span>   </span><br><span class="line">hist<span class="punctuation">(</span>rivers<span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>euro<span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>euro<span class="punctuation">)</span>   </span><br><span class="line">a <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#字符型向量 </span></span><br><span class="line">b <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span><span class="string">&quot;green&quot;</span><span class="punctuation">,</span><span class="string">&quot;blue&quot;</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#生成连续型向量 </span></span><br><span class="line"><span class="built_in">c</span> <span class="operator">&lt;-</span> seq<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">100</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">)</span>   </span><br><span class="line">d <span class="operator">&lt;-</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">)</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#数据类型、特征</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>a<span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>a<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>a<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向量化操作   </span></span><br><span class="line">a   </span><br><span class="line">a<span class="operator">*</span><span class="number">2</span>   </span><br><span class="line">paste<span class="punctuation">(</span>b<span class="punctuation">,</span>a<span class="punctuation">,</span>sep <span class="operator">=</span> <span class="string">&quot;-&quot;</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>

<h4 id="4-2-向量索引"><a href="#4-2-向量索引" class="headerlink" title="4.2 向量索引"></a>4.2 向量索引</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rivers<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">]</span> </span><br><span class="line">euro<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">]</span> </span><br><span class="line">euro<span class="punctuation">[</span><span class="operator">-</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span>   </span><br><span class="line">euro<span class="punctuation">[</span><span class="string">&quot;ATS&quot;</span><span class="punctuation">]</span> </span><br></pre></td></tr></table></figure>

<h4 id="4-3-向量计算"><a href="#4-3-向量计算" class="headerlink" title="4.3 向量计算"></a>4.3 向量计算</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">10000000</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line">mean<span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line">var<span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line">sd<span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line">median<span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">range</span><span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">abs</span><span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line"><span class="built_in">sqrt</span><span class="punctuation">(</span>x<span class="punctuation">)</span>   </span><br><span class="line">a <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">5</span> </span><br><span class="line">b <span class="operator">&lt;-</span> 10<span class="operator">:</span><span class="number">1</span> </span><br><span class="line">a<span class="operator">+</span><span class="number">1</span> </span><br><span class="line">a<span class="operator">*</span><span class="number">2</span> </span><br><span class="line">a<span class="operator">+</span>b</span><br></pre></td></tr></table></figure>

<h3 id="5-矩阵"><a href="#5-矩阵" class="headerlink" title="5 矩阵"></a>5 矩阵</h3><p>矩阵（Matrix）是一个按照长方阵列排列的复数或实数集合。向量是一维的，而矩阵是二维的，需要有行和列。矩阵是 R语言中使用较多的一种数据结构，矩阵分为数值矩阵和字符串矩阵，常用的是数据矩阵，基因的表达数据为数值矩阵。矩阵有两大作用，一个是用来计算相关性，另外可以用来绘制热图。</p>
<h4 id="5-1-创建矩阵"><a href="#5-1-创建矩阵" class="headerlink" title="5.1 创建矩阵"></a>5.1 创建矩阵</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">state.x77   </span><br><span class="line">m <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">20</span><span class="punctuation">,</span>nrow <span class="operator">=</span> <span class="number">4</span><span class="punctuation">,</span>ncol <span class="operator">=</span> <span class="number">5</span><span class="punctuation">)</span>   </span><br><span class="line">rowSums<span class="punctuation">(</span>state.x77<span class="punctuation">)</span> </span><br><span class="line">apply<span class="punctuation">(</span>state.x77<span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="built_in">sum</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">colMeans<span class="punctuation">(</span>state.x77<span class="punctuation">)</span> </span><br><span class="line">apply<span class="punctuation">(</span>state.x77<span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span>mean<span class="punctuation">)</span></span><br><span class="line">apply<span class="punctuation">(</span>state.x77<span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span>var<span class="punctuation">)</span></span><br><span class="line">apply<span class="punctuation">(</span>state.x77<span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="built_in">max</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">?</span>apply</span><br><span class="line">cor<span class="punctuation">(</span>state.x77<span class="punctuation">)</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">dim</span><span class="punctuation">(</span>state.x77<span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>state.x77<span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>state.x77<span class="punctuation">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-2-矩阵索引"><a href="#5-2-矩阵索引" class="headerlink" title="5.2 矩阵索引"></a>5.2 矩阵索引</h4><p>矩阵属于二位数据，需要给定行列的。 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">state.x77 </span><br><span class="line">state.x77<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span> </span><br><span class="line">state.x77<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span> </span><br><span class="line">state.x77<span class="punctuation">[</span><span class="string">&quot;Alabama&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span> </span><br><span class="line">state.x77<span class="punctuation">[</span><span class="punctuation">,</span><span class="string">&quot;Population&quot;</span><span class="punctuation">]</span> </span><br><span class="line"><span class="comment">#取奇数列</span></span><br><span class="line">state.x77<span class="punctuation">[</span><span class="punctuation">,</span><span class="built_in">c</span><span class="punctuation">(</span><span class="built_in">T</span><span class="punctuation">,</span><span class="built_in">F</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>



<h4 id="5-3-利用矩阵绘制热图"><a href="#5-3-利用矩阵绘制热图" class="headerlink" title="5.3 利用矩阵绘制热图"></a>5.3 利用矩阵绘制热图</h4><p>R非常擅长基于矩阵数据绘制热图，基础包中的 heatmap()可以直接绘制热图，gplots 包 heatmap.2()也可以绘制热图，pheatmap包 pheatmap()函数可以绘制更加优雅的热图，ComplexHeatmap包 可以绘制复杂的热图。 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">example<span class="punctuation">(</span><span class="string">&quot;heatmap&quot;</span><span class="punctuation">)</span> </span><br><span class="line">m <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;Rdata/heatmap.csv&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>row.names <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span> </span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>m<span class="punctuation">)</span> </span><br><span class="line">x <span class="operator">&lt;-</span> as.matrix<span class="punctuation">(</span>m<span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>t<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>col<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;green&quot;</span><span class="punctuation">,</span><span class="string">&quot;red&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line">yanse <span class="operator">&lt;-</span> colorRampPalette<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span><span class="string">&quot;black&quot;</span><span class="punctuation">,</span><span class="string">&quot;green&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">(</span>nrow<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>col<span class="operator">=</span>yanse<span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>col<span class="operator">=</span>yanse<span class="punctuation">,</span>RowSideColors <span class="operator">=</span> yanse<span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>col<span class="operator">=</span>yanse<span class="punctuation">,</span>ColSideColors <span class="operator">=</span> </span><br><span class="line">colorRampPalette<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span><span class="string">&quot;black&quot;</span><span class="punctuation">,</span><span class="string">&quot;green&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">(</span>ncol<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>col<span class="operator">=</span>yanse<span class="punctuation">,</span>Rowv <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>col<span class="operator">=</span>yanse<span class="punctuation">,</span>Rowv <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span>Colv <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>state.x77<span class="punctuation">)</span> </span><br><span class="line">heatmap<span class="punctuation">(</span>state.x77<span class="punctuation">,</span>scale <span class="operator">=</span> <span class="string">&quot;col&quot;</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>



<p>利用 pheatmap绘制热图 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#install.packages(&quot;pheatmap&quot;) </span></span><br><span class="line">library<span class="punctuation">(</span>pheatmap<span class="punctuation">)</span> </span><br><span class="line">x <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;Rdata/heatmap.csv&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>row.names <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span> </span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line">pheatmap<span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line">annotation_col <span class="operator">&lt;-</span> </span><br><span class="line">data.frame<span class="punctuation">(</span>CellType<span class="operator">=</span>factor<span class="punctuation">(</span><span class="built_in">rep</span><span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;N1&quot;</span><span class="punctuation">,</span><span class="string">&quot;T1&quot;</span><span class="punctuation">,</span><span class="string">&quot;N2&quot;</span><span class="punctuation">,</span><span class="string">&quot;T2&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span>each<span class="operator">=</span><span class="number">5</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line">rownames<span class="punctuation">(</span>annotation_col<span class="punctuation">)</span> <span class="operator">&lt;-</span> colnames<span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line">pheatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>annotation_col <span class="operator">=</span> annotation_col<span class="punctuation">)</span> </span><br><span class="line">pheatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>annotation_col <span class="operator">=</span> annotation_col<span class="punctuation">,</span>display_numbers <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">)</span> </span><br><span class="line">pheatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>annotation_col <span class="operator">=</span> annotation_col<span class="punctuation">,</span>display_numbers <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>number_format <span class="operator">=</span> </span><br><span class="line"><span class="string">&quot;%.2f&quot;</span><span class="punctuation">)</span> </span><br><span class="line">pheatmap<span class="punctuation">(</span>x<span class="punctuation">,</span>annotation_col <span class="operator">=</span> annotation_col<span class="punctuation">,</span>display_numbers <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>number_format <span class="operator">=</span> </span><br><span class="line"><span class="string">&quot;%.1f&quot;</span><span class="punctuation">,</span>number_color <span class="operator">=</span> <span class="string">&quot;black&quot;</span><span class="punctuation">)</span> </span><br></pre></td></tr></table></figure>



<h3 id="6-数据框"><a href="#6-数据框" class="headerlink" title="6 数据框"></a>6 数据框</h3><p>数据框是一种表格式的数据结构，属于一种二维表，分为行和列。数据框旨在模拟数据集，与其他统计软件例如 SAS或者 SPSS中的数据集的概念一致。数据集通常是由数据构成的一个矩形数组，行表示观测，列表示变量。不同的行业对于数据集的行和列叫法不同。在一个数据框中，每一行的元素个数相同，每一列元素个数也相同，每一列的数据类型一致，都为一个向量，每一行内容还是一个数据框。数据框是 R中使用最广泛的一种数据格式。</p>
<h4 id="6-1-创建数据框"><a href="#6-1-创建数据框" class="headerlink" title="6.1 创建数据框"></a>6.1 创建数据框</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mtcars   </span><br><span class="line">iris   </span><br><span class="line">adata <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>state.name<span class="punctuation">,</span>state.division<span class="punctuation">,</span>state.area<span class="punctuation">)</span>   </span><br><span class="line">View<span class="punctuation">(</span>adata<span class="punctuation">)</span></span><br><span class="line">str<span class="punctuation">(</span>adata<span class="punctuation">)</span> </span><br><span class="line">head<span class="punctuation">(</span>adata<span class="punctuation">)</span></span><br><span class="line">tail<span class="punctuation">(</span>adata<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dim</span><span class="punctuation">(</span>adata<span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>adata<span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>adata<span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-数据框索引"><a href="#6-2-数据框索引" class="headerlink" title="6.2 数据框索引"></a>6.2 数据框索引</h4><ul>
<li><input disabled="" type="checkbox"> 中括号 </li>
<li><input disabled="" type="checkbox"> 名称 </li>
<li><input disabled="" type="checkbox"> dollar符 </li>
<li><input disabled="" type="checkbox"> 逻辑值</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">euro<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">]</span>   </span><br><span class="line">euro<span class="punctuation">[</span><span class="operator">-</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span>   </span><br><span class="line">euro<span class="punctuation">[</span><span class="string">&quot;ATS&quot;</span><span class="punctuation">]</span>   </span><br><span class="line">mtcars<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span><span class="number">1</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">]</span>   </span><br><span class="line">mtcars<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">)</span><span class="punctuation">]</span>   </span><br><span class="line">mtcars<span class="operator">$</span>mpg   </span><br><span class="line">mtcars<span class="punctuation">[</span><span class="string">&quot;Mazda RX4&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span>   </span><br><span class="line"> </span><br><span class="line">x <span class="operator">&lt;-</span> runif<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span><span class="built_in">min</span> <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span><span class="built_in">max</span> <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span>   </span><br><span class="line">x<span class="punctuation">[</span>x<span class="operator">&gt;</span><span class="number">50</span><span class="punctuation">]</span>   </span><br><span class="line">x <span class="punctuation">[</span>x<span class="operator">&gt;</span><span class="number">20</span> <span class="operator">&amp;</span> x <span class="operator">&lt;</span><span class="number">40</span><span class="punctuation">]</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">####逻辑判定符号：&amp;, |, ==, !=</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>6.3利用 R实现 vlookup  案例</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Excel函数：=VLOOKUP($A2,Sheet1!$A$1:$I$201,COLUMN(Sheet1!A2),FALSE) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读入 200个基因的列表 bigtable   </span></span><br><span class="line">genes200 <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;Rdata/200genes.csv&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>stringsAsFactors <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#读入 121个基因的 list small list   </span></span><br><span class="line">genes121 <span class="operator">&lt;-</span>  read.csv<span class="punctuation">(</span><span class="string">&quot;Rdata/121genes.csv&quot;</span><span class="punctuation">,</span>header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span>stringsAsFactors <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span>   </span><br><span class="line">head<span class="punctuation">(</span>genes200<span class="punctuation">)</span>   </span><br><span class="line">head<span class="punctuation">(</span>genes121<span class="punctuation">)</span>   </span><br><span class="line">genes200<span class="punctuation">[</span><span class="string">&quot;CLU&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改 gene table行名   </span></span><br><span class="line">rownames<span class="punctuation">(</span>genes200<span class="punctuation">)</span> <span class="operator">&lt;-</span> genes200<span class="operator">$</span>gene   </span><br><span class="line">genes200<span class="punctuation">[</span><span class="string">&quot;CLU&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span>   </span><br><span class="line">genes200<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;CLU&quot;</span><span class="punctuation">,</span><span class="string">&quot;DCN&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="punctuation">]</span>   </span><br><span class="line"><span class="comment">#去除重复 gene ID </span></span><br><span class="line">gene93 <span class="operator">&lt;-</span> unique<span class="punctuation">(</span>genes121<span class="operator">$</span>gene<span class="punctuation">)</span>   </span><br><span class="line"><span class="comment">#利用数据框的访问功能，一次实现 Excel Vlookup功能   </span></span><br><span class="line">dta <span class="operator">&lt;-</span> genes200<span class="punctuation">[</span>gene93<span class="punctuation">,</span><span class="punctuation">]</span>   </span><br><span class="line">dta   </span><br><span class="line"><span class="comment">#数据中包含没有检索到的 gene ID，返回值为 NA，利用 na.omit删除包含 NA的行   </span></span><br><span class="line">dta <span class="operator">&lt;-</span> na.omit<span class="punctuation">(</span>dta<span class="punctuation">)</span> </span><br><span class="line"><span class="built_in">dim</span><span class="punctuation">(</span>dta<span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>dta<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="number">1</span><span class="operator">:</span>nrow<span class="punctuation">(</span>dta<span class="punctuation">)</span>   </span><br><span class="line">write.csv<span class="punctuation">(</span>dta<span class="punctuation">,</span>file <span class="operator">=</span> <span class="string">&quot;Rdata/gene86.csv&quot;</span><span class="punctuation">,</span>row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span>   </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="7-缺失数据"><a href="#7-缺失数据" class="headerlink" title="7 缺失数据"></a>7 缺失数据</h3><p>缺失信息问题在数据科学中非常常见。在大规模数据采集过程中，几乎不可能每次都得到完整的数据，那么该如何处理缺失数据呢？首先我们要清楚为何会出现缺失数据，一种可能是机器断电，设备故障导致某个测量值发生了丢失。或者测量根本没有发生，例如在做调查问卷时，有些问题没有回答，或者有些问题是无效的回答等，这些都算作缺失值。对于缺失信息，R中提供了一些专门的处理方法。<br>在 R中，NA代表缺失值，NA是不可用，not available的简称，用来存储缺失信息。这里缺失值 NA表示 没有，但注意没有并不一定就是 0，NA是不知道是多少，也能是 0，也可能是任何值，缺失值和值为零是完全不同的。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">,</span><span class="literal">NA</span><span class="punctuation">)</span> </span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>x<span class="punctuation">,</span>na.rm <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">)</span> </span><br><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span>x<span class="punctuation">)</span> </span><br><span class="line"><span class="comment">#install.packages(&quot;VIM&quot;)   </span></span><br><span class="line">library<span class="punctuation">(</span>VIM<span class="punctuation">)</span>  </span><br><span class="line">help<span class="punctuation">(</span>packages<span class="operator">=</span><span class="string">&quot;VIM&quot;</span><span class="punctuation">)</span></span><br><span class="line">data<span class="punctuation">(</span>sleep<span class="punctuation">,</span>package <span class="operator">=</span> <span class="string">&quot;VIM&quot;</span><span class="punctuation">)</span>   </span><br><span class="line">na.omit<span class="punctuation">(</span>sleep<span class="punctuation">)</span>  </span><br></pre></td></tr></table></figure>



<h3 id="8-列表"><a href="#8-列表" class="headerlink" title="8 列表"></a>8 列表</h3><p>列表就是一些对象的有序集合。列表中可以存储若干向量、矩阵、数据框，甚至其他列表的组合。 </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">state.center</span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>state.center<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>state.center<span class="punctuation">)</span></span><br><span class="line">state.center<span class="operator">$</span>x</span><br><span class="line"></span><br><span class="line">alist <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>euro<span class="punctuation">,</span>state.x77<span class="punctuation">,</span>iris<span class="punctuation">)</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">###列表与数据框的选取</span></span><br><span class="line"><span class="comment">##有名称时用$</span></span><br><span class="line">state.center<span class="operator">$</span>x</span><br><span class="line"><span class="comment">#选取出来的是列表的第一个元素的具体内容，这个是个向量</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>state.center<span class="operator">$</span>x<span class="punctuation">)</span></span><br><span class="line">is.vector<span class="punctuation">(</span>state.center<span class="operator">$</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="comment">##也可以按照位置选取,注意[1]与[[1]]的区别</span></span><br><span class="line">state.center<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="comment">#选取出来的是列表中的第一个元素，还是列表 </span></span><br><span class="line">state.center<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="comment">#选取出来的是列表的第一个元素的具体内容，这个是个向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##无名字只能按照位置选取</span></span><br><span class="line">alist <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>euro<span class="punctuation">,</span>state.x77<span class="punctuation">,</span>iris<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>alist<span class="punctuation">)</span><span class="comment">#null,没有名字</span></span><br><span class="line">alist<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="comment">#选取出来的是列表中的第一个元素，还是列表   </span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>alist<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">alist<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="comment">#选取出来的是列表的第一个元素的具体内容，这个是个向量</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>alist<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br><span class="line">is.vector<span class="punctuation">(</span>alist<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>



<h3 id="9-因子"><a href="#9-因子" class="headerlink" title="9 因子"></a>9 因子</h3><p>所有的数据集合可以分为三类，连续型，名义型和有序型。连续型例如1 2 3 4 5 8 9 10，名义型如sample1 sample2 sample3 ，而有序型 good better best；周一，周二，周三……等。在R中名义型变量和有序性变量称为因子，factor。这些分类变量的可能值称为一个水平level，由这些水平值构成的向量就称为因子。因子主要用于计算频数，可以用来分组。可以通过factor()函数中的labels选项对因子的值进行批量修改。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">state.division</span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>state.division<span class="punctuation">)</span></span><br><span class="line">str<span class="punctuation">(</span>state.division<span class="punctuation">)</span></span><br><span class="line">state_division <span class="operator">&lt;-</span> state.division</span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>state_division<span class="punctuation">)</span></span><br><span class="line">levels<span class="punctuation">(</span>state_division<span class="punctuation">)</span></span><br><span class="line">table<span class="punctuation">(</span>state_division<span class="punctuation">)</span></span><br><span class="line">par<span class="punctuation">(</span>mar<span class="operator">=</span><span class="built_in">c</span> <span class="punctuation">(</span><span class="number">10</span><span class="punctuation">,</span><span class="number">4.1</span><span class="punctuation">,</span><span class="number">4.1</span><span class="punctuation">,</span><span class="number">2.1</span><span class="punctuation">)</span><span class="punctuation">)</span> </span><br><span class="line">barplot<span class="punctuation">(</span>table<span class="punctuation">(</span>state_division<span class="punctuation">)</span><span class="punctuation">,</span>las<span class="operator">=</span><span class="number">3</span><span class="punctuation">,</span>cex.axis<span class="operator">=</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">afactor <span class="operator">&lt;-</span> factor<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;blue&quot;</span><span class="punctuation">,</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span><span class="string">&quot;green&quot;</span><span class="punctuation">,</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span><span class="string">&quot;blue&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span>levels <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;red&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                                                        <span class="string">&quot;green&quot;</span><span class="punctuation">,</span><span class="string">&quot;blue&quot;</span><span class="punctuation">,</span><span class="string">&quot;yellow&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>   </span><br><span class="line">bfactor <span class="operator">&lt;-</span> factor<span class="punctuation">(</span><span class="built_in">letters</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">,</span> labels <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;one&quot;</span><span class="punctuation">,</span><span class="string">&quot;two&quot;</span><span class="punctuation">,</span><span class="string">&quot;three&quot;</span><span class="punctuation">,</span><span class="string">&quot;four&quot;</span><span class="punctuation">,</span><span class="string">&quot;five&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>C_Basics</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/C%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="恼"><a href="#恼" class="headerlink" title="恼"></a>恼</h1><ol>
<li>符号字符可以直接用<code>hhd</code>输入  无符号<code>u</code>  unsigned long long llu</li>
<li><code>int</code>转化为<code>long long</code>（尤其是在加和乘中会经常遇到）时要</li>
<li>一些常见的超大数字<br>long long c&#x3D;0x7fffffff;<br>unsigned int d&#x3D;2147483748;<br>int占用4字节，32比特，数据范围为-2147483648<del>2147483647 -2^ 31</del>2^31-1 10</li>
<li>有除法先讨论0 以及是整数吗 如果发现就是浮点数的运算非必要一定不要出现整除的nt行为（）<ul>
<li>但是在比较大小的时候，可以出现除以0，认为是“无穷”即可</li>
</ul>
</li>
<li>math函数返回double类型 不要强制转换</li>
<li>存在整形相乘时，注意及时修改中间变量类型，避免数据溢出（二分法找x的平方根）</li>
<li>输出百分号是 <code>%%</code>  -如何输出<code>%%? That&#39;s imp0ssib1e</code>百分号输出有两个！两个！</li>
<li><code>unsigned int</code>不要用<code>int</code>!一定要全用这个类型！范围不一样！</li>
<li>c语言中没有布尔型运算 要输入头文件<code>#include&lt;stdbool.h&gt;</code></li>
<li>好好扫描他的输出，看看是不是输入坐标也有br的cd空格</li>
<li></li>
<li>浮点数判断大小</li>
<li>注意数据类型 尤其是题给函数  <strong>加乘开大  除法看是否浮点数</strong></li>
<li>整除问题标记是否为0（eg连分数）</li>
<li>开数组之前可以思考一下 比方说矩阵的加法 其实不一定非得要开两个数组 或许可以直接计算出结果</li>
<li>余子式新矩阵的下标错了捏</li>
<li>四舍五入输出 加0.5后强制整数阶段转换</li>
</ol>
<h1 id="基础知识-语句"><a href="#基础知识-语句" class="headerlink" title="基础知识&amp;语句"></a>基础知识&amp;语句</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="cout"><a href="#cout" class="headerlink" title="cout"></a><code>cout</code></h3><ul>
<li>可以智慧地识别出数据类型，不需要人为指定。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; carrots;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="printf用法小全"><a href="#printf用法小全" class="headerlink" title="printf用法小全"></a>printf用法小全</h3><p><code>%[标志][最小宽度][.精度][类型长度]type</code><br><code>%S</code>可以打印宽字符串 以两个’\0’为结尾<br><code>%e``%E</code>输出科学计数法</p>
<p><code>-</code>结果左对齐 右边填空格 默认右对齐 左边填空格<br><code>+</code>输出符号<br><code>0</code>输出前补0直到占满给定列宽<br><code>#</code>对八进制和十六进制加前缀   对ef强制输出小数点</p>
<p><code>printf(&quot;%*d&quot;,m,1000)</code>可以指定输出最小宽度m<br><code>printf(&quot;%.*f&quot;,m,1000)</code>可以指定输出精度m 整数会自动补0 字符串超过指定长度截断<br>判断一个数是否为整数并依此保留精度不同printf(“%.*lf\n”,(fabs(ave-(int)ave))&lt;1e-6?0:2,ave);</p>
<h2 id="一些细碎的知识点"><a href="#一些细碎的知识点" class="headerlink" title="一些细碎的知识点"></a>一些细碎的知识点</h2><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><ol>
<li>常用数据类型以及存储范围(单位：字节，一个字节是8位即$2^8$)<br>char 1<br>short int 2<br>(unsigned)int 4 -2147483648<del>2147483647 -2^ 31</del>2^31-1<br>long logn 8  2^ 63<br>float 4<br>double 8</li>
<li>C++提供了一种灵活的标准，确保最小长度</li>
</ol>
<ul>
<li>short不短于16</li>
<li>int不短于short</li>
<li>long不短于int，至少32位</li>
<li>long long不短于long，至少64位</li>
<li>float至少32位，都变了至少48位（double通常位64位）</li>
</ul>
<ol start="3">
<li><code>const</code>限定，在建立变量的同时要对其赋值，否则该常量值不定且无法修改</li>
</ol>
<ul>
<li>常量存储小数默认使用double类型，如果想得到浮点加后缀f&#x2F;F，想得到long double加后缀l&#x2F;L</li>
</ul>
<ol start="4">
<li>浮点数表示的范围大于整数，但是运算速度和精度会有所降低</li>
</ol>
<ul>
<li>eg.float类型的数字1.23e+23，对其加1输出不变，因为float只能表示前七位，因而第23位变化对这个值不会有任何影响</li>
</ul>
<h3 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h3><ol start="2">
<li>逻辑语句</li>
</ol>
<ul>
<li><code>&amp;&amp;</code>优先级大于<code>||</code></li>
<li><code>a&lt;b&lt;c</code>中 关系运算符是左结合的 实质是只要c大于1 该式恒成立</li>
</ul>
<ol start="3">
<li>条件运算符<blockquote>
<p>z&#x3D;(a&gt;b)?A:B</p>
</blockquote>
</li>
</ol>
<p>一个复杂的嵌套举例：根据变量的值输出ab大小关系的陈述语句</p>
<blockquote>
<p>printf(“a is %s b”, (a&gt;b) ? “greater than” : (a&lt;b) ? “less than” : “equal to”)</p>
</blockquote>
<ol start="4">
<li><p><code>switch</code>语句</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> switch (n)&#123;</span><br><span class="line">    <span class="symbol">case0:</span>    ;<span class="keyword">break</span>;</span><br><span class="line">    <span class="symbol">case1:</span>    ;<span class="keyword">break</span>;....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不同的case可以共享同一组语句序列和打印结果 可以写在同一行 </p>
</li>
<li><p>函数</p>
</li>
<li><p>格式</p>
<blockquote>
<p>类型名 函数名（参数列表）<br>{<br> 函数体<br>}</p>
</blockquote>
</li>
<li><p>声明（函数本体可写于程序最后）去掉函数体后加分号</p>
</li>
<li><p>赋值语句：可以连续使用，从右到左赋值</p>
</li>
</ol>
<h1 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h1><h2 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h2><ol>
<li>数组是存放在连续内存空间上的相同类型数据的集合</li>
<li>只能覆盖，无法删除</li>
<li>对于一维数组，内存空间的地址是连续的</li>
<li>对于二维数组，地址并非连续的矩阵，而是row个连续的内存条</li>
<li><code>sizeof()</code>表整个数组所占字节数（字节数&#x2F;类型长度&#x3D;数组元素数），如果作用于数组元素，得到以字节为单位的长度</li>
<li><code>int a[10]=&#123;1,2,3,4,5&#125;,i</code>其中i为偏移量，部分初始化时其余元素为0；只有{}时全设为0；初始化时<code>=</code>可省略<br>数组访问中数组名作为表达式的值等于该数组的首地址</li>
</ol>
<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><ol>
<li>有序数组</li>
<li>元素唯一</li>
<li>关键是确定<strong>区间两端的开闭</strong></li>
<li>时间复杂度O(log n)；空间复杂度O(n);<br>eg. 左闭右闭<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">r=mid-<span class="number">1</span>;</span><br><span class="line">l=mid+<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>需要以空字符<code>\0</code>标记结尾</li>
<li>一种简练初始化的方法,<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char tag[] = &quot;I&#x27;m Gamer&quot;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol>
<li>拼接：<code>cout</code>会把两个用空格、换行符、制表符分隔的字符串直接合并为一个</li>
<li><code>strlen</code>返回字符串长度，只计算可见字符，忽略空字符</li>
</ol>
<ul>
<li>因而数组长度的长度要加1</li>
</ul>
<ol start="3">
<li><code>.size()</code>可以获取vector类型的长度</li>
</ol>
<h4 id="string类"><a href="#string类" class="headerlink" title="string类"></a><code>string</code>类</h4><ol>
<li>可以将字符串声明为简单变量</li>
<li>最初创建的是一个长度为0的string对象，读入之后，可以自动调整该对象的长度，但是最后不会加空格<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;string&gt;</span><br><span class="line">string str1;</span><br><span class="line">string str2 = &quot;panther&quot;; //创造一个初始化过的string对象</span><br><span class="line">//类似数组初始化： string str2 = &#123;&quot;panther&quot;&#125;;</span><br><span class="line">cin &gt;&gt; str1; //会自动调整大小</span><br></pre></td></tr></table></figure></li>
<li>可以将一个string对象赋给另一个string对象（数组不能）</li>
<li>可以使用“+”拼接字符串到末尾</li>
<li><code>string</code>变量要在主函数中建立</li>
<li><code>.length()</code>获取字符串长度</li>
<li><strong>简单遍历</strong>对比</li>
</ol>
<table>
<thead>
<tr>
<th><code>for(string&amp; str:strs)</code></th>
<th>生成<code>str</code>对每个值引用，对其操作会影响到原容器</th>
</tr>
</thead>
<tbody><tr>
<td><code>for(string str:strs)</code></td>
<td>生成<code>str</code>对每个值复制，对其操作不会影响到原容器</td>
</tr>
</tbody></table>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><h5 id="cin输入"><a href="#cin输入" class="headerlink" title="cin输入"></a><code>cin</code>输入</h5><pre><code>* 使用空白（空格、制表符、换行符）确定字符串结束的位置
* 输入之后，cin把字符放到数组中，自动在结尾添加空字符
</code></pre>
<h5 id="面向行的输入"><a href="#面向行的输入" class="headerlink" title="面向行的输入"></a>面向行的输入</h5><h6 id="getline"><a href="#getline" class="headerlink" title="getline()"></a><code>getline()</code></h6><ol>
<li>回车键输入的换行符来确定输入结尾</li>
<li><code>cin.getline(name,length+1)</code>两个参数调用</li>
<li>不保存换行符，更换为空字符</li>
</ol>
<h6 id="get"><a href="#get" class="headerlink" title="get()"></a><code>get()</code></h6><ol>
<li>保留换行符，存储队列</li>
<li>把输入中连续的两航存储在两个数组中:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cin.getline(name1, length).getlinie(name2, length);</span><br></pre></td></tr></table></figure></li>
<li>可以根据<code>get()</code>的输出来检查错误，是数组溢出还是正常换行</li>
</ol>
<h5 id="对比"><a href="#对比" class="headerlink" title="对比~"></a>对比~</h5><p>%c输入要注意前边加一个空格把所有空格吃掉</p>
<p><code>scanf(&quot;%[^\n]&quot;,str);</code>读入一行不包括行尾换行符的字符串作为带查找的字串</p>
<p><code>getchar()</code>只在回车处停<br><code>putchar()</code>输出字符的速度更快,输出的是字符,所以括号里有数字时会自动转换ASCII值<br><code>putchar(10)</code>换行</p>
<table>
<thead>
<tr>
<th>输入方式</th>
<th>特征</th>
</tr>
</thead>
<tbody><tr>
<td><code>gets()</code></td>
<td>从标准输入文件中读入一行字符，最终字符串不含’\n’ 最后也不会自动加空格 <strong>长度就是输入的长度</strong></td>
</tr>
<tr>
<td><code>puts()</code></td>
<td>在最后额外输出一个换行符</td>
</tr>
<tr>
<td><code>fgets</code>(char *s,int n,stdin)</td>
<td><strong>至多读入n-1个字符</strong>，自动添加结尾字符串结束符</td>
</tr>
<tr>
<td><code>fputs</code>(char *s,int n,stdout)</td>
<td>不会额外输出换行符</td>
</tr>
</tbody></table>
<p>n均可省略</p>
<p>输入数组就不要加<code>&amp;</code>和<code>[i]</code></p>
<p>存储日期 定义并竖着初始化日期名  列保证大于最长字符串长度</p>
<h4 id="询问操作"><a href="#询问操作" class="headerlink" title="询问操作"></a>询问操作</h4><p><strong>比较字典序</strong> 实际上指针指向的是该地址以后的字符串<br>比较<code>strcmp(str1,str2,num)</code>相等返回0 小于返回负数 大于返回正数 均视为无符号字符</p>
<p>复制<code>memcpy(destination, source,num)</code>返回<code>destination</code> 只负责赋值<code>num</code>个<strong>字节全部复制建议用<code>sizeof(source)</code></strong> 不会检查<code>NULL</code>指针<br>此函数为内存复制函数</p>
<p>查找<code>memchr(str,s,num)</code>在<code>str</code>的前num位中寻找<code>s</code> 返回一个unsigned字符 表示下标（%d）输出即可 找不到返回<code>NULL</code></p>
<p><code>strchr(char *str,int c)</code>             在str中查找c首次出现的位置的指针<br><code>strrchr(char *str,int c) </code>           在str中查找c最后一次出现的位置的指针</p>
<p><code>strstr(char *str,char *s1)</code>          在str中查找s1首次出现的位置的指针</p>
<h6 id="查找子串出现的次数"><a href="#查找子串出现的次数" class="headerlink" title="查找子串出现的次数"></a>查找子串出现的次数</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(char *p=strstr(str,s);p!=<span class="variable constant_">NULL</span>;p=strstr(p+<span class="number">1</span>,s))</span><br><span class="line">    sum++;</span><br></pre></td></tr></table></figure>
<p>输出子串区间</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">char *p=str;</span><br><span class="line">int len=strlen(s);</span><br><span class="line"><span class="keyword">while</span>((p=strstr(p,b))!=<span class="variable constant_">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    int idx=p-a;</span><br><span class="line">    int r=idx+len-<span class="number">1</span>;</span><br><span class="line">    p+=len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><p>s+i表示的就是字符串s的第i个字符  也表示自第i个字符向后（包括第i个）</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>strcat(s,str+i)</code>插入串+插入地址；</td>
<td>将s插入到str的第i位之前，后边的字符向后顺移</td>
</tr>
<tr>
<td><code>strcpy(str+i,s)</code>插入地址+串；</td>
<td>将s插入到str的第i位之前，后边的字符向后顺移</td>
</tr>
<tr>
<td><code>strncat(s,str+i);strncpy(str+i,s);</code></td>
<td>加了参数n，表示最大许用参数，更安全；</td>
</tr>
</tbody></table>
<h6 id="删除第i个字符以后的内容"><a href="#删除第i个字符以后的内容" class="headerlink" title="删除第i个字符以后的内容"></a>删除第i个字符以后的内容</h6><p><strong>实现指定位置字符串截断 将截断第一位换成’0’后面就不会输出啦</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">str[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>使用<code>\0</code>相当于截断</p>
<h6 id="删除一个字符串的第i位到第j位"><a href="#删除一个字符串的第i位到第j位" class="headerlink" title="删除一个字符串的第i位到第j位"></a>删除一个字符串的第i位到第j位</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">strcpy(str+i,str+j+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h6 id="将s插入到str的第i位之前，后边的字符向后顺移"><a href="#将s插入到str的第i位之前，后边的字符向后顺移" class="headerlink" title="将s插入到str的第i位之前，后边的字符向后顺移"></a>将s插入到str的第i位之前，后边的字符向后顺移</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">strcat(s,str+i);</span><br><span class="line">strcpy(str+i,s);</span><br></pre></td></tr></table></figure>

<h6 id="从-str-的第i位开始用s覆盖"><a href="#从-str-的第i位开始用s覆盖" class="headerlink" title="从 str 的第i位开始用s覆盖"></a>从 str 的第i位开始用s覆盖</h6><p>覆盖指从第i位开始，将str的字符依次替换为s的字符，如果str长度不够，则向后延长直到s结束，如果长度不到str结尾，则后续字符保留str原字符</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int len=strlen(s);</span><br><span class="line"><span class="keyword">if</span>(len&lt;strlen(str)-i)  memcpy(str+i,s); </span><br><span class="line"><span class="keyword">else</span> strcpy(str+i,s);</span><br></pre></td></tr></table></figure>

<p>char <em>strcpy(char</em> dest, const char *src);<br>    功能：把从src地址开始且含有NULL结束符的字符串复制到以dest开始的地址空间<br>    用法：strcpy(s,t);<br><code>strcpy</code>会复制<code>\0</code>而<code>memcpy</code>不会<br>拷贝函数源地址和目标地址不能有任何重叠</p>
<p>char *strcat(char *dest,char *src);<br>    功能：把src所指字符串添加到dest结尾处(覆盖dest结尾处的’\0’)并添加’\0’<br>    用法：strcat(s,t);<br>strcpy(char *dst,const char *src)   将src复制到dst中<br>strncpy(char *dst,const char *src,size_t n)  </p>
<p>strcat(char *dst,const *src)        将字符串src追加到字符串dst后<br>strncat(char *dst,const *src，size_t n)</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>isalnum(int c)</code></td>
<td>c是否是字母或数字</td>
</tr>
<tr>
<td><code>isalpha(int c)</code></td>
<td>c是否是字母</td>
</tr>
<tr>
<td><code>iscntrl(int c)</code></td>
<td>c是否是控制符(0x00~0xlf,0x7f)</td>
</tr>
<tr>
<td><code>isdigital(int c)</code></td>
<td>c是否是数字</td>
</tr>
<tr>
<td><code>isxdigit()</code></td>
<td>c是否是<strong>16进制</strong>数字</td>
</tr>
<tr>
<td><code>islower()</code></td>
<td>小写字母</td>
</tr>
<tr>
<td><code>isupper()</code></td>
<td></td>
</tr>
<tr>
<td><code>isgraph()</code></td>
<td>是否是可打印字符（空格除外）</td>
</tr>
<tr>
<td><code>isprintf()</code></td>
<td>是否是可打印字符</td>
</tr>
<tr>
<td><code>ispunct()</code></td>
<td>是否是符号，可打印但非字母数字</td>
</tr>
<tr>
<td><code>isspace()</code></td>
<td>是否是空白符（’ ‘,’\n’,’\r’,’\t’,’\v’）</td>
</tr>
</tbody></table>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a><a href="https://blog.csdn.net/forever__1234/article/details/89647975?ops_request_misc=&request_id=&biz_id=102&utm_term=c++%20map&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-89647975.142%5Ev99%5Epc_search_result_base3&spm=1018.2226.3001.4187">map</a></h2><h3 id="普通map"><a href="#普通map" class="headerlink" title="普通map"></a>普通map</h3><ol>
<li>头文件<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> &lt;map&gt;</span><br></pre></td></tr></table></figure></li>
<li>定义&amp;初始化<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">map&lt;keytype,valuetype&gt; name;</span><br><span class="line"><span class="regexp">//</span>假设存在map名为m</span><br><span class="line">map&lt;keytype,valuetype&gt; m2(m);</span><br><span class="line"><span class="regexp">//</span>创建了m的副本m2</span><br><span class="line">map&lt;keytype,valuetype&gt; m3(m.<span class="keyword">begin</span>(),m.<span class="keyword">end</span>());</span><br><span class="line"><span class="regexp">//</span>创建了map的对象m3，存储迭代器内指定范围的<span class="title class_">Entry</span>（此处是整个m）</span><br><span class="line">std::map&lt;std::string, int&gt; mymap = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;alpha&quot;</span>, <span class="number">0</span>&#125;, &#123;<span class="string">&quot;beta&quot;</span>, <span class="number">0</span>&#125;, &#123;<span class="string">&quot;gamma&quot;</span>, <span class="number">0</span>&#125;&#125;;<span class="regexp">//</span>初始化</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><ul>
<li>下标<code>[]</code>和<code>at()</code>操作只能用于非<code>const</code>的map和<code>unordered_map</code></li>
<li><code>[]</code>访问不会做下标检查，对于不存在的key会设定value为默认值（一般为空&#x2F;False）</li>
<li><code>at()</code>访问会做下标检查，不存在key时报错<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">mymap[key] = value;</span><br><span class="line">mymap.at(key) = value;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="元素修改"><a href="#元素修改" class="headerlink" title="元素修改"></a>元素修改</h3><ol>
<li>下标<code>[]</code></li>
</ol>
<ul>
<li>用下标访问不存在的元素会自动添加，用下标访问存在的元素时会覆盖原元素</li>
</ul>
<ol start="2">
<li><code>insert()</code><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/插入单个值</span></span><br><span class="line"><span class="regexp">map.insert(pair&lt;keytype,valuetype&gt;(key,value));</span></span><br><span class="line"><span class="regexp">map.insert(make_pair(key,value));</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/指定位置插入，不同位置的效率不同，涉及到重排</span></span><br><span class="line"><span class="regexp">std::map&lt;char, int&gt;::iterator it = mymap.begin();</span></span><br><span class="line"><span class="regexp">mymap.insert(it,std::pair&lt;keytype,valuetype&gt;(&#x27;b&#x27;,300));</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/范围内多值插入</span></span><br><span class="line"><span class="regexp">std::map&lt;keytype,valuetype&gt;map2;</span></span><br><span class="line"><span class="regexp">map2.insert(mymap.begin(),mymap.end());</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/列表形式插入</span></span><br><span class="line"><span class="regexp">map2.insert()(&#123;&#123;&#x27;d&#x27;,100&#125;,&#123;&#x27;e&#x27;,200&#125;&#125;);</span></span><br></pre></td></tr></table></figure>
注意，insert插入位置已经存在值时，插入失败，value保持原值。</li>
<li><code>erase()</code><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">mymap.erase(<span class="number">0</span>);<span class="regexp">//</span>删除key为<span class="number">0</span>的元素</span><br><span class="line">mymap.erase(mymap.<span class="keyword">begin</span>());<span class="regexp">//</span>删除迭代器指向的位置元素</span><br></pre></td></tr></table></figure></li>
<li><code>count(k)</code><br>查找关键字k出现的次数</li>
<li><code>find(k)</code><br>查找元素，存在时返回指向该key的迭代器；不存在时返回迭代器的尾指针，即<code>mymap.end()</code>&#x2F;<code>-1</code>;</li>
</ol>
<h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><ul>
<li>所有元素都是<code>pair</code>（对组）</li>
<li><code>pair</code>中第一个元素为<code>key</code>，做索引；第二个元素为<code>value</code>;</li>
<li>不允许有重复元素，自动开链法储存</li>
<li>底层结构是哈希表</li>
</ul>
<h4 id="修改操作-1"><a href="#修改操作-1" class="headerlink" title="修改操作"></a>修改操作</h4><table>
<thead>
<tr>
<th>操作</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>mp[key].pishback()</code></td>
<td>把源字符串放在相同的<code>key</code>对应的<code>val</code></td>
</tr>
</tbody></table>
<h4 id="访问操作"><a href="#访问操作" class="headerlink" title="访问操作"></a>访问操作</h4><p>循环map，获取每个键值对的key和val</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">actor&lt;vector&lt;string&gt;&gt; ans; <span class="regexp">//</span>建立一个容器，用于储存结果</span><br><span class="line"><span class="keyword">for</span>(unordered_map&lt;string,vector&lt;string&gt;&gt;<span class="symbol">:</span><span class="symbol">:iterator</span> it=mp.<span class="keyword">begin</span>();it!=mp.<span class="keyword">end</span>();it++)</span><br><span class="line">/<span class="regexp">/unordered_map&lt;string,vector&lt;string&gt;&gt;::iterator 等价于auto</span></span><br><span class="line"><span class="regexp">ans.push_back(it-&gt;first);/</span><span class="regexp">/获取key</span></span><br><span class="line"><span class="regexp">ans.push_back(it-&gt;second);/</span><span class="regexp">/获取val</span></span><br></pre></td></tr></table></figure>



<h2 id="vector-向量类型"><a href="#vector-向量类型" class="headerlink" title="vector(向量类型)"></a>vector(向量类型)</h2><p><a href="https://blog.csdn.net/Flag_ing/article/details/123380655">一个很好的入门教程</a></p>
<ul>
<li>是一种容器，可以容纳许多类型的数据</li>
<li>动态数组，封装好的类</li>
<li>头文件<code>#include&lt;vector&gt;</code></li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>尖括号内可以是任何合法的数据类型</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li>定义<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">type<span class="keyword">def</span> <span class="title function_">struct</span> sentence&#123;</span><br><span class="line">	int l,x;</span><br><span class="line">	char s[<span class="number">10005</span>];</span><br><span class="line">&#125;sen; </span><br></pre></td></tr></table></figure></li>
<li>初始化<br><code>&#123;&#125;</code>来初始化，空括号可以将每个元素置为0；</li>
<li>不允许缩窄转换</li>
</ol>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>其中sen为类型名 x为比较量</p>
<h4 id="只是用于整数大小比较"><a href="#只是用于整数大小比较" class="headerlink" title="只是用于整数大小比较"></a>只是用于整数大小比较</h4><p>int compare(const void *e1, const void *e2)<br>{<br>    return ((sen *)e1)-&gt;x - ((sen *)e2)-&gt;x;<br>}<br>qsort(name, n, sizeof(type), compare);</p>
<h4 id="浮点型-字符串比较"><a href="#浮点型-字符串比较" class="headerlink" title="浮点型+字符串比较"></a>浮点型+字符串比较</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int compare(const void *e1, const void *e2)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>((((star *)e1)-&gt;d - ((star *)e2)-&gt;d)&gt;eps)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>((((star *)e1)-&gt;d - ((star *)e2)-&gt;d)&lt;-eps)</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> strcmp(((star *)e1)-&gt;s,((star *)e2)-&gt;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="共用体-Union"><a href="#共用体-Union" class="headerlink" title="共用体(Union)"></a>共用体(Union)</h2><p>与结构体的区别：共用体只能存储其中一个，在给其中一个变量赋值之后，其余变量的值自动丢失。</p>
<ul>
<li>数据使用多种格式，但不同时使用时，可以节省空间。比如说商品ID中有字符串有数字。</li>
<li>主要用途就是节省空间，嵌入式系统里用的多</li>
</ul>
<ol>
<li>变量建立<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">union one4all</span><br><span class="line">&#123;</span><br><span class="line">    int int_val;</span><br><span class="line">    long long_val;</span><br><span class="line">    double double_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>赋值语法与调用与结构体相同</li>
</ol>
<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>整型中不会发生数据溢出<br>对于十六进制 一个f相当于二进制中一个字节1111 如果要批量处理数据的话用十六进制会更简单 一样的东西 把操作的数字变成0x····</p>
<p>正负数判断 看最左侧的一位 0为正 1为负</p>
<p><code>n&amp;=(n-1)</code>消去最低位的1 用于统计一个二进制数中1的个数 </p>
<h3 id=""><a href="#" class="headerlink" title="&amp;"></a>&amp;</h3><ol>
<li>对整数x的特定位清0 ：取操作数a使其特定位为0 其余位为1 然后&amp;<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">a=((<span class="number">1</span>&lt;&lt;m)|<span class="params">(1&lt;&lt;n)....)</span></span><br><span class="line"><span class="params">x=x&amp;(~a)</span></span><br></pre></td></tr></table></figure></li>
<li>判断奇偶性 ： 看最后一位是1还是0<br><strong>在看某一位是1还是0的时候直接用操作&amp;计算 看等不等于0 让他进入循环就可以</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((a&amp;<span class="number">1</span>)==<span class="number">1</span>) 奇数</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="-1"><a href="#-1" class="headerlink" title="|"></a>|</h3><ol>
<li>将一个数的特定位设为1<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">a=a=((<span class="number">1</span>&lt;&lt;m)|<span class="params">(1&lt;&lt;n)....)</span></span><br><span class="line"><span class="params">x=x</span>|a</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="-2"><a href="#-2" class="headerlink" title="^"></a>^</h3><p>对一个数的特定位数进行取反</p>
<h3 id="-3"><a href="#-3" class="headerlink" title="~"></a>~</h3><p><del>3&#x3D;4<br>&#96;x&amp;</del>1<code>将一个数x的最低位置0 其他位不变 </code>~n+1&#96;对一个整数取相反数<br>·  这是一个对数字的操作 优先级最高</p>
<ol>
<li>输出二进制数表达<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">printf(<span class="string">&quot;0B&quot;</span>)<span class="comment">#或者0b</span></span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">    	    &#123;</span><br><span class="line">    	 	printf(<span class="string">&quot;%lld&quot;</span>,~(x%<span class="number">2</span>));</span><br><span class="line">    	 	x=x/<span class="number">2</span>;</span><br><span class="line">    	    &#125;</span><br><span class="line">    	    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>) printf(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    	    <span class="keyword">else</span> printf(<span class="string">&quot;0&quot;</span>);</span><br></pre></td></tr></table></figure>
八进制前要加0 十六进制前要加0X或0x</li>
<li>一个数的某些位设为0<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">x=x&amp;~(<span class="number">1</span>&lt;&lt;m)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="-4"><a href="#-4" class="headerlink" title="&lt; &gt;"></a>&lt; &gt;</h3><p> 将一个数的二进制左右移动 多者溢出<br> · 在不溢出的情况下 左移一位*2 右移一位&#x2F;2<br> <strong>左移是很有效的乘二运算</strong><br> · 对有符号数 左补符号位（算数位移：负数情况下补1）</p>
<ol>
<li>求平均值<code>(x+y)&gt;&gt;1</code></li>
<li>求2的n次方（很快而且不会超界）<code>1&lt;&lt;n</code></li>
</ol>
<h2 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h2><p>常用<code>(x&gt;&gt;i)&amp;1</code>获得一个数的补码各位 <strong>i从0开始由低到高获得</strong><br>注意操作对象是补码还是二进制数 如果是二进制数要手动转 不过如果是<code>unsigned int</code>就没事了 但是在相加运算时必须要<strong>使用同种类型</strong> 否则会超界<br>注意超界 如果要用longlong应当加后缀1ll</p>
<ol>
<li>特定位设置<br>将二进制的某一位置1<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">num|<span class="params">=1&lt;&lt;i;</span></span><br></pre></td></tr></table></figure>
置0<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">num&amp;=-(<span class="number">1</span>&lt;&lt;i);</span><br></pre></td></tr></table></figure>
构造一个前i位均为1的数<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int num=(<span class="number">1</span>&lt;&lt;i-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>把一个无符号整数a的七至十七位赋值为937 21至25位赋值为17</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">unsigned int a = <span class="number">0XC305BAD3</span></span><br><span class="line">a &amp; =~(((<span class="number">1</span>&lt;&lt;<span class="number">11</span>)-<span class="number">1</span>)&lt;&lt;<span class="number">7</span>)/<span class="regexp">/transform 7~17 to 0 and save others</span></span><br><span class="line"><span class="regexp">a|=937&lt;&lt;7/</span><span class="regexp">/赋值</span></span><br><span class="line"><span class="regexp">a&amp;=~(((1&lt;&lt;5)-1)&lt;&lt;21)</span></span><br><span class="line"><span class="regexp">a|17&lt;&lt;21</span></span><br><span class="line"><span class="regexp">printf(&quot;a = 0X%X&quot;,a)</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>交换一个数的高位与低位<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">   unsigned int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;(n&gt;&gt;<span class="number">16</span>)+(n&lt;&lt;<span class="number">16</span>);</span><br><span class="line"><span class="comment"># or cout&lt;&lt;((n&amp;0xffff0000)&gt;&gt;16)+((n&amp;0x0000ffff)&lt;&lt;16);</span></span><br></pre></td></tr></table></figure></li>
<li>利用按位运算的性质处理数据(一个也不能少)</li>
<li>得到一个数的补码(可补前导0版 以八位为例)<br><strong>计算机本身存储的就是补码 所以直接对二进制的存储进行检查就可以！ 所有对二进制的按位操作都是对补码操作！</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i=<span class="number">7</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">printf(<span class="string">&quot;%d&quot;</span>,(x&gt;&gt;i)&amp;<span class="number">1</span>);<span class="comment">#自左向右检查每一位是否为0</span></span><br></pre></td></tr></table></figure>
补码翻转得到新的数<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;=<span class="number">7</span>;i++)</span><br><span class="line">ans|<span class="params">=((x&gt;&gt;i)&amp;1)&lt;&lt;(7-i);</span></span><br><span class="line"><span class="params">printf(&quot;%hhd&quot;,ans);</span></span><br></pre></td></tr></table></figure></li>
<li><strong>反码计算机</strong><br>正负数分离<br>化归思想 把所有负的都转成正的<br>如果是正数，本身就是反码，如果是负数，直接对对应正数取反就能得到反码<br>重点是“得到一个数的反码”  对数本身操作<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int n,a,b;</span><br><span class="line">void print(int k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;=<span class="number">0</span>)</span><br><span class="line">		printf(<span class="string">&quot;%d\n&quot;</span>,k);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">			printf(<span class="string">&quot;-%d\n&quot;</span>,~k);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(scanf(<span class="string">&quot; -%d&quot;</span>,&amp;a))</span><br><span class="line">    	a=~a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	scanf(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">if</span>(scanf(<span class="string">&quot; -%d&quot;</span>,&amp;b))</span><br><span class="line">    	b=~b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	scanf(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">    print(a&amp;b);</span><br><span class="line">    print(a|<span class="params">b);</span></span><br><span class="line"><span class="params">    print(a^b);</span></span><br><span class="line"><span class="params">    <span class="keyword">return</span> 0;</span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="数的编码"><a href="#数的编码" class="headerlink" title="数的编码"></a>数的编码</h4><p>原码：最高位为符号位（0为正数 1为负数） 其余各位表示数本身的绝对值<br>反码：正数的反码与源码相同 若为负数 其绝对值的原码的各位取反<br>补码：正数的原码、反码和补码都相同 若为负数 对其反码加1（若有进位则进位舍弃）</p>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>指针运算时要加括号 保证先运算再解引用<br>指针计算注意不要越界！<br>指针相减：计算偏移量<br>指针相加无意义 指针二分<code>mid=low+(high-low)/2</code><br>前排指针小                                    </p>
<h1 id="错过的结构设计"><a href="#错过的结构设计" class="headerlink" title="错过的结构设计"></a>错过的结构设计</h1><ol>
<li></li>
<li>在立flag以及数据初始化的时候改变操作要放在判断操作以后<br>（eg.驼峰命名法转换  先确定flag是1否  后判定下划线 判断完后要恢复）</li>
<li><strong>异或运算规律：</strong>只看1的个数  奇数个1异或是1 偶数个1异或是0 0异或结果都是0</li>
</ol>
<h1 id="一些规则"><a href="#一些规则" class="headerlink" title="一些规则"></a>一些规则</h1><h2 id="循环不变量"><a href="#循环不变量" class="headerlink" title="循环不变量"></a>循环不变量</h2><h3 id="二分查找：区间定义"><a href="#二分查找：区间定义" class="headerlink" title="二分查找：区间定义"></a>二分查找：区间定义</h3><h1 id="递归、搜索与回溯算法"><a href="#递归、搜索与回溯算法" class="headerlink" title="递归、搜索与回溯算法"></a>递归、搜索与回溯算法</h1><h2 id="框架一"><a href="#框架一" class="headerlink" title="框架一"></a>框架一</h2> <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int search(int x)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=算符种数n；i++)</span><br><span class="line">   <span class="keyword">if</span>(satisfy)</span><br><span class="line">   &#123;</span><br><span class="line">      secure the result(<span class="keyword">include</span> <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span>(x==n-<span class="number">1</span>)</span><br><span class="line">       print the result</span><br><span class="line">      <span class="keyword">else</span> search(x+<span class="number">1</span>) /<span class="regexp">/继续进行这个元素后的排列</span></span><br><span class="line"><span class="regexp">      recover(satisfy to enter the if) </span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="框架二"><a href="#框架二" class="headerlink" title="框架二"></a>框架二</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(reach the goal print)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">if</span>(satisfy)</span><br><span class="line">  &#123;</span><br><span class="line">    secure the result </span><br><span class="line">    search(x+<span class="number">1</span>)</span><br><span class="line">    recover</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ol>
<li>全排列：实际上需要找出每一个排列后的全排列<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">char s[<span class="number">10</span>],ch[<span class="number">10</span>];</span><br><span class="line">int n;</span><br><span class="line">bool p[<span class="number">10</span>];</span><br><span class="line">void search(int x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	 <span class="keyword">if</span>(p[i]==<span class="number">0</span>)     /<span class="regexp">/该字符未参与排列</span></span><br><span class="line"><span class="regexp">	  &#123;</span></span><br><span class="line"><span class="regexp">	  	p[i]=1;      /</span><span class="regexp">/标记该位置的字符已经参与排列</span></span><br><span class="line"><span class="regexp">	  	ch[x]=s[i];        /</span><span class="regexp">/存储字符</span></span><br><span class="line"><span class="regexp">	  	if(x+1==n)     /</span><span class="regexp">/字符串是从0开始记 此时所有位置的字符已经排列完毕</span></span><br><span class="line"><span class="regexp">	  	 cout&lt;&lt;ch&lt;&lt;endl;</span></span><br><span class="line"><span class="regexp">	  	else</span></span><br><span class="line"><span class="regexp">	  	 search(x+1);    /</span><span class="regexp">/让下一个字符作为后一个排列的第一个进行全排列</span></span><br><span class="line"><span class="regexp">        p[i]=0;         /</span><span class="regexp">/只有本排列中参与的字符才会标记为已参与</span></span><br><span class="line"><span class="regexp">	  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">int main()</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">	cin&gt;&gt;s;</span></span><br><span class="line"><span class="regexp">	n=strlen(s);</span></span><br><span class="line"><span class="regexp">	search(0);</span></span><br><span class="line"><span class="regexp">	return 0;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>最大公因数gcd<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int gdc(int m,int n) /<span class="regexp">/前提：n＞m 条件-真-假</span></span><br><span class="line"><span class="regexp">&#123;return n%m==0?m:gdc(m,n%m)&#125; /</span><span class="regexp">/n与m和m与n%m公因数相同捏</span></span><br></pre></td></tr></table></figure></li>
<li>爬楼梯<br>法一 找出基础方法 每层递归一直计数到底层<br>  实际上仍带有p[x]判定<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int n,p[x];</span><br><span class="line">int t(int x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]) <span class="keyword">return</span> p[x]; <span class="regexp">//</span>如果本层走法数已算出 直接返回走法</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> p[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">2</span>) <span class="keyword">return</span> p[x]=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span> p[x]=t(x-<span class="number">1</span>)+t(x-<span class="number">2</span>); <span class="regexp">//</span>每一层走法数=少一层全走法数+少两层全走法数</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>,&amp;n)   /<span class="regexp">/在一直有输入的情况下持续循环 </span></span><br><span class="line"><span class="regexp">	   cout&lt;&lt;t(n)&lt;&lt;endl;</span></span><br><span class="line"><span class="regexp">    return 0;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
法二  实际上是直接累加<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">void t(int x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) ans++;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">2</span>) ans+=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> t(x-<span class="number">1</span>),t(x-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>汉诺塔问题<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int n,f[<span class="number">25</span>],ans,x;</span><br><span class="line">char a,b,c;</span><br><span class="line">char t(int n,char a,char b,char c)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">	 t(n-<span class="number">1</span>,a,c,b);</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">	 t(n-<span class="number">1</span>,c,b,a);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    t(n,a,b,c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>c数简单递归  但是记忆<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">long long ans,x[<span class="number">20</span>];</span><br><span class="line">long long c(int n)</span><br><span class="line">&#123;</span><br><span class="line">	long long sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span> |<span class="params"></span>| n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x[n]) <span class="keyword">return</span> x[n];</span><br><span class="line">	<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		sum+=1ll*c(i)*c(n-i-<span class="number">1</span>);	</span><br><span class="line">	x[n]=sum;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="肖老师说"><a href="#肖老师说" class="headerlink" title="肖老师说"></a>肖老师说</h1><p>局部视角在于数数 整体视角在于坐标<br>注意分解问题<br>数学问题建议下标与平时习惯一致</p>
<blockquote>
<p>常量重在表达 变量重在类型<br>整型重在范围 浮型重在精度<br>函数重在接口 递归重在调用<br>内存重在管理 区分数组指针</p>
</blockquote>
<p>int sprintf(char<em>buf,char</em>format[,argument]…);<br>  例：<br>  int m;<br>  double x;<br>  char buf[32];<br>  scanf(“%lf%d”,&amp;x,&amp;m);<br>  sprintf(buf,”%%.%df\n”,m);<br>  printf(buf,sin(x));<br>  printf是按格式把输出送到屏幕上<br>  sprintf是按格式把输出送到buf对应的字符数组中<br>  sprintf常用于需要动态生成字符串的场合</p>
<p>  int sscanf(const char *buf, char *format [, arg]…);<br>  例：<br>  int day, year, h, m, s;<br>  char mon[4], zone[6];<br>  char buf[] &#x3D; “12&#x2F;Nov&#x2F;2020:12:15:00 +0800”;<br>  sscanf(buf, “%d&#x2F;%3c&#x2F;%d:%d:%d:%d %s”, &amp;day, mon, &amp;year, &amp;h, &amp;m, &amp;s, zone);<br>  mon[3] &#x3D; ‘\0’; &#x2F;&#x2F; 什么作用？<br>  printf(“%d\n%s\n%d\n%d\n%d\n%d\n%s”, year, mon, day, h, m, s, zone);<br>  scanf 是按要求的格式从键盘输入数据到对应的地址（变量地址或数组）<br>  sscanf 是按要求的格式从 buf 读入数据（也是在&lt;stdio.h&gt;里定义）<br>  返回值也是成功读入的字段数，一般弃之不用</p>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>codings</tag>
      </tags>
  </entry>
  <entry>
    <title>DeepLearning</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/AndrewNg-DeepLearning/</url>
    <content><![CDATA[<h1 id="AndrewNg"><a href="#AndrewNg" class="headerlink" title="AndrewNg"></a>AndrewNg</h1><p>看着吴恩达老师的网课稍微用自己的理解来记一记东西~非常业余只供看乐子</p>
<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><ul>
<li>Structured Data : Refers to the data that each of the features has a very well defined meaning.</li>
<li>Unstructured Data : audio,raw audio or images where you may want to recognize what’s in the image or text. And the features might be the pixel values(像素值) in an image.What should be paid attention to is that humans are really good at interpret unstructing data,as a word or a text can be regarded as a form of unstructured data.</li>
<li>piont: deal with a huge amount of data.Especially “labled data”</li>
<li>algorithm innovation(data computation): transform sigmoid to RELU function(help computation),more convient for bigger nn trains and trying your new idea,improving your efficiency.</li>
<li>Label : things you’re going to predict.</li>
<li>Feature : </li>
<li>Example : labened&#x2F;unlabeled(features only) ;</li>
<li>model : </li>
<li>training :</li>
<li>inference :</li>
<li>overfitting ；</li>
<li>convergence :</li>
<li>parameter :</li>
<li>hyperparameter :</li>
<li>模型训练的一次迭代（一次梯度更新）</li>
</ul>
<h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><ul>
<li>The dimension of feature vector:the number of elements.n&#x3D;num*row*col(of the matrixes);m refers to the number of examples we have in total;</li>
<li>create a matrix (nx,m);python:X.shape;Y.shape(1,m)</li>
<li>We assume that the parameters(参数) of logistic regression will be w an nx-dimensional vector.</li>
<li>you can use the following function to get a estimated value:<br>$$<br>\widehat{y}&#x3D;\sigma(wx+b)<br>$$</li>
<li><strong>Loss Function:</strong> Logistic Rsgression lost function,we can find the local optima(best solution).You can assume y equals to a certain value like 1 or 0,then see what value we hope the $\widehat{y}$ be.<br>$$<br>L(\widehat{y},y)&#x3D;-(ylog\widehat{y}+(1-y)log(1-\widehat{y}))<br>$$</li>
<li><strong>Cost Function:</strong> It is the additive sum of every loss of the predictive value,and it measures how well the parameters w and b are doing. We should find apprioate w and b to make the J(w,b) as small as possible.<br>$$<br>J(w,b) &#x3D; \frac{1}{m}\sum L(\widehat{y}^{(i)},y^{(i)})<br>$$<br>Interpret:<br>First, we want to minimum the cost function J(w,b).<br>Second, we’re supposed to maximum the minus L, for we always want the max through the maximum likehood estimition.<br>Then we assume that our model were IID(identically independently distributed).<br>$$y &#x3D; 1 : p(y|x) &#x3D; \widehat{y}$$<br>$$y &#x3D; 0 : p(y|x) &#x3D; 1 - \widehat{y}$$<br>We mix the two function together:<br>$$p(y|x) &#x3D;  \widehat{y}^y + (1-\widehat{y})^{(1-y)}$$<br>log the both side we get the -L.</li>
</ul>
<h3 id="Use-the-gradient-descent-algorithm"><a href="#Use-the-gradient-descent-algorithm" class="headerlink" title="Use the gradient descent algorithm"></a>Use the gradient descent algorithm</h3><ul>
<li>to train the w and b,get the best result;</li>
<li>progress:as you should know that J(w,b) is a convex(凹函数),so we’re supposed to find the minus,at least the local minus. so we repeat:<br>$$<br>w&#x3D;w-\alpha \frac{\delta J(w,b)}{\delta w}<br>$$</li>
</ul>
<h3 id="Implement-gradient-for-logistic-regression"><a href="#Implement-gradient-for-logistic-regression" class="headerlink" title="Implement gradient for logistic regression"></a>Implement gradient for logistic regression</h3><ul>
<li>three core formulas:<br>$$z &#x3D; w^Tx+b$$<br>$$\widehat{y} &#x3D; a &#x3D; \sigma(z)$$<br>$$L(a,y) &#x3D; -(ylog(a)+(1-y)log(1-a))$$</li>
<li>the number of fearures equals to the unmber of w(i),and only a sigle b.We compute the loss based on a sigle example.</li>
<li>Caculate:<br>$$<br>dz &#x3D; a - y , db &#x3D; dz<br>$$<br>then you cancompute $w_1,w_2$….the same way as the former<br>$$dw_1 &#x3D; x_1dz,w_1 &#x3D; w_1 - \alpha dw<br>$$</li>
</ul>
<h4 id="for-the-m-examples-make-a-for-loop"><a href="#for-the-m-examples-make-a-for-loop" class="headerlink" title="for the m examples,make a for loop"></a>for the m examples,make a for loop</h4><ul>
<li>you add every value up,include $J,w_i,z_i,dz_i$,then you get the additive sum of $j,dw_i,b$,then &#x2F;m.<br>$$w_i &#x3D; w_i - \alpha dw_i<br>$$<br>$$b &#x3D; b - \alpha db$$</li>
</ul>
<h3 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h3><ul>
<li>use special command so that you can accelarate your efficiency.for loop is too slow. </li>
<li>feature: transform the for loop compute to the special matrix algorithm,so we can call out numpy to perform better.Second you can achieve work out all the results at a sigle time through transform the vector to the matrix.</li>
</ul>
<h3 id="broadcasting-in-Python"><a href="#broadcasting-in-Python" class="headerlink" title="broadcasting in Python"></a>broadcasting in Python</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">cal = A.sum(axis = <span class="number">0</span>) <span class="comment"># to sum vertically, 1 means sum horizontally</span></span><br><span class="line">percentage = <span class="number">100</span>*A/(cal.reshape(<span class="number">1</span>,<span class="number">4</span>)) <span class="comment"># make sure that the shape is you want</span></span><br></pre></td></tr></table></figure>
<p>In fact, Python can automatically transforms the matrix too suit the compute, by copying vertically or horizontally.<br>You can read NumPy documention.</p>
<h4 id="Do-not-use-rank-1-arries"><a href="#Do-not-use-rank-1-arries" class="headerlink" title="Do not use rank 1 arries"></a>Do not use rank 1 arries</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">a = np.random.dandn(<span class="number">5</span>) <span class="comment"># to create a special arry ranking 1</span></span><br><span class="line">a.shape = (<span class="number">5</span>,) <span class="comment"># rank = 1, behavior differently from vector</span></span><br></pre></td></tr></table></figure>
<h4 id="instead-do-this"><a href="#instead-do-this" class="headerlink" title="instead  do this"></a>instead  do this</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">a = np.random,randn(<span class="number">5</span>,<span class="number">1</span>) <span class="comment"># column vector</span></span><br><span class="line">a = np.random.randn(<span class="number">1</span>,<span class="number">5</span>) <span class="comment"># row vector</span></span><br><span class="line">assert(a.shape == (<span class="number">5</span>,<span class="number">1</span>)) <span class="comment"># to confirm the shape</span></span><br><span class="line">a = a.reshape((<span class="number">1</span>,<span class="number">5</span>)) <span class="comment"># to ensure its behavior</span></span><br></pre></td></tr></table></figure>

<h2 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h2><h3 id="Overview-Representation"><a href="#Overview-Representation" class="headerlink" title="Overview&amp;Representation"></a>Overview&amp;Representation</h3><ul>
<li>input layer -&gt; hinden layer -&gt; output layer</li>
<li>we call the input layer the zero layer, according to that role to define the number of layer.</li>
<li></li>
<li></li>
<li></li>
</ul>
<h1 id="西瓜书"><a href="#西瓜书" class="headerlink" title="西瓜书"></a>西瓜书</h1><h2 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h2><p>错误率精度略，这里主要说明查准率与查全率<br>查准率：<br>$$<br> P &#x3D; \frac{TP}{TP+FP}<br>$$<br>查全率：<br>$$<br>R &#x3D; \frac{TP}{TP+FN}<br>$$<br>直观反映：PR图</p>
<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><h2 id="前馈型（FNN）"><a href="#前馈型（FNN）" class="headerlink" title="前馈型（FNN）"></a>前馈型（FNN）</h2><ul>
<li>最简单</li>
<li>各神经元之间没有反馈连接，信息只能向前流动</li>
<li>没有记忆效应，适用于多监督学习任务</li>
</ul>
<h3 id="典型：卷积神经网络（CNN）"><a href="#典型：卷积神经网络（CNN）" class="headerlink" title="典型：卷积神经网络（CNN）"></a>典型：卷积神经网络（CNN）</h3><h2 id="后馈型（递归型）"><a href="#后馈型（递归型）" class="headerlink" title="后馈型（递归型）"></a>后馈型（递归型）</h2><ul>
<li>具备反馈&#x2F;循环连接</li>
<li>输出可以在后续的时间步骤被送回给网络的输入端</li>
<li>适于处理需要记忆和上下文信息的任务，处理时序数据</li>
</ul>
<h3 id="典型：循环神经网络（RNN）"><a href="#典型：循环神经网络（RNN）" class="headerlink" title="典型：循环神经网络（RNN）"></a>典型：循环神经网络（RNN）</h3><h4 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h4><p>一种改进后的RNN</p>
<h1 id="非线性分类器"><a href="#非线性分类器" class="headerlink" title="非线性分类器"></a>非线性分类器</h1><p>升高维度</p>
<h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><h2 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h2><h2 id="SVM（非线性核）"><a href="#SVM（非线性核）" class="headerlink" title="SVM（非线性核）"></a>SVM（非线性核）</h2><h2 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>DjangoBaisc</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/DjangoBaisc/</url>
    <content><![CDATA[<p>丢一个<a href="https://www.djangoproject.com/download/">官网教程</a></p>
<h1 id="Get-Started！"><a href="#Get-Started！" class="headerlink" title="Get Started！"></a>Get Started！</h1><h2 id="安装-初始化"><a href="#安装-初始化" class="headerlink" title="安装&amp;初始化"></a>安装&amp;初始化</h2><ol>
<li>超级无敌推荐git下载，不需要任何环境变量一次成功。在你准备好的虚拟环境下：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/django</span><span class="regexp">/django.git</span></span><br></pre></td></tr></table></figure></li>
<li>虚拟环境中建立一个django的新项目<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">django-admin startproject [你的项目名]</span><br></pre></td></tr></table></figure>
这时候新项目的目录如下:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><code>setting.py</code>指定Django如何与你的系统交互以及你如何管理项目</li>
<li><code>urls.py</code>告诉Django应创建哪些网页来响应浏览器请求</li>
<li><code>wsgi.py</code>帮助Django提供他创建的文件(web sever gateway interface)</li>
<li><code>db.sqlite3</code>是你的数据库，用于储存Django大部分与项目有关的信息</li>
</ul>
<ol start="3">
<li>创建应用程序<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py startapp [程序名]</span><br></pre></td></tr></table></figure></li>
<li>查看你的项目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
注意<code>Quit the server with CTRL-BREAK.</code>就是说停止运行就是Ctrl+C</li>
</ol>
<h2 id="编写你的应用程序"><a href="#编写你的应用程序" class="headerlink" title="编写你的应用程序"></a>编写你的应用程序</h2><p>我的项目名是myFirstDjango，程序名是blogs，示例代码见我的Github：myWeb</p>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><p>打开<code>blogs</code>下的<code>models.py</code>，我们就在这里创建模型；模型告诉Django如何处理应用程序中存储的数据。在代码层面，模型就是一个类，就像前边讨论的每个类一样，包含属性和方法。</p>
<h3 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h3><p>要使用模型，必须让Django将应用程序包含到项目中。使用<code>settings.py</code>来知道Django哪些应用安装在项目中，需要将你的应用程序添加到<code>INSTALLED_APPS</code>这个元组中，在项目根目录下终端中执行第一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations [应用名]</span><br><span class="line">Migrations for &#x27;blogs&#x27;:</span><br><span class="line">  blogs\migrations\0001_initial.py</span><br><span class="line">    - Create model Topic</span><br></pre></td></tr></table></figure>
<p>命令<code>makemigrations</code>让Django确定如何修改数据库，使其能够存储与我们定义的新模型相关联的数据，输出可以看出建立了一个新文件，用来在数据库中为模型Topic建立一个表，以下用于Django修改数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>每当需要修改“学习笔记”管理的数据时，都采取如下三步：</p>
<ul>
<li>修改models.py</li>
<li>调用makemigrations</li>
<li>迁移项目</li>
</ul>
<h3 id="Django管理网站"><a href="#Django管理网站" class="headerlink" title="Django管理网站"></a>Django管理网站</h3><ol>
<li>在项目根目录执行：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>
好像现在密码不能为空了，创建这个之后可以通过管理网站处理模型。Django通过将密码转换为散列值来保存，这样提高了安全性，因为他不存储密码，而且散列值几乎不可能反推密码。</li>
<li><code>admin.py</code>的配置<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">from 项目名.models import <span class="title class_">Topic</span> <span class="comment">#这里报错没关系</span></span><br><span class="line">admin.site.register(<span class="title class_">Topic</span>)</span><br></pre></td></tr></table></figure></li>
<li>以管理员访问<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
然后在浏览器的url中直接加一个<code>/admin/</code>就可以啦</li>
<li>添加主题<br>Topic中Add，可以随意添加你希望的学习主题</li>
</ol>
<h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><h1 id="定义模型基本功能的类：Django"><a href="#定义模型基本功能的类：Django" class="headerlink" title="定义模型基本功能的类：Django"></a>定义模型基本功能的类：Django</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next的写文小技巧</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/Hexo-Next%E7%9A%84%E5%86%99%E6%96%87%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>有一些tag插件在8以下版本是不能用的，还有一些用markdown完全可以轻松代替，这里不作过多赘述，只是列出来一些笨人觉得有用并且很方便的~<br>以及，本文中的<code>[]</code>只是分割名字，实际用的时候不需要敲出来。</p>
<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a><a href="https://theme-next.js.org/docs/tag-plugins/note">Note</a></h1><h2 id="Next配置"><a href="#Next配置" class="headerlink" title="Next配置"></a>Next配置</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="symbol">style:</span> simple</span><br><span class="line">  <span class="symbol">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="symbol">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;% note [<span class="keyword">class</span>] [no-icon] [summary] %&#125;</span><br><span class="line"><span class="title class_">Any</span> content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>所有的参数都是自选的</p>
<ul>
<li><code>class</code>:Supported values:default（灰色向右箭头） | primary（紫色加号）  | success（绿色对号） | info（蓝色i） | warning（黄色感叹号） | danger（红色减号）.</li>
<li>[no-icon] : Disable icon in note.</li>
<li>[summary] : Optional summary of the note.前边会自带一个小三角<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line"><span class="comment">#### Primary Header</span></span><br><span class="line">**<span class="title class_">Welcome</span>** to [<span class="title class_">Hexo</span>!](<span class="symbol">https:</span>/<span class="regexp">/hexo.io)</span></span><br><span class="line"><span class="regexp">&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a><a href="https://theme-next.js.org/docs/tag-plugins/tabs">Tabs</a></h1><h2 id="Next配置-1"><a href="#Next配置-1" class="headerlink" title="Next配置"></a>Next配置</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">tabs:</span></span><br><span class="line">  <span class="comment"># Make the nav bar of tabs with long content stick to the top.</span></span><br><span class="line">  <span class="symbol">sticky:</span> <span class="literal">false</span></span><br><span class="line">  <span class="symbol">transition:</span></span><br><span class="line">    <span class="symbol">tabs:</span> <span class="literal">false</span></span><br><span class="line">    <span class="symbol">labels:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;% tabs <span class="title class_">Unique</span> name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [<span class="title class_">Tab</span> caption] [<span class="variable">@icon</span>] --&gt;</span><br><span class="line"><span class="title class_">Any</span> content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Unique name</code> : Unique name of tabs block tag without comma.<br>Will be used in #id’s as prefix for each tab with their index numbers.<br>If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.<br>Only for current url of post&#x2F;page must be unique!<br>就是说这个参数是给你的表设一个名字，在本篇文章中仅此一个。如果要单独给某个表格设置名字在Tab caption处设置就可以。</li>
<li><code>[index]</code> : Index number of active tab.<br>If not specified, first tab (1) will be selected.<br>If index is -1, no tab will be selected. It’s will be something like spoiler.<br>选择初始时显示的表，默认是1，-1是全收缩<br>Optional parameter.</li>
<li><code>[Tab caption]</code> : Caption of current tab.<br>If not caption specified, unique name with tab index suffix will be used as caption of tab.<br>If not caption specified, but specified icon, caption will empty.<br>给表头单独添加索引，默认是从1编号；-1是不制表；如果是空的，就是name+id<br>Optional parameter.</li>
<li>[@icon] : Font Awesome icon name.<br>Can be specified with or without space; e.g. ‘Tab caption @icon’ is the same as ‘Tab caption@icon’.<br>@+font的名字，和name之间有没有空格都可以<br>Optional parameter</li>
</ul>
<h1 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a><a href="https://theme-next.js.org/docs/tag-plugins/mermaid">Mermaid</a></h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="hexo设置"><a href="#hexo设置" class="headerlink" title="hexo设置"></a>hexo设置</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">highlight:</span></span><br><span class="line">  <span class="symbol">exclude_languages:</span></span><br><span class="line">    - mermaid</span><br></pre></td></tr></table></figure>
<h3 id="Next设置"><a href="#Next设置" class="headerlink" title="Next设置"></a>Next设置</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="symbol">mermaid:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="symbol">theme:</span></span><br><span class="line">    <span class="symbol">light:</span> default</span><br><span class="line">    <span class="symbol">dark:</span> dark</span><br></pre></td></tr></table></figure>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><pre><code class="highlight mermaid">graph TD
A[Hard] --&gt;|Text| B(Round)
B --&gt; C&#123;Decision&#125;
C --&gt;|One| D[Result 1]
C --&gt;|Two| E[Result 2]</code></pre>



<h1 id="让你的Hexo-Next支持数学公式"><a href="#让你的Hexo-Next支持数学公式" class="headerlink" title="让你的Hexo-Next支持数学公式"></a>让你的Hexo-Next支持数学公式</h1><p>注意在把next.config文件中的<code>mathjax</code>改为<code>true</code>之后还要在文章标题添加<code>mathjax: true</code>，这样仅在需要的界面渲染公式，可以提高加载速度</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>UI</tag>
        <tag>hexo</tag>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>L2-编程环境</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/L2-%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>重点：</p>
<ul>
<li>多文件编译与链接过程</li>
<li>宏定义&amp;<code>MAKE</code>文件</li>
<li>程序命令行参数</li>
<li>GDB调试工具</li>
</ul>
<h2 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h2><p>对于头文件，尽量只申明函数而不实现函数。尽量只声明全局变量而不定义全局变量</p>
<ul>
<li><p>声明：告诉编译器关于变量名称、变量类型、变量大小，函数名称、结构名称大小等信息，在此阶段<strong>不会给变量分配任何的库存</strong>。</p>
<ul>
<li>声明变量：<code>extern int x;</code>;也可以用于函数声明</li>
<li>通常用在全局变量在不同文件内的共享</li>
<li>头文件中只是进行函数声明，并没有实现（定义）函数体，避免在链接时发现多个相同的函数实现（重复定义）而发生错误</li>
</ul>
</li>
<li><p>定义：变量声明+内存分配</p>
<ul>
<li>我们常见的<code>int x=1</code>或者<code>int x</code>都是变量定义，后者只是缺少初始化</li>
</ul>
</li>
</ul>
<h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><ul>
<li><code>#define</code>:一种<strong>预编译指令</strong>，用于给一个字符串定义一个“标识符”，这个标识符叫做<strong>宏名</strong>，被定义的字符串叫做<strong>替换文本</strong>；<ul>
<li>预编译：<strong>宏替换</strong>：将宏名用被定义的字符串替换后再进行编译</li>
<li>作用域：宏定义的有效范围称为宏名的作用域，宏名的作用域从宏定义的结束处开始到其所在的源代码文件末尾，不受分程序结构的影响。<ul>
<li>可以用预处理指令<code>#undef</code>加上宏名终止宏名的作用域。</li>
</ul>
</li>
</ul>
</li>
<li>宏定义的简单使用：&lt;宏名&gt;(&lt;参数表&gt;) &lt;字符串&gt;  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define PI 3.14</span></span><br><span class="line"><span class="comment">#define sqrt(x) ((x)*(x))</span></span><br></pre></td></tr></table></figure>
<ul>
<li>常量常用const定义</li>
<li>注意line2在去掉字符串中x的括号时会引起运算错误：如果用<code>sqrt(u+v)</code>会输出<code>u+v*u+v</code>，由此体现宏替换只是简单的替换，并不会作出任何改变；如果有语法错误也只能在编译阶段发现</li>
</ul>
</li>
<li>宏使用时的其他指令<ul>
<li>避免头文件重复包含<ul>
<li><code>#pragma</code>指令：可以设置面一起状态或者指示编译器进行特定活动：<ul>
<li>#pragma once:保证头文件只被编译一次。</li>
<li>#pragma message(“info”)，在编译信息输出窗口中输出相应的信息，例如<code>#pragma message(&quot;Hello&quot;)</code>。</li>
<li>#pragma warning，设置编译器处理编译警告信息的方式，例如<code>#pragma warning(disable:4507 34;once : 4385;error:164)</code>等价于<code>#pragma warning(disable:4507 34)</code>（不显示4507和34号警告信息）、<code>#pragma warning(once:4385)</code>（4385号警告信息仅报告一次）、<code>#pragma warning(error:164)</code>（把164号警告信息作为一个错误）。</li>
</ul>
</li>
</ul>
</li>
</ul>
  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ifndef name //=if !def</span></span><br><span class="line"><span class="comment">#define newName</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line">/<span class="regexp">/程序段</span></span><br><span class="line"><span class="regexp">#endif</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ or</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#pragma once /</span><span class="regexp">/保证物理上的同一个文件不会被编译多次</span></span><br></pre></td></tr></table></figure>
<ul>
<li>用于debug输出，控制程序是否输出调试信息  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/ #define DEBUG</span></span><br><span class="line"><span class="regexp">#ifdef DEBUG</span></span><br><span class="line"><span class="regexp">    count&lt;&lt;&quot;val:&lt;&lt;val&lt;&lt;endl;</span></span><br><span class="line"><span class="regexp">#endif</span></span><br></pre></td></tr></table></figure></li>
<li><code>#error</code>：指令使预处理器发出一条错误消息，然后停止执行预处理。  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#error info</span></span><br><span class="line"><span class="comment">#error MFC requires C++ compilation</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="编译与连接"><a href="#编译与连接" class="headerlink" title="编译与连接"></a>编译与连接</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>预处理:根据预处理指令对代码源文件处理，比如宏替换</li>
<li>编译：检查语法<ul>
<li>第一遍执行语法分析与静态类型检查，把源代码解析为语法分析树的结构</li>
<li>第二遍由代码生成器遍历语法分析树，把树的每个节点转换为汇编语言或机器代码，生成目标模块<code>.o</code>或<code>.obj</code>文件</li>
</ul>
</li>
<li>汇编：汇编代码转换机器码，可以利用反汇编调试代码</li>
<li>链接：将各目标文件中的各段代码进行地址定位，从而把一组目标模块链接为可执行程序，使操作系统可以执行它；处理目标模块中的函数或变量引用，必要时搜索库文件处理所有的引用。<ul>
<li>如果有外部函数声明但是没有函数实现，无法通过链接，但是可以通过编译</li>
</ul>
</li>
</ul>
<h3 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h3><p><code>g++ -c</code>：只编译不链接<br><code>g++ -o ex1.out ex1.o</code>：链接程序<br><code>g++ ex5_main.cpp func.cpp -o</code>：直接编译 </p>
<h2 id="MAKE工具"><a href="#MAKE工具" class="headerlink" title="MAKE工具"></a><code>MAKE</code>工具</h2><p>通过写入<code>MakeFile</code>文件可以实现</p>
<h2 id="程序命令行工具"><a href="#程序命令行工具" class="headerlink" title="程序命令行工具"></a>程序命令行工具</h2><h2 id="GDB调试工具"><a href="#GDB调试工具" class="headerlink" title="GDB调试工具"></a>GDB调试工具</h2>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Next美化教程</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/Hexo%E7%9A%84Next%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://theme-next.js.org/">在这里放个官方教程的链接先</a><br>文中目录分为两类：<code>site root directory</code>指根目录，也就是点进你的hexo文件夹的第一个目录；<code>Next directory</code>指主题目录，也就是点进Next文件夹后的第一个目录。</p>
<h1 id="自定义特征"><a href="#自定义特征" class="headerlink" title="自定义特征"></a>自定义特征</h1><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><ol>
<li>favicon:将图标存储于<code>hexo/source/images</code>下,小图标为16*16，中等为32*32</li>
</ol>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="cc协定设置-creative-commons"><a href="#cc协定设置-creative-commons" class="headerlink" title="cc协定设置(creative commons)"></a>cc协定设置(creative commons)</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">creative_commons:</span></span><br><span class="line">  <span class="symbol">license:</span> by-nc-sa</span><br><span class="line">  <span class="symbol">size:</span> small</span><br><span class="line">  <span class="symbol">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">language:</span> deed.zh</span><br></pre></td></tr></table></figure>
<h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p>在根目录下执行</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo new page [custom-page-name]</span><br></pre></td></tr></table></figure>
<h4 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h4><p>通过设置根目录下的<code>_config.yml</code>管理页面,注意如果path在上文已使用要删去或改成<code>/</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">index_generator:</span></span><br><span class="line">  <span class="symbol">path:</span> archives</span><br><span class="line">  <span class="symbol">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="symbol">order_by:</span> -date</span><br></pre></td></tr></table></figure>

<h3 id="分类与标签"><a href="#分类与标签" class="headerlink" title="分类与标签"></a>分类与标签</h3><p>tag和categories是相同的操作，改个名就可以，以下以tag为例</p>
<h4 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h4><ol>
<li>根目录下执行<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li>
<li>编辑新页面index如下：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">title:</span> <span class="title class_">Tags</span></span><br><span class="line"><span class="symbol">date:</span> <span class="number">2014</span>-<span class="number">12</span>-<span class="number">22</span> <span class="number">12</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">04</span></span><br><span class="line"><span class="symbol">type:</span> tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li>向next设置界面的<code>menu</code>中加入<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">tags:</span> /tags/ |<span class="params"></span>| fa fa-tags</span><br></pre></td></tr></table></figure></li>
<li>默认的hexo配置文件会与上方教程冲突，需要在根目录设置文件中将这个设置关闭<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">tag_generator:</span></span><br><span class="line">  <span class="symbol">enable_index_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="标签页美化"><a href="#标签页美化" class="headerlink" title="标签页美化"></a>标签页美化</h4><ol>
<li>修改next设置文件<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">tagcloud:</span></span><br><span class="line">  <span class="symbol">min:</span> <span class="number">12</span> <span class="comment"># Minimun font size in px</span></span><br><span class="line">  <span class="symbol">max:</span> <span class="number">20</span> <span class="comment"># Maxium font size in px</span></span><br><span class="line">  <span class="comment"># 我喜欢小一点字所以设定的字偏小</span></span><br><span class="line">  <span class="symbol">start:</span>  <span class="string">&quot;#476D80&quot;</span><span class="comment"># Start color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="symbol">end:</span>  <span class="string">&quot;#98A9A3&quot;</span><span class="comment"># End color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="comment">#实际上是字体从小到大会有一个渐变，从start color变到end color，建议start颜色浅于end，会更好看一些，色系与主题周边色系相类似</span></span><br><span class="line">  <span class="symbol">amount:</span> <span class="number">200</span> <span class="comment"># Amount of tags, change it if you have more than 200 tags</span></span><br><span class="line">  <span class="symbol">orderby:</span> name <span class="comment"># Order of tags</span></span><br><span class="line">  <span class="symbol">order:</span> <span class="number">1</span> <span class="comment"># Sort order</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="定义文章标签"><a href="#定义文章标签" class="headerlink" title="定义文章标签"></a>定义文章标签</h4><p>在你文章标题下添加代码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">tags:</span> [<span class="title class_">Tag1</span>,<span class="title class_">Tag2</span>]</span><br></pre></td></tr></table></figure>

<h3 id="添加谷歌日历-Google-Calendar-页"><a href="#添加谷歌日历-Google-Calendar-页" class="headerlink" title="添加谷歌日历(Google Calendar)页"></a>添加谷歌日历(Google Calendar)页</h3><h3 id="动态设置菜单栏"><a href="#动态设置菜单栏" class="headerlink" title="动态设置菜单栏"></a>动态设置菜单栏</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line">  <span class="comment"># 静态区</span></span><br><span class="line">  <span class="symbol">home:</span> / |<span class="params"></span>| fa fa-home</span><br><span class="line">  <span class="symbol">archives:</span> /archives/ |<span class="params"></span>| fa fa-archive</span><br><span class="line">  <span class="comment"># 动态区</span></span><br><span class="line">  <span class="title class_">Docs</span>: <span class="comment">#动态栏名称</span></span><br><span class="line">    <span class="symbol">default:</span> /docs/ |<span class="params"></span>| fa fa-book <span class="comment"># 文件地址+图标，每个子菜单都需要一个默认界面</span></span><br><span class="line">    <span class="comment"># 以下为两个子界面，排列在上方</span></span><br><span class="line">    <span class="title class_">Getting</span> <span class="title class_">Started</span>: <span class="comment">#子界面名称，都是地址+标题</span></span><br><span class="line">      <span class="symbol">default:</span> /getting-started/ |<span class="params"></span>| fa fa-flag</span><br><span class="line">      <span class="title class_">Installation</span>: <span class="regexp">/installation.html || fa fa-download</span></span><br><span class="line"><span class="regexp">      Configuration: /configuration</span>.html |<span class="params"></span>| fa fa-wrench</span><br><span class="line">    <span class="title class_">Third</span> <span class="title class_">Party</span> <span class="title class_">Plugins</span>:</span><br><span class="line">      <span class="symbol">default:</span> /third-party-services/ |<span class="params"></span>| fa fa-puzzle-piece</span><br><span class="line">      <span class="title class_">Math</span> <span class="title class_">Equations</span>: <span class="regexp">/math-equations.html || fa fa-square-root-alt</span></span><br><span class="line"><span class="regexp">      Comment Systems: /comments</span>.html |<span class="params"></span>| fa fa-comment-alt</span><br></pre></td></tr></table></figure>

<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="Fancybox"><a href="#Fancybox" class="headerlink" title="Fancybox"></a>Fancybox</h2><p>展示音频，可以高度自定义的插件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="Busuanzi-Counting-China"><a href="#Busuanzi-Counting-China" class="headerlink" title="Busuanzi Counting(China)"></a>Busuanzi Counting(China)</h2><p>将NexT设置文件中的相关按钮全打开，会在标题下显示本文总浏览量，页末显示网站的访问人数和浏览量</p>
<h1 id="源代码美化"><a href="#源代码美化" class="headerlink" title="源代码美化"></a>源代码美化</h1><h2 id="修改颜色"><a href="#修改颜色" class="headerlink" title="修改颜色"></a>修改颜色</h2><h3 id="sidebar修改侧边栏字体颜色"><a href="#sidebar修改侧边栏字体颜色" class="headerlink" title="sidebar修改侧边栏字体颜色"></a>sidebar修改侧边栏字体颜色</h3><p><code>next/source/css/_variables/主题名.styl</code>下搜索sidebar<br>第一个是未选择项的颜色，第二个是鼠标高亮，第三个是选择高亮，我的设置如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sidebar</span>-nav-color                = <span class="comment">#A9BACB;</span></span><br><span class="line"><span class="variable">$sidebar</span>-nav-hover-color          = <span class="comment">#1e50a2;</span></span><br><span class="line"><span class="variable">$sidebar</span>-highlight                = <span class="comment">#0482B5;</span></span><br></pre></td></tr></table></figure>

<h1 id="一些报错"><a href="#一些报错" class="headerlink" title="一些报错"></a>一些报错</h1><h2 id="hexo打开后页面一片空白"><a href="#hexo打开后页面一片空白" class="headerlink" title="hexo打开后页面一片空白"></a>hexo打开后页面一片空白</h2><p>一开始的时候给我报错<code>./soure/_data/header.swig</code>中有一个变量不能调用，笨人看了同学的目录之后发现人家根本没这个文件夹…索性把这个文件夹删掉了，然后还是不行（但是不报错了），于是我去看了<a href="https://blog.csdn.net/qq_35760825/article/details/124862679">这个教程</a></p>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>UI</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kaplan-Meier</title>
    <url>/2024/uncategorized/Kaplan-Meier/</url>
    <content><![CDATA[<h1 id="Kapla-Meier法"><a href="#Kapla-Meier法" class="headerlink" title="Kapla-Meier法"></a>Kapla-Meier法</h1><p>是一种刻画数据的非参数生存函数，直接用概率乘法定理估计生存率，但是不能建立数字模型对多个影响因素进行分析。<br>主要思路：<br>$$<br>S(t_i)&#x3D;S(t_{i-1})(1-\frac{d_i}{n_i})<br>$$</p>
<h2 id="代码：查看总体数据的生存曲线"><a href="#代码：查看总体数据的生存曲线" class="headerlink" title="代码：查看总体数据的生存曲线"></a>代码：查看总体数据的生存曲线</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>,<span class="number">8</span>)) </span><br><span class="line">kmf = <span class="title class_">KaplanMeierFitter</span>()</span><br><span class="line">kmf.fit(data.tenure,  <span class="comment"># 代表生存时长</span></span><br><span class="line">        event_observed=data.<span class="title class_">Churn</span>,  <span class="comment"># 代表事件的终点</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">kmf.plot_survival_function(at_risk_counts=<span class="title class_">True</span>,ax=ax)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>L3-封装与接口</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/L3-%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="函数重载-缺省值"><a href="#函数重载-缺省值" class="headerlink" title="函数重载&amp;缺省值"></a>函数重载&amp;缺省值</h1><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>同名函数有多个不同函数来实现</p>
<ul>
<li>编译器通过<strong>输入值</strong>来决定所调用的函数，必须保证至少一个函数参数类型不同，其余不能作为区分标志；</li>
<li>函数重载时，会优先调用类型匹配的函数实现，不存在时会进行类型转换</li>
</ul>
<h2 id="函数参数的缺省值"><a href="#函数参数的缺省值" class="headerlink" title="函数参数的缺省值"></a>函数参数的缺省值</h2><p>函数定义时设置默认值就是缺省值，在实参缺少时，编译会自动设置为default值</p>
<ul>
<li>有缺省值的函数参数，必须排在没有缺省值参数的后面<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">void print(char* name,int score,char* msg=<span class="string">&quot;pass&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>缺省值可能会导致函数调用<strong>二义性</strong>，造成冲突。此时编译器会拒绝代码：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">void fun(int a, int b=<span class="number">1</span>) &#123;</span><br><span class="line">    cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void fun(int a) &#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">/<span class="regexp">/测试代码</span></span><br><span class="line"><span class="regexp">fun(2);/</span><span class="regexp">/编译器不知道该调用第一个还是第二个函数</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="auto-deltype"><a href="#auto-deltype" class="headerlink" title="auto+deltype"></a>auto+deltype</h2><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a><code>auto</code></h3><p>std&#x3D;c++11编译，由编译器根据上下文自动确定变量的类型：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">auto x = <span class="number">1</span>;</span><br><span class="line"><span class="regexp">//</span> vector的遍历</span><br><span class="line">/<span class="regexp">/ vector&lt;string&gt; a&#123;&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;&#125;;</span></span><br><span class="line"><span class="regexp">    auto it = a.begin();  /</span><span class="regexp">/ 返回一个迭代器类型，一般来说我们并不关心迭代器具体的数据类型</span></span><br><span class="line"><span class="regexp">    while(it != a.end())</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="regexp">        it++;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return 0;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 运行结果 /</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp">0 1 2 3 4 5 6 7 8 </span></span><br></pre></td></tr></table></figure>
<ol>
<li>跟踪返回类型的函数：可以将函数返回类型的声明信息放到函数参数列表的后边进行声明，追踪返回类型在原本函数返回值的位置使用auto：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">auto func(char* ptr,int val) -&gt; int;</span><br></pre></td></tr></table></figure></li>
<li>使用注意：<ul>
<li>必须可以在编译期确定其类型</li>
<li>变量定义时必须初始化，两种错误如下： <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">auto a; <span class="regexp">//</span>错误</span><br><span class="line">auto b4 = <span class="number">10</span>, b5 = <span class="number">20.0</span>, b6 = <span class="string">&#x27;a&#x27;</span>;<span class="regexp">//</span>错误,没有推导为同一类型</span><br></pre></td></tr></table></figure></li>
<li>函数形参不能被声明为auto</li>
<li>auto并不是一个真正的类型，因此不能使用以类型为操作数的操作符</li>
</ul>
</li>
</ol>
<ul>
<li>代替冗长复杂、变量使用范围专一的变量声明，尤其是在<strong>循环</strong>中</li>
<li>定义模板函数时，用于<strong>声明依赖模板参数的变量类型</strong>。比如说函数A的两个特殊参数会传至模板参数B，B中对于形参的计算中所用到的中间参数或者结果等可以使用auto来定义，就使得模板参数可以在函数重载时具有普适性。同时也可以自动追踪返回类型。</li>
</ul>
<h3 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a><code>decltype</code></h3><p>可以对变量或表达式结果的类型进行推导,<code>decltype(var)</code>返回的是var的类型：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">struct &#123; char name[<span class="number">17</span>]; &#125; anon_u;</span><br><span class="line">struct &#123;</span><br><span class="line">int d;</span><br><span class="line"> decltype(anon_u) id;</span><br><span class="line">&#125; anon_s[<span class="number">100</span>]; <span class="regexp">//</span> 匿名的struct数组</span><br><span class="line">int main() &#123;</span><br><span class="line">decltype(anon_s) as; <span class="regexp">//</span> 注意变量as的类型<span class="symbol">:</span>数组</span><br><span class="line">cin &gt;&gt; as[<span class="number">0</span>].id.name;</span><br><span class="line"> ...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="auto-deltype-1"><a href="#auto-deltype-1" class="headerlink" title="auto+deltype"></a><code>auto+deltype</code></h3><p><strong>自动追踪返回类型</strong></p>
<ul>
<li>C++11中推导返回类型<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">auto func(int x, int y) -&gt; decltype(x+y)</span><br><span class="line">&#123;<span class="keyword">return</span> x+y;&#125;</span><br></pre></td></tr></table></figure></li>
<li>C++14中返回类型可以不显式指定<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">auto func(int x, int y)</span><br><span class="line">&#123;<span class="keyword">return</span> x+y;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="内存申请与释放"><a href="#内存申请与释放" class="headerlink" title="内存申请与释放"></a>内存申请与释放</h2><ul>
<li><code>new</code>&amp;<code>delete</code>:指针变量所指内存的动态生成和删除：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int * ptr = new int(<span class="number">10</span>); <span class="regexp">//</span> 单个变量</span><br><span class="line">int * array = new int[<span class="number">10</span>]; <span class="regexp">//</span> <span class="number">10</span>元素数组</span><br><span class="line">delete ptr; <span class="regexp">//</span> 删除指针变量所指单个内存单元delete[] array; <span class="regexp">//</span> 删除多个单元组成的内存</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="零指针"><a href="#零指针" class="headerlink" title="零指针"></a>零指针</h3><p><code>0</code>、<code>NULL</code>、<code>nullptr</code></p>
<ul>
<li><code>0</code>与<code>NULL</code>可以说是等价的，当int和ptr产生函数重载时的冲突时需要使用<code>nullptr</code>，这是一个<strong>严格意义上的空指针</strong></li>
</ul>
<h2 id="基于范围的for循环"><a href="#基于范围的for循环" class="headerlink" title="基于范围的for循环"></a>基于范围的for循环</h2><p>在循环头的圆括号中，由冒号”:”分为两部分，第一部分是用于迭代的变量，第二部分则表示将被迭代的范围。常见于容器的元素循环。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">int arr[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (int e : arr) /<span class="regexp">/ auto e:arr 也可以</span></span><br><span class="line"><span class="regexp">cout &lt;&lt; e &lt;&lt; endl;</span></span><br><span class="line"><span class="regexp">return 0;</span></span><br><span class="line"><span class="regexp">&#125; </span></span><br></pre></td></tr></table></figure>

<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="在头文件中声明类"><a href="#在头文件中声明类" class="headerlink" title="在头文件中声明类"></a>在头文件中声明类</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/ matrix.h</span></span><br><span class="line"><span class="regexp">#ifndef MATRIX_H</span></span><br><span class="line"><span class="regexp">#define MATRIX_H</span></span><br><span class="line"><span class="regexp">class Matrix &#123;</span></span><br><span class="line"><span class="regexp">int data[6][6];</span></span><br><span class="line"><span class="regexp">public:</span></span><br><span class="line"><span class="regexp">void fill(char dir);</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">#endif</span></span><br></pre></td></tr></table></figure>
<h3 id="成员变量与成员函数"><a href="#成员变量与成员函数" class="headerlink" title="成员变量与成员函数"></a>成员变量与成员函数</h3><p>通常，类的<strong>声明</strong>放在头文件中，而类的成员函数<strong>实现&#x2F;定义</strong>放在实现文件中</p>
<ul>
<li>为了便于管理和复用，一般将不同的类分别保存为不同的头文件和实现文件</li>
</ul>
<h4 id="成员函数的两种定义方式"><a href="#成员函数的两种定义方式" class="headerlink" title="成员函数的两种定义方式"></a>成员函数的两种定义方式</h4><p>为了方便解决依赖关系，复杂的成员函数声明和定义一般是分离的</p>
<ul>
<li>类内定义<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">void fill(char dir) &#123; </span><br><span class="line">    ...; <span class="regexp">//</span>在类内定义成员函数</span><br><span class="line">&#125;</span><br><span class="line">...&#125;; </span><br></pre></td></tr></table></figure></li>
<li>类外定义<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/ matrix.cpp</span></span><br><span class="line"><span class="regexp">#include &quot;matrix.h&quot;</span></span><br><span class="line"><span class="regexp">void Matrix::fill(char dir) /</span><span class="regexp">/类外需要类名限定</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    .../</span><span class="regexp">/ 函数实现&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="private-public"><a href="#private-public" class="headerlink" title="private &amp; public"></a><code>private</code> &amp; <code>public</code></h1><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a><code>this</code>指针</h1><h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>PythonBasic</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/PythonBasic/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="关键字global的用法"><a href="#关键字global的用法" class="headerlink" title="关键字global的用法"></a>关键字global的用法</h2><p>global是Python中全局变量的关键字，可以使得一个局部变量变为全局变量（既可以是某对象函数创建，也可以是在本程序任何地方创建，可以被本程序的所有对象或函数引用）<br>注意如果使的函数可以改变全局变量的值，该全局变量声明必须在函数内<br>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">x = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my</span>():</span><br><span class="line">    global x</span><br><span class="line">    x = <span class="number">8</span></span><br><span class="line">    print(<span class="string">&quot;x = &quot;</span>,x)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;x = &quot;</span>,x)</span><br><span class="line">my()</span><br><span class="line">print(<span class="string">&quot;x = &quot;</span>,x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出顺序：4 8 8</span></span><br></pre></td></tr></table></figure>

<h2 id="字典添加元素"><a href="#字典添加元素" class="headerlink" title="字典添加元素"></a>字典添加元素</h2><ol>
<li>单个添加，并且是在新元素的基础上添加（对已有元素会<strong>覆盖</strong>）<br><code>book_dict[&quot;owner&quot;] = &quot;tyson&quot; </code></li>
</ol>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Python被称为异常的对象用于管理程序执行期间发生的错误，当程序发生错误时可以使用<code>try-except</code>语句来处理错误,保持程序运行。</p>
<ul>
<li>程序崩溃时让用户看到<code>traceback</code>并不是好事，不仅是不美观，并且可能会泄露你的程序的信息，比如你程序的文件名称和无法正确运行的部分代码，攻击者很有可能根据这些信息判断出可以对代码发起怎样的攻击。</li>
</ul>
<h3 id="处理traceback的错误"><a href="#处理traceback的错误" class="headerlink" title="处理traceback的错误"></a>处理<code>traceback</code>的错误</h3><p>哪条语句导致错误就把哪条语句放在try后边</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">try:</span></span><br><span class="line">   <span class="string">&quot;&quot;</span><span class="string">&quot;可能导致程序错误运行的代码块&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">except [错误名(可以在traceback中看到)]:</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;处理错误的代码块&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果后面还有其他代码块，程序将继续运行。如果有一些代码仅在try在执行时运行，可以使用<code>else</code>语句</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">try:</span></span><br><span class="line">   <span class="string">&quot;&quot;</span><span class="string">&quot;可能导致程序错误运行的代码块&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">except [错误名(可以在traceback中看到)]:</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;处理错误的代码块，或者说使用pass不做任何反应&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;在try-except语句中没有错误发生时运行的代码块&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<h1 id="程序种的实用方法"><a href="#程序种的实用方法" class="headerlink" title="程序种的实用方法"></a>程序种的实用方法</h1><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="是否为数字"><a href="#是否为数字" class="headerlink" title="是否为数字"></a>是否为数字</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_number</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="symbol">try:</span></span><br><span class="line">        float(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">True</span></span><br><span class="line">    except <span class="title class_">ValueError</span>:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    <span class="symbol">try:</span></span><br><span class="line">        import unicodedata</span><br><span class="line">        unicodedata.numeric(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">True</span></span><br><span class="line">    except (<span class="title class_">TypeError</span>, <span class="title class_">ValueError</span>):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">False</span></span><br></pre></td></tr></table></figure>

<h1 id="Python对文件的操作"><a href="#Python对文件的操作" class="headerlink" title="Python对文件的操作"></a>Python对文件的操作</h1><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><ol>
<li><code>file = open(&#39;your_file.txt&#39;,&#39;r&#39;)</code>操作方式参数’w’会改成写（创建）文件原有内容会被清空；’r’是只读；’a’是直接在尾部添加内容或者创建；</li>
<li><code>f.close()</code>关闭文件</li>
<li><code>f.read()</code>文件读取</li>
<li>常用的文件操作形式<img src="https://img-blog.csdnimg.cn/5e8a7d527b124b55a7315aeac0d968a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5LiN5Lya5LiL6Zuo55qE772e5LqR,size_15,color_FFFFFF,t_70,g_se,x_16" alt="Img"></li>
</ol>
<h2 id="with上下文打开（推荐）"><a href="#with上下文打开（推荐）" class="headerlink" title="with上下文打开（推荐）"></a><code>with</code>上下文打开（推荐）</h2><p>操作完成后无需通过<code>close()</code>关闭文件，并且安全系数更高</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import codecs</span><br><span class="line">with codecs.open(<span class="string">&#x27;your_file.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">    f.write(<span class="string">&#x27;WellDone!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="对yaml文件进行操作"><a href="#对yaml文件进行操作" class="headerlink" title="对yaml文件进行操作"></a>对<code>yaml</code>文件进行操作</h2><p><a href="https://www.jianshu.com/p/0871ac68726d">ymal文件操作的一个简单小教程</a></p>
<h3 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a><code>yaml</code>语法</h3><ul>
<li>支持的数据类型：<br>字典、列表、字符串、布尔值、整数、浮点数、Null、时间等</li>
<li>基本语法规则：</li>
</ul>
<ol>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>相同层级的元素左侧对齐</li>
<li>键值对用冒号 “:” 结构表示，冒号与值之间需用空格分隔</li>
<li>数组前加有 “-” 符号，符号与值之间需用空格分隔</li>
<li>None值可用null 和 ~ 表示</li>
<li>多组数据之间使用3横杠—分割</li>
<li><code>#</code>表示注释，但不能在一段代码的行末尾加注释，否则会报错</li>
</ol>
<h3 id="第三方库PyYAML"><a href="#第三方库PyYAML" class="headerlink" title="第三方库PyYAML"></a>第三方库<code>PyYAML</code></h3><h4 id="读取-写入后各类型对应的格式"><a href="#读取-写入后各类型对应的格式" class="headerlink" title="读取&#x2F;写入后各类型对应的格式"></a>读取&#x2F;写入后各类型对应的格式</h4><h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><ul>
<li>打开后首先加入<code> yaml.dump(data=mydata, stream=f,allow_unicode=True)</code>防止写入的中文乱码</li>
<li>多组数据写入<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import yaml</span><br><span class="line"></span><br><span class="line">apiData1 = &#123;</span><br><span class="line">   <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;地址&quot;</span>,</span><br><span class="line">   <span class="string">&quot;data&quot;</span>: [&#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;学校&quot;</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;公寓&quot;</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;流动人口社区&quot;</span></span><br><span class="line">   &#125;],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apiData2 = &#123;</span><br><span class="line">   <span class="string">&quot;page&quot;</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;地址&quot;</span>,</span><br><span class="line">   <span class="string">&quot;data&quot;</span>: [&#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;酒店&quot;</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;医院&quot;</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;养老院&quot;</span></span><br><span class="line">   &#125;],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&#x27;./writeYamlData.yml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span><span class="comment">#注意这里文件名一定要用单引号，不然会出现奇怪的错误ing</span></span><br><span class="line">   yaml.dump_all(documents=[apiData1, apiData2], stream=f, allow_unicode=<span class="title class_">True</span>)<span class="comment">#若希望写入单组数据，使用dump,document改data</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><h2 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h2><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>注意你如果要把其他文件的格式转换成csv再读取，一定要使用表格工具另存为csv，而不是直接修改他的后缀名，直接修改后缀会导致无法打开的错误发生。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">csv_path=<span class="string">&#x27;./result.csv&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用pd.read_csv读取数据</span></span><br><span class="line">contents=pd.read_csv(csv_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前几行数据</span></span><br><span class="line">print(contents.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据的形状，返回（行数、列数）</span></span><br><span class="line">print(contents.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看列表列的名称</span></span><br><span class="line">print(contents.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看索引行</span></span><br><span class="line">print(contents.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每列的数据类型</span></span><br><span class="line">print(contents.dtypes)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>获取信息<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列名</span></span><br><span class="line">print(df.columns)</span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line">print(df.index)</span><br></pre></td></tr></table></figure></li>
<li>统计数据个数<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"> </span><br><span class="line">df = pd.read_csv(<span class="string">&quot;filename.csv&quot;</span>)</span><br><span class="line">count = df.shape[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">&quot;数据个数：&quot;</span>, count)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ol>
<li>打印函数<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">print(type(df))  <span class="comment"># pandas.core.frame.DataFrame 类</span></span><br><span class="line">print(df.shape)  <span class="comment"># DataFrame 大小</span></span><br><span class="line">print(df.head(<span class="number">5</span>))  <span class="comment"># 打印头部 5 行</span></span><br><span class="line">print(df.tail(<span class="number">5</span>))  <span class="comment"># 打印尾部 5 行</span></span><br><span class="line">print(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">print(type(df[<span class="string">&#x27;Feature&#x27;</span>]))  <span class="comment"># pandas.core.series.Series 类</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">datacsv = pd.read_table(＇python.csv＇, ＇，＇)</span><br><span class="line"><span class="comment">#将文件内的所有数据全部按照逗号进行分隔。</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Python调用"><a href="#Python调用" class="headerlink" title="Python调用"></a>Python调用</h1><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><p><a href="https://chat.openai.com/share/482540fb-19bc-4b80-a9bc-49303f475f45">和gpt老师的对话解决了我的问题</a></p>
<h2 id="调用cmd来执行R语言脚本"><a href="#调用cmd来执行R语言脚本" class="headerlink" title="调用cmd来执行R语言脚本"></a>调用cmd来执行R语言脚本</h2><p>最大的问题在于，实际上在python中敲入<code>exit</code>后并不会结束cmd的进程，这时候会陷入一直循环，在python中也无法读出是否有输入输出等等，所以此处<strong>通过输出间隔时间</strong>来判断程序是否结束</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">import time</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个交互式命令行</span></span><br><span class="line">process = subprocess.<span class="title class_">Popen</span>([<span class="string">&quot;cmd&quot;</span>], stdin=subprocess.<span class="variable constant_">PIPE</span>, stdout=subprocess.<span class="variable constant_">PIPE</span>, stderr=subprocess.<span class="variable constant_">PIPE</span>, text=<span class="title class_">True</span>)</span><br><span class="line"><span class="comment">#process = subprocess.Popen(cmd_commands, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">FeaNum</span> = <span class="string">&#x27;20&#x27;</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># 定义要执行的多个命令</span></span><br><span class="line">commands = [</span><br><span class="line">    <span class="string">&quot;cd Estimate\n&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Rscript .\RadioML_features.R -p TIANTAN -t 5 -n 1000 -R prefix_1000_5_training.RData\n&quot;</span>,</span><br><span class="line">    <span class="title class_">FeaNum</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送多个命令到命令行</span></span><br><span class="line"><span class="keyword">for</span> command <span class="keyword">in</span> <span class="symbol">commands:</span></span><br><span class="line">    process.stdin.write(command)</span><br><span class="line">    process.stdin.flush()  <span class="comment"># 刷新缓冲区以确保命令被发送</span></span><br><span class="line">    <span class="comment"># 读取命令的输出</span></span><br><span class="line">    <span class="keyword">if</span> process.stdout.readline():</span><br><span class="line">        output_line = process.stdout.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">output_line:</span>  <span class="comment"># 如果没有更多输出，则退出循环</span></span><br><span class="line">            <span class="comment">#process.stdin.write(&quot;exit\n&quot;)</span></span><br><span class="line">            print(<span class="string">&quot;Finished&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(output_line.strip())</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 等待一秒钟以确保命令有足够的时间执行</span></span><br><span class="line">    <span class="keyword">if</span> command == <span class="title class_">FeaNum</span>:  <span class="comment"># 如果没有更多输出，则退出循环</span></span><br><span class="line">        print(<span class="string">&quot;Finished&quot;</span>)</span><br><span class="line"></span><br><span class="line">output_line = process.stdout.readline()</span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">while</span> <span class="symbol">output_line:</span></span><br><span class="line"></span><br><span class="line">    print(output_line.strip())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置超时时间为1秒</span></span><br><span class="line">    <span class="comment">#print(time.time() - start_time)</span></span><br><span class="line">    <span class="keyword">if</span> time.time() - start_time &gt;= <span class="number">0.85</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    output_line = process.stdout.readline()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面是chat给的跳出循环方案，测试证明’Finished’根本不会输出</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取命令的输出</span></span><br><span class="line"><span class="keyword">while</span> <span class="title class_">True</span>:</span><br><span class="line">    output_line = process.stdout.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">output_line:</span>  <span class="comment"># 如果没有更多输出，则退出循环</span></span><br><span class="line">        process.stdin.write(<span class="string">&quot;exit\n&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;Finished&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(output_line.strip())</span><br><span class="line">sys.exit(process)</span><br><span class="line"><span class="comment">#这个地方不要加wait，否则会一直退不出来</span></span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="Pycharm救命小操作"><a href="#Pycharm救命小操作" class="headerlink" title="Pycharm救命小操作"></a>Pycharm救命小操作</h1><ol>
<li><img src="https://img-blog.csdnimg.cn/20210426203440232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pmaHNmZGhkZmFqaHNy,size_16,color_FFFFFF,t_70" alt="查看文件历史"></li>
</ol>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Visualize</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/Visualize/</url>
    <content><![CDATA[<h1 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h1><p><a href="https://blog.csdn.net/qq_42676511/article/details/125178293?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169822574316800185874963%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169822574316800185874963&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125178293-null-null.142%5Ev96%5Epc_search_result_base3&utm_term=seaborn&spm=1018.2226.3001.4187">详解seaborn，各种类型的图样！</a><br>Seaborn基本是一个建立于Matplotlib基础上的一个2D绘图库。Seaborn创建在Python核心可视化库Matplotlib的基础上，它旨在作为补充，而不是替代，但是，Seaborn具有一些非常重要的函数。让无涯教程在这里看到其中的一些。函数有助于：</p>
<ul>
<li>内置用于设置matplotlib图形样式的主题</li>
<li>可视化单变量和双变量数据</li>
<li>拟合并可视化线性回归模型</li>
<li>绘制统计时间序列数据</li>
<li>Seaborn与NumPy和Pandas数据结构配合良好</li>
<li>它带有用于为Matplotlib图形设置样式的内置主题</li>
</ul>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="导入库-数据集"><a href="#导入库-数据集" class="headerlink" title="导入库&amp;数据集"></a>导入库&amp;数据集</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import seaborn as sb</span><br><span class="line">import numpy as np</span><br></pre></td></tr></table></figure>
<ol>
<li>默认情况下数据集作为Pandas DataFrame加载<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">df=sb.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line">print df.head() <span class="comment">#可以输出列表</span></span><br></pre></td></tr></table></figure></li>
<li>查看可用数据集：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">print sb.get_dataset_names()</span><br></pre></td></tr></table></figure></li>
<li>DataFrame以矩形网络的形式存储数据，每一行都包含一个值，每一列都是一个向量，用于保存特定变量的数据。<br>行不需要包含相同数据类型的值！数字字符逻辑都可以。</li>
</ol>
<h3 id="简单的呈现代码！"><a href="#简单的呈现代码！" class="headerlink" title="简单的呈现代码！"></a>简单的呈现代码！</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sinplot</span>(<span class="params">flip=<span class="number">1</span></span>):</span><br><span class="line">   x=np.linspace(<span class="number">0</span>, <span class="number">14</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>): </span><br><span class="line">      plt.plot(x, np.sin(x + i * .<span class="number">5</span>) * (<span class="number">7</span> - i) * flip)</span><br><span class="line"><span class="comment">#sb.set() #更改为Seaborn的默认值，背景上会有灰色的网格，不加就是纯白色背景</span></span><br><span class="line">sb.displot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Seaborn带有自定义主题和高级页面，用于自定义和控制外观。<br>注释后是默认Matplotlib图，注释前是Seaborn默认图。</p>
<h4 id="displot-histplot"><a href="#displot-histplot" class="headerlink" title="displot &amp; histplot"></a><code>displot &amp; histplot</code></h4><p><a href="https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751">一个对于displot&amp;histplot呈现方式的官方文档说明</a></p>
<ul>
<li><code>displot</code>可以呈现直方图(histogram)和有层理的核密度估计图(KDE kernel density estimate)，y轴是密度</li>
<li><code>histplot</code>会展现一个更标准的计数直方图，y轴是计数</li>
<li>默认情况下，<code>distplot</code> 使用 Freedman-Diaconis 规则，但显示的条形图不超过 50 个。<code>histplot</code> 完全将二进制选择委托给 numpy 的 “自动 “默认设置，它可以根据数据特征使用不同的参考规则，并且可以在大型数据集中选择非常窄的条形宽度。您可能需要指定上限（bins&#x3D;50），以完全重现以前的图表。</li>
<li>状态设置参考：<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>hist</code></td>
<td>bool</td>
<td>是否使用直方图</td>
</tr>
<tr>
<td><code>xlabel</code>&#x2F;<code>ylabel</code></td>
<td>str</td>
<td>x，y的坐标含义</td>
</tr>
<tr>
<td><code>kde</code></td>
<td>bool</td>
<td>是否启用核心密度估计，可以让直方图和曲线比较好地耦合，但是如果想要更好就写入<code>stat = &quot;density&quot;</code>;kde曲线会溢出直方图，只覆盖histplot中数据地实际范围，更宽的范围展示可以使用<code>kde_kws = dict(cut=3)</code></td>
</tr>
<tr>
<td><code>rug</code></td>
<td>bool</td>
<td>是否添加底部阴影</td>
</tr>
<tr>
<td><code>stat</code></td>
<td>density</td>
<td>纵轴默认为count 设定后为密度</td>
</tr>
<tr>
<td><code>common_norm </code></td>
<td>cool</td>
<td>若为True，则直方图高度显示频率而非计数</td>
</tr>
<tr>
<td>&#96;&#96;</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li>一种直方图与曲线更好拟合的方法<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sns.histplot(</span><br><span class="line">    df[<span class="string">&quot;flipper_length_mm&quot;</span>], kde=<span class="title class_">True</span>,</span><br><span class="line">    stat=<span class="string">&quot;density&quot;</span>, kde_kws=dict(cut=<span class="number">3</span>),</span><br><span class="line">    alpha=.<span class="number">4</span>, edgecolor=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, .<span class="number">4</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="kdeplot"><a href="#kdeplot" class="headerlink" title="kdeplot"></a>kdeplot</h4><ul>
<li>状态设置参考：<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>shade</code></td>
<td>bool</td>
<td>是否添加曲线下阴影</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="界面样式设置"><a href="#界面样式设置" class="headerlink" title="界面样式设置"></a>界面样式设置</h2><h3 id="整体图的操作"><a href="#整体图的操作" class="headerlink" title="整体图的操作"></a>整体图的操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>代码</th>
<th>可设定值</th>
</tr>
</thead>
<tbody><tr>
<td>主题样式</td>
<td><code>.setstyle()</code></td>
<td>(双引号引出)darkgrid&#x2F;whitegrid&#x2F;dark&#x2F;white&#x2F;ticks</td>
</tr>
<tr>
<td>刻度删除</td>
<td><code>sb.despine()</code></td>
<td></td>
</tr>
<tr>
<td>缩放绘图元素、控制图比例</td>
<td><code>set_context</code></td>
<td>四个用于上下文的预设模板，基于相对大小，上下文命名：paper&#x2F;notebook&#x2F;talk&#x2F;poster</td>
</tr>
<tr>
<td>自定义样式</td>
<td>传参给<code>set_style()</code></td>
<td>print(sb.axes_style)</td>
</tr>
<tr>
<td>输出如下：</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;axes.axisbelow&#x27;</span>     : <span class="title class_">False</span>,</span><br><span class="line"><span class="string">&#x27;axes.edgecolor&#x27;</span>      : <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;axes.facecolor&#x27;</span>      : <span class="string">&#x27;#EAEAF2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;axes.grid&#x27;</span>           : <span class="title class_">True</span>,</span><br><span class="line"><span class="string">&#x27;axes.labelcolor&#x27;</span>     : <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;axes.linewidth&#x27;</span>      : <span class="number">0.0</span>,</span><br><span class="line"><span class="string">&#x27;figure.facecolor&#x27;</span>    : <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;font.family&#x27;</span>         : [u<span class="string">&#x27;sans-serif&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;font.sans-serif&#x27;</span>     : [u<span class="string">&#x27;Arial&#x27;</span>, u<span class="string">&#x27;Liberation  </span></span><br><span class="line"><span class="string">                        Sans&#x27;</span>, u<span class="string">&#x27;Bitstream Vera Sans&#x27;</span>, u<span class="string">&#x27;sans-serif&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;grid.color&#x27;</span>          : <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;grid.linestyle&#x27;</span>      : u<span class="string">&#x27;-&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;image.cmap&#x27;</span>          : u<span class="string">&#x27;Greys&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;legend.frameon&#x27;</span>      : <span class="title class_">False</span>,</span><br><span class="line"><span class="string">&#x27;legend.numpoints&#x27;</span>    : <span class="number">1</span>,</span><br><span class="line"><span class="string">&#x27;legend.scatterpoints&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&#x27;lines.solid_capstyle&#x27;</span>: u<span class="string">&#x27;round&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;text.color&#x27;</span>          : <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;xtick.color&#x27;</span>         : <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;xtick.direction&#x27;</span>     : u<span class="string">&#x27;out&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;xtick.major.size&#x27;</span>    : <span class="number">0.0</span>,</span><br><span class="line"><span class="string">&#x27;xtick.minor.size&#x27;</span>    : <span class="number">0.0</span>,</span><br><span class="line"><span class="string">&#x27;ytick.color&#x27;</span>         : <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ytick.direction&#x27;</span>     : u<span class="string">&#x27;out&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ytick.major.size&#x27;</span>    : <span class="number">0.0</span>,</span><br><span class="line"><span class="string">&#x27;ytick.minor.size&#x27;</span>    : <span class="number">0.0</span>&#125;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sb.set_style(<span class="string">&quot;darkgrid&quot;</span>, &#123;<span class="string">&#x27;axes.axisbelow&#x27;</span>: <span class="title class_">False</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="调色板"><a href="#调色板" class="headerlink" title="调色板"></a>调色板</h3><ol>
<li><code>color_palette()</code>可以直接为绘图赋予颜色并添加更多的美学价值<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">seaborn.color_palette(palette=<span class="title class_">None</span>, n_colors=<span class="title class_">None</span>, desat=<span class="title class_">None</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><code>n_colors</code>是调色板的颜色数，如果为None，则默认值取决于如何制定调色板，默认状态下为六种颜色。</li>
<li><code>desat</code>指每种颜色去饱和的比例。</li>
<li>返回值是RGB元组的列表</li>
<li>现成调色板：<code>Deep``muted``bright``pastel``dark``colorblind</code></li>
</ul>
<ol start="2">
<li><code>seaborn.palplot()</code>将调色板绘制为水平阵列。</li>
</ol>
<h4 id="定性调色板"><a href="#定性调色板" class="headerlink" title="定性调色板"></a>定性调色板</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">current_palette=sb.color_palette()</span><br><span class="line">sb.palplot(current_palette) <span class="comment">#用于水平绘制颜色阵列</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p> 默认会看到六种颜色，可以给<code>n_color</code>传参来查看所需颜色的数量</p>
<h4 id="顺序调色板"><a href="#顺序调色板" class="headerlink" title="顺序调色板"></a>顺序调色板</h4><p><strong>顺序图适合于表示范围内从相对较低值到较高值的数据分布</strong><br>给color参数上加一个“s”会绘制顺序图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">current_palette=sb.color_palette()</span><br><span class="line">sb.palplot(sb.color_palette(&quot;Greens&quot;))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="分散调色板"><a href="#分散调色板" class="headerlink" title="分散调色板"></a>分散调色板</h4><p>不同的调色板使用两种不同的颜色，每种颜色代表值从任一方向上的公共点变化。<br>假定绘制范围为-1到1的数据，值-1到0代表一种颜色，0到+1代表另一种颜色。<br>默认情况下，值从零开始居中，您可以通过传递值来使用参数中心来控制它。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">current_palette=sb.color_palette()</span><br><span class="line">sb.palplot(sb.color_palette(<span class="string">&quot;BrBG&quot;</span>, <span class="number">7</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>其中7表示调色板上有七种颜色。</p>
<h4 id="设置默认调色板"><a href="#设置默认调色板" class="headerlink" title="设置默认调色板"></a>设置默认调色板</h4><p>函数 <code>color_palette()</code>具有一个名为 <code>set_palette()</code>的函数。<br> <code>set_palette()</code>和 <code>color_palette()</code>的参数相同，但默认的Matplotlib参数已更改，因此调色板可用于所有绘图</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sinplot</span>(<span class="params">flip=<span class="number">1</span></span>):</span><br><span class="line">   x=np.linspace(<span class="number">0</span>, <span class="number">14</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">      plt.plot(x, np.sin(x + i * .<span class="number">5</span>) * (<span class="number">7</span> - i) * flip)</span><br><span class="line"></span><br><span class="line">import seaborn as sb</span><br><span class="line">sb.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">sb.set_palette(<span class="string">&quot;husl&quot;</span>)</span><br><span class="line">sinplot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="绘制单变量分布"><a href="#绘制单变量分布" class="headerlink" title="绘制单变量分布"></a>绘制单变量分布</h4><p>seaborn可以帮助理解数据的单变量分布<br><code>seaborn.sidtplot()</code>提供最快查看单变量分布的方法，可以绘制适合数据和密度估计的直方图。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>remark</th>
</tr>
</thead>
<tbody><tr>
<td><code>data</code></td>
<td>一维数组或列表</td>
</tr>
<tr>
<td><code>bins</code></td>
<td><code>hist bins</code>的规格</td>
</tr>
<tr>
<td><code>hist</code></td>
<td>bool</td>
</tr>
<tr>
<td><code>kde</code></td>
<td>bool</td>
</tr>
</tbody></table>
<h1 id="matplotlib画入pyqt5"><a href="#matplotlib画入pyqt5" class="headerlink" title="matplotlib画入pyqt5"></a>matplotlib画入pyqt5</h1><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import <span class="title class_">QApplication</span>, <span class="title class_">QMainWindow</span>, <span class="title class_">QVBoxLayout</span>, <span class="title class_">QWidget</span></span><br><span class="line">from matplotlib.backends.backend_qt5agg import <span class="title class_">FigureCanvasQTAgg</span> as <span class="title class_">FigureCanvas</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatplotlibWindow</span>(<span class="title class_">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Matplotlib in PyQt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建Matplotlib图形</span></span><br><span class="line">        <span class="variable language_">self</span>.figure = plt.figure()</span><br><span class="line">        <span class="variable language_">self</span>.canvas = <span class="title class_">FigureCanvas</span>(<span class="variable language_">self</span>.figure)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个垂直布局并将Matplotlib图形添加到其中</span></span><br><span class="line">        layout = <span class="title class_">QVBoxLayout</span>()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.canvas)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个QWidget并将布局设置为其主布局</span></span><br><span class="line">        main_widget = <span class="title class_">QWidget</span>(<span class="variable language_">self</span>)</span><br><span class="line">        main_widget.setLayout(layout)</span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(main_widget)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个Matplotlib子图</span></span><br><span class="line">        <span class="variable language_">self</span>.ax = <span class="variable language_">self</span>.figure.add_subplot(<span class="number">111</span>)</span><br><span class="line">        <span class="variable language_">self</span>.ax.set_title(<span class="string">&#x27;Matplotlib in PyQt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制一个简单的图形</span></span><br><span class="line">        <span class="variable language_">self</span>.ax.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">10</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新Matplotlib图形</span></span><br><span class="line">        <span class="variable language_">self</span>.canvas.draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    app = <span class="title class_">QApplication</span>(sys.argv)</span><br><span class="line">    window = <span class="title class_">MatplotlibWindow</span>()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="ITK"><a href="#ITK" class="headerlink" title="ITK"></a>ITK</h1><p><a href="https://developer.aliyun.com/article/930218">ITK在cmake上配置的一个非常棒的教程</a></p>
<h1 id="VTK"><a href="#VTK" class="headerlink" title="VTK"></a>VTK</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import nibabel as nib</span><br><span class="line">from ipywidgets import interact, interactive, <span class="title class_">IntSlider</span>, <span class="title class_">ToggleButtons</span></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib</span><br><span class="line">matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>)</span><br><span class="line"><span class="comment">#%matplotlib inline</span></span><br><span class="line">import seaborn as sns</span><br><span class="line">sns.set_style(<span class="string">&#x27;darkgrid&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">explore_3dimage</span>(<span class="params">layer</span>):</span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">    plt.imshow(image_data[<span class="symbol">:</span>, <span class="symbol">:</span>, layer], cmap=<span class="string">&#x27;gray&#x27;</span>);</span><br><span class="line">    plt.title(<span class="string">&#x27;Explore Layers of adrenal&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> layer</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;./brain1_image.nii.gz&quot;</span></span><br><span class="line">image_obj = nib.load(image_path)</span><br><span class="line">print(f<span class="string">&#x27;Type of the image &#123;type(image_obj)&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">image_data = image_obj.get_fdata()</span><br><span class="line">type(image_data)</span><br><span class="line"></span><br><span class="line">height, width, depth = image_data.shape</span><br><span class="line">print(f<span class="string">&quot;The image object height: &#123;height&#125;, width:&#123;width&#125;, depth:&#123;depth&#125;&quot;</span>)</span><br><span class="line">print(f<span class="string">&#x27;image value range: [&#123;image_data.min()&#125;, &#123;image_data.max()&#125;]&#x27;</span>)</span><br><span class="line">print(image_obj.header.keys())</span><br><span class="line"></span><br><span class="line">pixdim =  image_obj.header[<span class="string">&#x27;pixdim&#x27;</span>]</span><br><span class="line">print(f<span class="string">&#x27;z轴分辨率： &#123;pixdim[3]&#125;&#x27;</span>)</span><br><span class="line">print(f<span class="string">&#x27;in plane 分辨率： &#123;pixdim[1]&#125; * &#123;pixdim[2]&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">z_range = pixdim[<span class="number">3</span>] * depth</span><br><span class="line">x_range = pixdim[<span class="number">1</span>] * height</span><br><span class="line">y_range = pixdim[<span class="number">2</span>] * width</span><br><span class="line">print(x_range, y_range, z_range)</span><br><span class="line"></span><br><span class="line">maxval = <span class="number">25</span></span><br><span class="line">i = np.random.randint(<span class="number">0</span>, maxval)</span><br><span class="line"><span class="comment"># Define a channel to look at</span></span><br><span class="line">print(f<span class="string">&quot;Plotting z Layer &#123;i&#125; of Image&quot;</span>)</span><br><span class="line">plt.imshow(image_data[<span class="number">0</span>, <span class="symbol">:</span>, <span class="symbol">:</span>], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#interact(explore_3dimage, layer=(0, image_data.shape[-1]));</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>




<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h1 id="Vedo"><a href="#Vedo" class="headerlink" title="Vedo"></a>Vedo</h1><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h3 id="Mesh"><a href="#Mesh" class="headerlink" title="Mesh"></a>Mesh</h3><p>Mesh模型是一种用于描述<strong>三维物体表面</strong>的数学表示方法。它由一系列顶点（vertices）和连接这些顶点的线段或面片（faces）组成。每个顶点具有其在三维空间中的坐标位置，而每个面片则由一组顶点索引构成，定义了一个平面。<br>在Mesh模型中，可以使用不同的数据结构来表示顶点和面片之间的关系，常见的包括三角形网格（triangle mesh）和四边形网格（quadrilateral mesh）三角形网格是最常用的一种，它由三个顶点和一个法线向量（用于确定面片的朝向）组成。四边形网格则由四个顶点和一个法线向量构成。<br>除了顶点和面片信息，Mesh模型还可以包含其他属性，如颜色、纹理坐标、法线向量等。这些属性可以为模型添加更多的细节和真实感。<br>常使用.ply格式的文件存放mesh模型</p>
<h1 id="一点报错"><a href="#一点报错" class="headerlink" title="一点报错"></a>一点报错</h1><h2 id="VTK-1"><a href="#VTK-1" class="headerlink" title="VTK"></a>VTK</h2><blockquote>
<p>module ‘backend_interagg’ has no attribute ‘FigureCanvas’. Did you mean: ‘FigureCanvasAgg’?</p>
</blockquote>
<p>解决：加入代码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import matplotlib</span><br><span class="line">matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/qlkaicx/article/details/134068734">解释</a><br><code>matplotlib.use(&#39;TkAgg&#39;)</code> 这行代码是用于设置 Matplotlib 库的后端。后端是用于实现图形绘制和用户界面的库。Matplotlib 支持多种后端，例如 <code>‘TkAgg’</code>、<code>‘Qt5Agg’</code>、<code>‘GTK3Agg’</code> 等。</p>
<p>在这行代码中，<code>‘TkAgg’</code> 是后端的名称，而 <code>matplotlib.use()</code> 函数用于指定使用哪种后端。在这个例子中，你告诉 Matplotlib 使用 <code>‘TkAgg’</code> 后端。</p>
<p>Matplotlib 默认使用 <code>‘TkAgg’ </code>后端，但有时你可能希望更改默认后端以利用特定 GUI 工具包的特性。例如，如果你希望使用 Qt5 而不是 Tkinter，你可以通过调用<code> matplotlib.use(&#39;Qt5Agg&#39;)</code> 来实现。</p>
<p>需要注意的是，更改后端会影响所有后续的图形绘制，因此如果你在代码的不同部分使用不同的后端，你需要在每个需要使用特定后端的代码部分之前调用 <code>matplotlib.use()</code>。</p>
<h2 id="Vedo-1"><a href="#Vedo-1" class="headerlink" title="Vedo"></a>Vedo</h2><blockquote>
<p>AttributeError: ‘vtkmodules.vtkFiltersCore.vtkQuadricDecimation’ object has no attribute ‘MapPointDataOn’</p>
</blockquote>
<p><a href="https://github.com/marcomusy/vedo/issues/1055">提问区链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -U git+https://github.com/marcomusy/vedo.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>‘set’ object has no attribute ‘name’</p>
</blockquote>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>数据处理</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>RBasic</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/RBasic/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="散点图的绘制"><a href="#散点图的绘制" class="headerlink" title="散点图的绘制"></a>散点图的绘制</h2><p><a href="https://zhuanlan.zhihu.com/p/364571510">先扔一个散点教程</a></p>
<h2 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h2><h3 id="笨人踩过的一个天大的坑"><a href="#笨人踩过的一个天大的坑" class="headerlink" title="笨人踩过的一个天大的坑"></a>笨人踩过的一个天大的坑</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">image_path = <span class="string">&quot;path_to_your_image.nii&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">#建立名称</span></span><br><span class="line"><span class="string">row_index = []</span></span><br><span class="line"><span class="string">columns_index = []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">matrix_zeros = np.zeros([16, 4])</span></span><br><span class="line"><span class="string">row_index = [&#x27;Vic&#x27;, str([0, 2]), str([0, 3]), str([0, 4]),</span></span><br><span class="line"><span class="string">             str([1, 1]), str([1, 2]), str([1, 3]), str([1, 4]),</span></span><br><span class="line"><span class="string">             str([2, 1]), str([2, 2]), str([2, 3]), str([2, 4]),</span></span><br><span class="line"><span class="string">             str([3, 1]), str([3, 2]), str([3, 3]), str([3, 4])</span></span><br><span class="line"><span class="string">             ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">columns_index = [&#x27;Vic&#x27;, 1, 2, 3]</span></span><br><span class="line"><span class="string">numdata = pd.DataFrame(matrix_zeros, columns=columns_index, index=row_index)</span></span><br><span class="line"><span class="string">print(numdata)</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> idx, row <span class="keyword">in</span> df.iterrows():  <span class="comment"># 遍历 DataFrame</span></span><br><span class="line">    <span class="keyword">if</span> is_number(row[<span class="string">&#x27;Value&#x27;</span>])<span class="symbol">:</span><span class="comment">#存储数字结果</span></span><br><span class="line">        numdata = numdata.append(&#123;<span class="string">&#x27;Feature&#x27;</span>: row[<span class="string">&#x27;Feature&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>: row[<span class="string">&#x27;Value&#x27;</span>]&#125;,ignore_index=<span class="title class_">True</span>)</span><br><span class="line"><span class="comment">#numdata = numdata.append(fnumdata, ignore_index=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设我们要将第一行数据作为列标题</span></span><br><span class="line"><span class="comment">#new_columns = numdata.iloc[:,0]#如果是行，使用[0]</span></span><br><span class="line"><span class="comment">#numdata.index = new_columns# 添加标题</span></span><br><span class="line"><span class="comment">#numdata.columns = [&#x27;Vic&#x27;]</span></span><br><span class="line"><span class="comment"># 删除第一行，因为它已经作为列标题了</span></span><br><span class="line">numdata = numdata.drop(df.index[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#df.to_csv(&#x27;./lib/Estimate/demo.csv&#x27;, index=False)</span></span><br><span class="line"><span class="comment">#存储供生存分析使用的data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#np.savetxt(&#x27;./lib/Estimate/demo.txt&#x27;, numdata,),index=row_index,columns=columns_index</span></span><br><span class="line">numdata.to_csv(<span class="string">&#x27;./lib/Estimate/demo.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>,index=<span class="title class_">False</span>)</span><br><span class="line">print(numdata)</span><br></pre></td></tr></table></figure>


<h1 id="一些小资源"><a href="#一些小资源" class="headerlink" title="一些小资源"></a>一些小资源</h1><p><a href="https://zhuanlan.zhihu.com/p/661867621">高级可视化100图</a></p>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>统计</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/uncategorized/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h1 id="vscode使用"><a href="#vscode使用" class="headerlink" title="vscode使用"></a>vscode使用</h1><ol>
<li>c语言程序窗口执行到scanf函数出现闪退</li>
</ol>
<p>可在头文件加上#include<stdlib>，main函数里return上面加上system(“pause”); 可防止程序窗口闪退</p>
<ol start="2">
<li>c++直接加system(“pause”);</li>
</ol>
<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h4 id="数的编码"><a href="#数的编码" class="headerlink" title="数的编码"></a>数的编码</h4><p>原码：最高位为符号位（0为正数 1为负数） 其余各位表示数本身的绝对值<br>反码：正数的反码与源码相同 若为负数 其绝对值的原码的各位取反<br>补码：正数的原码、反码和补码都相同 若为负数 则用模数加上该负数 也就是对其反码加1（若有进位则进位舍弃）</p>
<p>5<br>2003.24.04 11:11<br>2339.02.29 11:11<br>2400.02.29 11:11<br>2339.02.29 11:11<br>8561.12.90 24:00</p>
]]></content>
  </entry>
  <entry>
    <title>codenote</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/codenote/</url>
    <content><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>探讨一个算法的实现以及其性能，表示程序运行答题时间。<br>f(n)指的是<strong>一般数据下</strong>运行时间的上界，并非一定是最坏情况，所以要注意：</p>
<ul>
<li>数据用例不同时时间复杂度不同。</li>
<li>时间复杂度不同时，不同输入数据规模下性能也会有差异（就是函数问题）；O是数据量级非常大的情况下表现出的时间复杂度，所以经常会忽略常数项，所以说决定算法并不是只考虑复杂度越低越好还要综合<strong>数据规模</strong></li>
<li>化简：只保留最高次（考虑n很大况）</li>
<li>注意考虑全面’每次操作’的内涵 eg.字符串比较，有字符串自身长度m，排序后比较比直接比较更优</li>
<li>递归的时间复杂度：递归次数*递归中的操作次数；[tips]在递归中要少调用自身函数，建议单独把要调用的函数抽取出来，可以减少时间复杂度(下例时间复杂度n&#x2F;2)<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int function4(int x, int n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    int t = function4(x, n / <span class="number">2</span>);<span class="regexp">//</span> 这里相对于function3，是把这个递归操作抽取出来</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t * t * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t * t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<strong>补充：空间复杂度</strong><br>空间复杂度是程序运行时占用内存的大小，不是exe文件本身大小</li>
</ul>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>内置函数：<code>sort(pbegin,pend);</code></p>
<h3 id="qsort函数compare"><a href="#qsort函数compare" class="headerlink" title="qsort函数compare"></a>qsort函数<code>compare</code></h3><p>qsort(a,n,bytes(type),compare);</p>
<ul>
<li>是相应的数据类型单个变量所占的字节数</li>
</ul>
<h4 id="Sort-double-array"><a href="#Sort-double-array" class="headerlink" title="Sort double array"></a>Sort double array</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int n;</span><br><span class="line">double a[N];</span><br><span class="line">int compare(const void *e1, const void *e2)</span><br><span class="line">&#123;</span><br><span class="line">    double v1 = *((double *)e1);</span><br><span class="line">    double v2 = *((double *)e2);</span><br><span class="line">	<span class="keyword">if</span>(v1 &gt; v2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(v1 &lt; v2) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">qsort(a, n, sizeof(double), compare);</span><br></pre></td></tr></table></figure>
<h4 id="Sort-long-long-array"><a href="#Sort-long-long-array" class="headerlink" title="Sort long long array"></a>Sort long long array</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int n;</span><br><span class="line">long long a[N];</span><br><span class="line"></span><br><span class="line">int compare(const void *e1, const void *e2)</span><br><span class="line">&#123;</span><br><span class="line">    long long v1 = *((const long long *)e1);</span><br><span class="line">    long long v2 = *((const long long *)e2);</span><br><span class="line">	<span class="keyword">if</span>(v1 &gt; v2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(v1 &lt; v2) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qsort(a, n, sizeof(long long), compare);</span><br></pre></td></tr></table></figure>
<h4 id="Sort-array-of-char-array"><a href="#Sort-array-of-char-array" class="headerlink" title="Sort array of char array"></a>Sort array of char array</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">char buf[<span class="number">100</span>][<span class="number">105</span>];</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line">qsort(buf, n, sizeof(buf[<span class="number">0</span>]), strcmp);</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/ Sort char* array</span></span><br><span class="line"><span class="regexp">char *lines[100];</span></span><br><span class="line"><span class="regexp">int n;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">int compare(const void *p1, const void *p2)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    char *a = *(char **)p1;</span></span><br><span class="line"><span class="regexp">    char *b = *(char **)p2;</span></span><br><span class="line"><span class="regexp">    return strcmp(a, b);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">qsort(lines, n, sizeof(char *), compare);</span></span><br></pre></td></tr></table></figure>
<h4 id="Sort-array-of-int-array"><a href="#Sort-array-of-int-array" class="headerlink" title="Sort array of int array"></a>Sort array of int array</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int data[<span class="number">100</span>][<span class="number">3</span>];</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line">int compare(const void *e1, const void *e2)</span><br><span class="line">&#123;</span><br><span class="line">    int *p1 = (int *)e1;</span><br><span class="line">    int *p2 = (int *)e2;</span><br><span class="line">	<span class="keyword">if</span>(p1[<span class="number">0</span>] &gt; p2[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(p1[<span class="number">0</span>] &lt; p2[<span class="number">0</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	<span class="regexp">//</span> <span class="title class_">You</span> can use p[<span class="number">1</span>], p[<span class="number">2</span>] as well</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">qsort(buf, n, sizeof(data[<span class="number">0</span>]), compare);</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><ol>
<li>哈希算法&#x2F;哈希函数：将任意长度的二进制值串映射为固定长度的二进制值串的映射规则；<ul>
<li>其中所依据的目录称为“键”</li>
<li>存放记录的数组称作散列表(Hash Table)</li>
</ul>
</li>
<li>哈希表是根据关键码的值而直接进行访问的数据结构<ul>
<li>比方说通过下标(key)访问数组的值时，数组可以视为哈希表,下标与数组存储的值可以成为一个键值对<code>key-value</code>,在jdk中被称为<code>Entry</code></li>
</ul>
</li>
<li>常用于快速判断一个元素是否出现在集合中（提速）</li>
<li>空间换时间</li>
</ol>
<h2 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>不同数据映射后成为相同的值</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><p>将冲突的值储存在同一列表当中，再在链表中检索</p>
<ul>
<li>适当选择哈希表大小，减小哈希表可以降内存，缩短链表可以减少时间</li>
</ul>
<h4 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h4><p>要求:tableSize&gt;dataSize</p>
<ul>
<li>寻找空位存放多余数据</li>
</ul>
<h2 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h2><p>数组、几何、映射</p>
<h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>codings</tag>
      </tags>
  </entry>
  <entry>
    <title>影像组学</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/%E5%BD%B1%E5%83%8F%E7%BB%84%E5%AD%A6/</url>
    <content><![CDATA[<p><a href="https://ieeexplore.ieee.org/ielx7/7433213/8657419/08657645.pdf?tag=1">一个对比AI影像和传统影像的论文，介绍各自的特征</a><br>深度学习简单直接自动化，大力出奇迹；影像组学步步为营靠人工，识珠靠慧眼。两种方法本质上都依赖大数据，都可以划分为图像预处理、特征筛选和特征建模三个阶段。</p>
<h1 id="传统影像组学"><a href="#传统影像组学" class="headerlink" title="传统影像组学"></a>传统影像组学</h1><p>方法上，影像组学提取传统的图像特征，包括形状、灰度、纹理等，采用传统统计（模式识别）模型来分类和预测，如支持向量机、随机森林、XGBoost等；<br><strong>Overview</strong><br><img src="https://pic4.zhimg.com/v2-f6a1971f7bd966f887c80a6b6afdce53_r.jpg" alt="Img"></p>
<h1 id="AI影像组学"><a href="#AI影像组学" class="headerlink" title="AI影像组学"></a>AI影像组学</h1><h2 id="深度学习人工智能模型"><a href="#深度学习人工智能模型" class="headerlink" title="深度学习人工智能模型"></a>深度学习人工智能模型</h2><p><a href="https://zhuanlan.zhihu.com/p/459735826">放射组学基于人工智能治疗预后</a><br>DL方法基于深度神经网络进行模式识别，模式识别通常包括一系列可训练的非线性操作，称为层，每个层将输入数据转换为便于模式识别的表示。随着越来越多的层对输入数据应用转换，这些数据越来越多地抽象为深层特征表示。由此产生的深层特征最终可以由网络的最后一层转化为所需的输出，例如治疗结果的可能性或肿瘤的分子亚型。深度学习是一个广泛的、技术性的、动态发展的领域。我们简要介绍了基于预测的AI影像学中最常见的主题，并对深层神经网络的类型、常用框架、解决数据局限性的方法进行了更详细的补充讨论。所有这些问题在别的研究中都有综述。</p>
<h2 id="VGG实现特征提取"><a href="#VGG实现特征提取" class="headerlink" title="VGG实现特征提取"></a>VGG实现特征提取</h2><h3 id="常用代码-注解"><a href="#常用代码-注解" class="headerlink" title="常用代码&amp;注解"></a>常用代码&amp;注解</h3><h4 id="查看模型结构"><a href="#查看模型结构" class="headerlink" title="查看模型结构"></a>查看模型结构</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看模型整体结构</span></span><br><span class="line">structure = torch.nn.<span class="title class_">Sequential</span>(*list(vgg_model.children())[<span class="symbol">:</span>])</span><br><span class="line">print(structure)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看模型各部分名称</span></span><br><span class="line">print(<span class="string">&#x27;模型各部分名称&#x27;</span>, vgg_model._modules.keys())</span><br></pre></td></tr></table></figure>
<p>运行后可知：</p>
<ul>
<li><p>vgg19整体结构分为三大部分：</p>
<ul>
<li>‘features’：上面输出的VGG19模型结构中的第一个Sequential，包含（0）-（36）层；</li>
<li>‘avgpool’：VGG19模型结构的第二个部分AdaptiveAvgPool2d；</li>
<li>‘classifier’：VGG19模型结构的最后一个部分Sequential，包含（0）-（6）层。注意其中Linear特征维度是1000，其余均为4096.</li>
</ul>
</li>
</ul>
<h4 id="修改模型结构"><a href="#修改模型结构" class="headerlink" title="修改模型结构"></a>修改模型结构</h4><ol>
<li><p>可以获取各个部分，切割层数</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取vgg19模型的第一个Sequential, 也就是features部分.</span></span><br><span class="line">features = torch.nn.<span class="title class_">Sequential</span>(*list(vgg_model.children())[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">&#x27;features of vgg19: &#x27;</span>, features)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取vgg19模型的最后一个Sequential, 也就是classifier部分.</span></span><br><span class="line">classifier = torch.nn.<span class="title class_">Sequential</span>(*list(vgg_model.children())[-<span class="number">1</span>])</span><br><span class="line">print(<span class="string">&#x27;classifier of vgg19: &#x27;</span>, classifier)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在获取到最后一个classifier部分的基础上, 再切割模型, 去掉最后一层.</span></span><br><span class="line">new_classifier = torch.nn.<span class="title class_">Sequential</span>(*list(vgg_model.children())[-<span class="number">1</span>][<span class="symbol">:</span><span class="number">6</span>])</span><br><span class="line">print(<span class="string">&#x27;new_classifier: &#x27;</span>, new_classifier)</span><br></pre></td></tr></table></figure></li>
<li><p>用new_classifier替换vgg19原始模型中的分类器( classifier )部分，就得到了输出维度是4096的VGG19模型</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision.models as models</span><br><span class="line">from torchvision import transforms</span><br><span class="line">from <span class="variable constant_">PIL</span> import <span class="title class_">Image</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取vgg19原始模型, 输出图像维度是1000.</span></span><br><span class="line">vgg_model_1000 = models.vgg19(pretrained=<span class="title class_">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面三行代码功能是:得到修改后的vgg19模型.</span></span><br><span class="line"><span class="comment"># 具体实现是: 去掉vgg19原始模型的第三部分classifier的最后一个全连接层, </span></span><br><span class="line"><span class="comment"># 用新的分类器替换原始vgg19的分类器，使输出维度是4096.</span></span><br><span class="line">vgg_model_4096 = models.vgg19(pretrained=<span class="title class_">True</span>)</span><br><span class="line">new_classifier = torch.nn.<span class="title class_">Sequential</span>(*list(vgg_model_4096.children())[-<span class="number">1</span>][<span class="symbol">:</span><span class="number">6</span>])</span><br><span class="line">vgg_model_4096.classifier = new_classifier</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取和处理图像</span></span><br><span class="line">image_dir = <span class="string">&#x27;/mnt/image_test.jpg&#x27;</span></span><br><span class="line">im = <span class="title class_">Image</span>.open(image_dir)</span><br><span class="line">trans = transforms.<span class="title class_">Compose</span>([</span><br><span class="line">        transforms.<span class="title class_">Resize</span>((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.<span class="title class_">ToTensor</span>(),</span><br><span class="line">        transforms.<span class="title class_">Normalize</span>(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">])</span><br><span class="line">im = trans(im)</span><br><span class="line">im.unsqueeze_(dim=<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用vgg19得到图像特征.</span></span><br><span class="line"><span class="comment"># 原始vgg19模型</span></span><br><span class="line">image_feature_1000 = vgg_model_1000(im).data[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">&#x27;dim of vgg_model_1000: &#x27;</span>, image_feature_1000.shape)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改后的vgg19模型</span></span><br><span class="line">image_feature_4096 = vgg_model_4096(im).data[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">&#x27;dim of vgg_model_4096: &#x27;</span>, image_feature_4096.shape)</span><br></pre></td></tr></table></figure>
</li>
<li><p>简化版本：只需要原始vgg19模型的第一个部分features部分的输出结果.但是只适用于联网加载的vgg19模型（即设置了pretrained&#x3D;True的模型），不适用于使用了本地vgg19模型的vgg_model</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取vgg19原始模型的features部分的前34个结构, 得到新的vgg_model模型.</span></span><br><span class="line">vgg_model = models.vgg19(pretrained=<span class="title class_">True</span>).features[<span class="symbol">:</span><span class="number">34</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 但是下面的代码只能得到classifier部分的前40个, </span></span><br><span class="line"><span class="comment"># 而不能得到包含features及avgpool及classifier的一共前40个结构.</span></span><br><span class="line"><span class="comment"># 所以这个方法不能实现输出4096维度图像特征的目标．</span></span><br><span class="line"><span class="comment"># vgg_model = models.vgg19(pretrained=True).classifier[:40]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一些小tips</p>
<ol>
<li>修改特征类型 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">    把<span class="string">`VGG16_Weights.IMAGENET1K_FEATURES`</span></span><br><span class="line">改成<span class="string">`VGG16_Weights.IMAGENET1K_V1`</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="用于预测的卷积神经网络"><a href="#用于预测的卷积神经网络" class="headerlink" title="用于预测的卷积神经网络"></a>用于预测的卷积神经网络</h2><p>在放射学中，大多数基于DL的生物标记物应用都使用卷积神经网络从成像数据得出预测（图3a）。<strong>卷积神经网络是神经网络的一种特殊形式，用于学习图像的空间特征</strong>，并且由于它们在诊断任务中的表现，受到了广泛的关注。在几项引人注目的研究中，基于CNN的模型在诊断胸片和CT以及数字乳房X光摄影方面甚至超过了专业的人类专家。正如CNN已被证明能够学习指示恶性肿瘤的图像特征一样，越来越多的研究表明，它们可以根据与预后、风险和分子特征相关的肿瘤性质的细微差异对患者进行分型（图3a）。当使用患者结果数据进行训练时，CNN的卷积层可以学会识别反映预后的新成像表型。CNN可以应用于2D或3D输入，并且可以使用多个输入，以便从图像类型的组合中学习，例如<strong>多参数或动态MRI扫描</strong>。大量的CNN结构可以选择来用于基于AI的生物标记物研究（补充表2）。补充框2中进一步详细讨论了它们的原理和优势。<br><img src="https://pic3.zhimg.com/80/v2-0d05d6872495dc94b788d526756f9c2e_1440w.webp" alt="Img"></p>
<ul>
<li><p>用于预测的卷积神经网络（CNN）模型示例。输入图像或体积通过CNN层，CNN层执行操作并将其转换为目标输出向量。卷积层是将成像数据转换为深度特征表示的一组操作。每个过滤器通过图像，并与非线性激活函数配对，以强调特定任务感兴趣的视觉模式。随着更多的卷积层层叠，CNN可以在图像中学习到更复杂的视觉模式。在整个CNN分类器中，深度特征通过池化操作定期聚合。经过卷积层和池化层处理后，深度特征表示最终被展平为向量。接下来，完全连接的层将这些CNN衍生的图像特征转换为对应于目标输出的向量。这些模型可用于预测治疗反应、预测、肿瘤亚型和生物标志物的分类以及生理值的预测。</p>
</li>
<li><p>全卷积神经网络是一种CNN类型，只包含产生图像输出的卷积层，如肿瘤位置图。</p>
</li>
<li><p>完全连接的网络可以根据非图像数据进行训练，如影像组学特征和临床变量。</p>
</li>
<li><p>当对模型进行结果预测训练时，对大量数据的需求可能会存在局限性，在这种情况下，可行的患者数据可能比诊断研究更加有限。幸运的是，尽管训练数据很少，但有几种方法可以利用神经网络的优势。例如，<strong>迁移学习，其中针对一个模式识别任务训练的模型被重新调整用途以执行新任务，经常用于在训练数据大幅减少的情况下实现强大的CNN性能</strong>其他方法可用于处理有限或有缺陷的训练数据。</p>
</li>
</ul>
<h2 id="一些论文"><a href="#一些论文" class="headerlink" title="一些论文"></a>一些论文</h2><h3 id="一个特征提取网络的介绍"><a href="#一个特征提取网络的介绍" class="headerlink" title="一个特征提取网络的介绍"></a><a href="https://blog.csdn.net/cc1609130201/article/details/130921342?ops_request_misc=&request_id=&biz_id=102&utm_term=MRIVGG-Net&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-130921342.142%5Ev96%5Epc_search_result_base3&spm=1018.2226.3001.4187">一个特征提取网络的介绍</a></h3><p><strong>Deep Feature——用深度网络来提取特征</strong></p>
<h3 id="Pure-DL直接使用Autoencoder来提取特征，然后直接进行分类。"><a href="#Pure-DL直接使用Autoencoder来提取特征，然后直接进行分类。" class="headerlink" title="Pure DL直接使用Autoencoder来提取特征，然后直接进行分类。"></a><a href="http://devinderkumar.com/slides/crv_2015.pdf">Pure DL</a>直接使用Autoencoder来提取特征，然后直接进行分类。</h3><p>采用LIDC中已经标记（分割）好的肺结节病灶区域作为ROI，对ROI的最小包围矩形区域进行尺寸归一化，然后输入一个5层Autoencoder网络进行特征编码，对Autoencoder网络进行训练。之后，使用训练优化完成后的5层网络中的第4层网络输出，共200个特征向量，输入一个二值分类树，区分肺结节良恶性。<br><img src="https://pic1.zhimg.com/80/v2-0e0f70828404e5f5726e06d034bee348_1440w.webp" alt="Img"><br>但是这种方法准确度有待考量。</p>
<h3 id="！DL-Tr可以预测生存周期"><a href="#！DL-Tr可以预测生存周期" class="headerlink" title="！DL+Tr可以预测生存周期"></a>！<a href="https://pubmed.ncbi.nlm.nih.gov/28871110/">DL+Tr</a>可以预测生存周期</h3><p>在传统的影像组学三大件（形状、灰度、纹理）之上，又添加了来自于深度学习网络的深度特征（Deep Feature）。所使用的深度学习网络包含5个卷积层和3个全连接层。倒数第二个（full7）和倒数第三个（full6）全连接层的输出，共8192个特征，与其他影像组学特征一起输入预测模型，来预测多形性成胶质细胞瘤患者的生存周期<br><img src="https://pic1.zhimg.com/80/v2-5d2b1d2feeaedce0ff8e73abb6e0d944_1440w.webp" alt="Img"></p>
<h3 id="！DRL"><a href="#！DRL" class="headerlink" title="！DRL"></a>！<a href="https://www.nature.com/articles/s41598-017-05848-2">DRL</a></h3><p>直接采用CNN网络的输出作为特征，连接传统的分类器（预测器）进行分类和预测。作者在MR多模态影像上，测试和验证了DLR预测低级别胶质瘤突变分级的准确性。下方依次给出的是整体流程图，以及将DLR与传统影像组学方法的特异性、敏感性等对比、ROC对比。从对比可以看出，DLR方法在各项指标中几乎全面胜出。并且，对比中发现，采用多模态影像，并且对特征进行进一步筛选，得到的各项指标是最高的。<br><img src="https://pic2.zhimg.com/80/v2-9c5310d71e5e428662db1243f000b615_1440w.webp" alt="Img"><br><img src="https://pic1.zhimg.com/80/v2-558358a40a38f506aa5588d0e33a777c_1440w.webp" alt="Img"><br><img src="https://pic1.zhimg.com/80/v2-59d63f7881800e9147150a997646d6f4_1440w.webp" alt="Img"></p>
<h3 id="VGG-16-Architecture-for-MRI-Brain-Tumor-Image-Classification"><a href="#VGG-16-Architecture-for-MRI-Brain-Tumor-Image-Classification" class="headerlink" title="VGG-16 Architecture for MRI Brain Tumor Image Classification"></a><a href="https://link.springer.com/chapter/10.1007/978-981-19-8338-2_26">VGG-16 Architecture for MRI Brain Tumor Image Classification</a></h3><ul>
<li>初始阶段是对样本图像进行预处理，然后使用池化层进行过滤，使用卷积层进行特征提取，最后使用架构模型的 FC 层进行分类。来自分子脑肿瘤数据库（REpository of Molecular BRAin Neoplasia DaTa，REMBRANDT）的核磁共振图像使用了预先训练好的模型架构，如视觉几何组（VGG）VGG-19、VGG-16、Inception-V3、Inception-V2、残差网络（ResNet）ResNet-18 和 ResNet-50。</li>
<li>The use of DL and TL methods to diagnose and classify brain tumors using MRI brain images has been proved to be a promising methodology.<strong>contains many CNN designs, including ResNet,Inception, and VGG networks.</strong></li>
<li>Figure 2 illustrates the CNN model’s architecture for brain tumor categorization.<img src="https://media.springernature.com/lw685/springer-static/image/chp%3A10.1007%2F978-981-19-8338-2_26/MediaObjects/518611_1_En_26_Fig2_HTML.png?as=webp" alt="Img"><ul>
<li>从大脑图像中提取的深度特征被输入到设计的具有预训练特征的 CNN 模型中。**(GoogleNet)Inception-v2、Inception-V3、ResNet-18 [14]、ResNet-50 VGG-19 和 VGG-16 是本研究中使用的六个预训练 CNN 模型**。</li>
<li>最初，VGG-16 和 VGG-19 架构模型都将核磁共振成像脑图像作为输入。深度特征从网络的卷积层和最大池化层提取。随着深度的增加，分类误差也随之减少，直到达到 19 层时，分类误差才趋于饱和。研究人员还验证了深度在图形表示法中的重要性。</li>
<li>CNN performs better in larger datasets than the smaller ones. When it is not possible to produce a big training dataset, TL can be utilized.</li>
</ul>
</li>
<li>Conclusion: 具有 16 个网络层的 <strong>VGG-16</strong> 架构在将 MR 脑图像分类为肿瘤或正常图像方面提供了更高的准确度、精确度、F1 分数和召回率。</li>
</ul>
<h1 id="二者比较"><a href="#二者比较" class="headerlink" title="二者比较"></a>二者比较</h1><p>深度学习并没有完全取代影像组学。主要的原因还是数据集规模的限制。</p>
<p>深度学习能够大幅提高分类或预测模型的准确性，但这是有代价的。相比影像组学，深度学习方法需要更多的训练数据。但影像组学所研究的问题往往是某种肿瘤的分期或分型，或者是预后生存率，此类问题的训练数据（Grand Truth数据）收集成本是非常高昂的，一般需要病理或术后随访来进行验证。因此，训练数据集的规模通常数量级在几百，与深度学习常见的数千、上万级数据集相差很远。</p>
<p>可以采用深度学习中普遍采用的数据增强手段（Data Augmented）了。这在一定程度上弥补了数据缺口。而数据增强在传统的影像组学中是无法采用的。</p>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>影像组学</tag>
      </tags>
  </entry>
  <entry>
    <title>数值计算方法</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="误差"><a href="#误差" class="headerlink" title="误差"></a>误差</h2><ol>
<li>对于十字相乘法类的二次方程，如果两根相差过大，会发现<strong>求根公式</strong>算小根是错误的：或许结论推理也不能</li>
<li>如何运算精确度更高？</li>
</ol>
<h3 id="误差的来源"><a href="#误差的来源" class="headerlink" title="误差的来源"></a>误差的来源</h3><p><strong>知道误差来源属于哪一类</strong></p>
<ol>
<li>模型误差：分析方法近似造成的误差eg.物理中的理想化模型</li>
<li>观测误差：测量过程中不可消除的误差，与设备、方式有问题</li>
<li><strong>截断误差</strong>：数学计算方法中常见，主动的操作，可以保证计算最后的精度；数学中的“无穷”需要转化为计算机中的“有穷”；比如说无穷大化为一个极大数值，无穷小数转为多位的有限小数。表示为：<br>$$</li>
</ol>
<p>$$<br>    * 泰勒展开，级数展开<br>4. 舍入误差：计算机中由于数据类型的长度有限，在实际位数超过该长度时，<br>在本课误差估计中，假定数学模型合理，测定值精确，主要讨论<strong>截断误差和舍入误差</strong></p>
<h3 id="绝对误差、相对误差与有效数字"><a href="#绝对误差、相对误差与有效数字" class="headerlink" title="绝对误差、相对误差与有效数字"></a>绝对误差、相对误差与有效数字</h3><h4 id="绝对误差"><a href="#绝对误差" class="headerlink" title="绝对误差"></a>绝对误差</h4><p>$x^*$为准确值x的一个近似值，则称$x-x^*$为近似值$x^*$的绝对误差，简称误差，表示为$\epsilon$:<br>$$ \epsilon&#x3D;x-x^*$$<br>$|\epsilon|$的大小显示出近似值的准确程度，同一量的不同近似中，$|\epsilon|$越小，近似值准确度越高</p>
<h4 id="绝对误差限"><a href="#绝对误差限" class="headerlink" title="绝对误差限"></a>绝对误差限</h4><p>实践中无法确定x，但是可以确定<strong>误差绝对值</strong>的上限，从而确定准确值的范围，定义满足如下不等式的正数称为近似值的误差限：<br>$$ x^*-\epsilon \le x \le x^*+\epsilon $$<br>也可以表示为$x&#x3D;x^*\pm \epsilon$</p>
<h4 id="相对误差-epsilon"><a href="#相对误差-epsilon" class="headerlink" title="相对误差$\epsilon^*$"></a>相对误差$\epsilon^*$</h4><p>绝对误差与真值之比，称为<strong>近似值</strong>的相对误差（为了增强可操作性）<br>$$ \epsilon_r(x)&#x3D;\frac{\epsilon(x)}{x}&#x3D;\frac{x-x^*}{x} $$<br>    * 相对误差可以体现误差绝对大小与测量度相对大小关系，也就是说误差的绝对大小并不能决定精度<br>然而实际问题中x未知，因而常将近似值替换准确值来计算相对误差，衡量准确程度：<br>$$ \epsilon^*_r(x)&#x3D;\frac{\epsilon(x)}{x^*}&#x3D;\frac{x-x^*}{x^*} $$</p>
<h4 id="相对误差限"><a href="#相对误差限" class="headerlink" title="相对误差限"></a>相对误差限</h4><p>类似于绝对误差限，满足下列不等式的正数$\epsilon_r$为<strong>近似值</strong>的相对误差限<br>$$ \epsilon^*_r(x)&#x3D;|\frac{\epsilon(x)}{x^*}|&#x3D;|\frac{x-x^*}{x^*}| \le \epsilon_r $$</p>
<h4 id="有效数字"><a href="#有效数字" class="headerlink" title="有效数字"></a>有效数字</h4><p>近似值的误差限是其某一位上的<strong>半个单位</strong>时，称其“准确”到这意味，且从该位其到前面第一位<strong>非零数字</strong>为止<strong>所有数字</strong>都称为有效数字。<br>一般说，设有一个数x，其近似值的规格化形式为：<br>$$ x^*&#x3D;\pm0.\alpha_1\alpha_2···\alpha_n×10^m$$<br>其中$\alpha_n$是0~9的数字,$\alpha_1\ne0$，n是正整数，m是整数。</p>
<h4 id="绝对误差限-1"><a href="#绝对误差限-1" class="headerlink" title="绝对误差限"></a>绝对误差限</h4><p>若$x^*$的误差限为：<br>$$ |\epslion(x)&#x3D;|x-x^*|\ne\frac{1}{2}×10^{m-n} $$<br>则称$x^*$具有n位有效数字，或称其精确到$10^{m-n}$</p>
<div class="note info">
            <p><strong>注意</strong>：</p><ol><li>绝对误差有单位，相对误差由于做了除法是没有单位的，常用百分号表示</li><li>四舍五入时，绝对误差限不超过末位数的半个单位</li><li>有效数字：</li></ol><ul><li>203和0.203有效数字均为n&#x3D;3，只是m不同</li><li>为什么强调采用标准式写法：9000的有效数字位数不一定为4，我们无法确定这是测定准确结果还是仅将0用于占位</li></ul><ol start="4"><li>当计算有效数字位数和绝对误差限时，建议写作标准形式，写出m，n，套公式计算。</li></ol>
          </div>

<h3 id="有效数字与误差的关系"><a href="#有效数字与误差的关系" class="headerlink" title="有效数字与误差的关系"></a>有效数字与误差的关系</h3><p>相对误差回推有效数字；<br>$$ |\epsilon^*(x)|&#x3D;|frac{\epsilon(x)}{x^*}\lefrac{feac{1}{2}×10^{m-n}}{\alpha_1×10^{m-1}}&#x3D;frac{1}{2\alpha_1}×10^{-n+1} $$</p>
<h4 id="相对误差限-1"><a href="#相对误差限-1" class="headerlink" title="相对误差限"></a>相对误差限</h4><p>从相对误差限的定义式可知，有效数字的位数反映了近似值的相对精确度：<br>$$ \alpha_r&#x3D;frac{1}{2\alpha_1}×10^{-n+1} $$<br>当用相对误差表示时，如果相对误差能满足$$|\epsilon_r(x)| \le frac{1}{2(\alpha_1+1)}×10^{-n+1} $$<br>则$x^*$至少具有n位有效数字</p>
<h3 id="数值运算中应注意的几个原则"><a href="#数值运算中应注意的几个原则" class="headerlink" title="数值运算中应注意的几个原则"></a>数值运算中应注意的几个原则</h3><ol>
<li>选用数值稳定性好的算法</li>
</ol>
<ul>
<li>什么是稳定性好</li>
<li>如何判断一种算法具有良好的稳定性？<br> 假定数值具有初始误差$\epsilon_0$，中间不再产生新误差，考察由$\epsilon_0$引起的误差累计是否会增长，如果不增长则认为是稳定的，如果严重增长则认为不稳定</li>
<li>如果改变为一种正确的算法，或许相同的计算类型稳定性可以增强（比如说改变递推方式，可以得到越来越精确的值）</li>
<li>重要的是<strong>误差传递的方式</strong></li>
<li>可以通过误差传递方式由最后的误差倒退回误差初始值$\epsilon_0$</li>
</ul>
<ol start="2">
<li>避免两个（有效位数）相近的数相减（会严重消损有效数字）</li>
</ol>
<ul>
<li>在数值计算中两个相近的数相减会造成有效数字的严重损失，有一些好的解决方案：<ul>
<li>分母“无理化”</li>
<li>降幂公式逆运算$1-cosx&#x3D;s(sin(x&#x2F;2))^2$</li>
<li>$arctan\theta_1-arctan\theta_2 &#x3D; arctan(\frac{1}{\theta_1 \theta_2})$</li>
<li>x很小的时候泰勒展开计算$e^x$</li>
</ul>
</li>
<li><strong>总结</strong>：无法改变算式时，可采用增加有效数字位数进行运算（计算机上采用双精度计算，但是会增大时空开销）</li>
</ul>
<h3 id="有效数字的运算规则"><a href="#有效数字的运算规则" class="headerlink" title="有效数字的运算规则"></a>有效数字的运算规则</h3><ol>
<li>加减运算<ul>
<li>取舍以小数点后位数最少的数值为准</li>
<li>先<strong>按照小数点后位数最少的数据保留</strong>其他各数的位数，再进行加减计算，结果也应当使小数点后保留相同的位数</li>
</ul>
</li>
<li>乘除运算<ul>
<li>以<strong>有效数字最少</strong>的为准</li>
<li>先按有效数字最少的数据保留其他各数，再进行乘除运算，计算结果仍保留相同有效数字</li>
</ul>
</li>
<li>绝对值太小的不易做除数<ul>
<li>容易数据溢出</li>
<li>小数点后高位略有误差会有较大影响</li>
</ul>
</li>
<li>防止大数吃掉小数（Kahan算法，大数吃小数）<ul>
<li>字长有限，绝对值大小差距悬殊运算时容易出现</li>
<li>小数进行一定累计之后再参与运算</li>
</ul>
</li>
</ol>
<h1 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h1><p>是一种映射，并且有相类似的规范</p>
<h2 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h2><p>三角不等式中是矢量相加<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E8%8C%83%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%891.png" alt="Img"><br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E8%8C%83%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%892.png" alt="Img"><br>L2范数实际上是向量空间中的距离，无穷范数取最大值,p范数其实是其他特殊范数的一般形式；</p>
<h2 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a>矩阵范数</h2><p>相对于向量范数，多了相容性；<br>求范数之后成为标量；<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E8%8C%83%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%893.png" alt="Img"><br>根据向量的常用范数得到常用的矩阵范数：<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E8%8C%83%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%894.png" alt="Img"></p>
<ul>
<li>1范数：每列和的绝对值取最大值</li>
<li>无穷范数（行范数）：每行和的绝对值取最大值</li>
<li>2范数实际上是欧氏空间中对距离的测定，最常用；ATA的正负不需要考虑，一定为正；<br><img src="/./_Img/%E8%8C%83%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%895.png" alt="Img"><br>2范数实际上是ATA与谱半径积的平方根<br>单位矩阵任何范数都是1</li>
</ul>
<h3 id="扰动分析"><a href="#扰动分析" class="headerlink" title="扰动分析"></a>扰动分析</h3><h4 id="病态方程与良态方程"><a href="#病态方程与良态方程" class="headerlink" title="病态方程与良态方程"></a>病态方程与良态方程</h4><p>对于线性方程组Ax&#x3D;b，若系数矩阵A或常数项b的元素</p>
<h4 id="讨论：常数项与矩阵的扰动对方程组解的影响"><a href="#讨论：常数项与矩阵的扰动对方程组解的影响" class="headerlink" title="讨论：常数项与矩阵的扰动对方程组解的影响"></a>讨论：常数项与矩阵的扰动对方程组解的影响</h4><p>进行数据存在扰动时的误差分析，这里主要使用了矩阵范数的相容性性质，对于任何范数进行证明中的运算均成立</p>
<ol>
<li>常数项的扰动<br><img src="/./_Img/%E6%89%B0%E5%8A%A8%E7%A4%BA%E4%BE%8B.png" alt="Img"></li>
</ol>
<p>A二范数的条件数是A最大谱半径与最小谱半径商的平方根<br>根据A矩阵的条件数，可以确定解扰动的范围，体现了方程数据扰动对解相对误差的影响，初步判断是否病态。<br>其中A是扰动误差产生的核心，也是计算软件进行运算与否的重要依据之一</p>
<h1 id="线性方程直接求解"><a href="#线性方程直接求解" class="headerlink" title="线性方程直接求解"></a>线性方程直接求解</h1><p>两类解法：直接法与迭代法</p>
<h2 id="直接法"><a href="#直接法" class="headerlink" title="直接法"></a>直接法</h2><h3 id="高斯消去法"><a href="#高斯消去法" class="headerlink" title="高斯消去法"></a>高斯消去法</h3><p>先消元，即按一定的规律逐步消去未知量，将方程组化为等价的上三角形方程组；然后进行回代，即由上三角形方程组逐个求出每个未知数的解</p>
<h4 id="顺序高斯消去法"><a href="#顺序高斯消去法" class="headerlink" title="顺序高斯消去法"></a>顺序高斯消去法</h4><p>消元过程按方程和未知量的自然顺序进行：方程排列顺序，未知量位置顺序，类似于上三角形矩阵的变换；</p>
<ul>
<li>顺序高斯消元法的规则：<ul>
<li>依从左到右、自上而下的次序将主对角元下方的元素化为零。</li>
<li>不作行交换，也不用非零数乘某行。</li>
<li>第k列消元（将主对角元下方化零）时，将下面各行分别减去第k行的适当倍数，不作其他变换。</li>
</ul>
</li>
<li>即便是非奇异矩阵，也有可能是一整行都是0，或者出现一个较其他行相对较小系数，会造成严重的精度问题（数值稳定性差）</li>
<li>使用上角标$^($)表示迭代次数</li>
<li>行变换不会改变矩阵的非奇异性，理论上不会有某一行为0</li>
<li>消去过程的时间复杂度更高<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%A1%BA%E5%BA%8F%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%95%E7%9A%84%E6%AD%A5%E9%AA%A4.png" alt="Img"></li>
<li><strong>消元过程可以按顺序进行的充要条件？</strong><ul>
<li>$a_{kk}^{(k-1)}\ne0,k&#x3D;1,2···$</li>
</ul>
</li>
<li>递推<img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%A1%BA%E5%BA%8F%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%95%E7%9A%84%E6%AD%A5%E9%AA%A4.png" alt="Img"><br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%A1%BA%E5%BA%8F%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%95%E7%9A%84%E6%AD%A5%E9%AA%A42.png" alt="Img"></li>
</ul>
<p>定理要会用：对于方程组：</p>
<ul>
<li><strong>顺序消元过程能进行到底</strong>的充要条件是<strong>系数矩阵A的<em>顺序主子矩阵</em>Ak (k&#x3D;1,2,…,n-1)非奇异</strong>。</li>
<li>用<strong>顺序高斯消去法求解</strong>的充要条件是<strong>系数矩阵的一切顺序主子矩阵</strong>均非奇异。</li>
<li>一些小补充<blockquote>
<p>顺序高斯消去法求解和顺序消去可以进行到底有什么区别?<br>顺序高斯消去法（Sequential Gaussian Elimination）和顺序消元法（Sequential Elimination）都是线性代数中用于解决线性方程组的方法，但它们有一些区别。</p>
</blockquote>
</li>
</ul>
<ol>
<li><strong>顺序高斯消去法（Sequential Gaussian Elimination）</strong>：<ul>
<li>这是高斯消元法的一种变体，通过一系列的行变换将方程组化为上三角形式，然后通过回代求解方程组。在顺序高斯消去法中，通常会按顺序处理每一行，逐步进行消元操作。</li>
<li>顺序高斯消去法通常用于解决稠密的线性方程组，因为它需要进行大量的矩阵操作。</li>
<li>它的计算复杂度为 O(n^3)，其中 n 是方程组的大小。</li>
</ul>
</li>
<li><strong>顺序消元法（Sequential Elimination）</strong>：<ul>
<li>顺序消元法也是一种线性方程组求解方法，但不同于高斯消元法，它更侧重于直接消去变量而不是通过矩阵操作。</li>
<li>在顺序消元法中，可以按照任意顺序依次消去方程组中的变量，并解出剩余的变量。通常采用的顺序是从第一个变量开始，逐步向后推进。</li>
<li>顺序消元法通常适用于稀疏的线性方程组，因为它的操作更侧重于变量之间的消去，而不是整个矩阵的操作。</li>
<li>它的计算复杂度取决于消元的顺序，通常为 O(n^2) 到 O(n^3)。</li>
</ul>
</li>
</ol>
<p>因此，两种方法的主要区别在于其操作的对象和计算复杂度。顺序高斯消去法更侧重于矩阵操作，适用于稠密的线性方程组，而顺序消元法更侧重于变量之间的消去，适用于稀疏的线性方程组。</p>
<h4 id="选主元高斯消去法"><a href="#选主元高斯消去法" class="headerlink" title="选主元高斯消去法"></a>选主元高斯消去法</h4><p><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%A1%BA%E5%BA%8F%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%95%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%88%86%E6%9E%90.png" alt="Img"></p>
<ul>
<li><p>基本思想：每次消元前<strong>按一定的范围</strong>选取<strong>绝对值最大</strong>的元素作为主元素。以便减少舍入误差的影响。</p>
<ul>
<li>主要有列主元高斯消去法和全主元高斯消去法.一般只使用行交换进行消去，可以降低复杂度</li>
<li>只要detA≠０，就必能找到k行以下该列某不为0的元素</li>
<li>若r&gt;k 则交换第k行和第r行，然后进行消元。<ul>
<li>意思就是谁大把谁放入当前操作行作为保留元素</li>
</ul>
</li>
<li>不影响x，只是对排序调整<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%80%89%E4%B8%BB%E5%85%83%E7%BB%83%E4%B9%A0.png" alt="Img"><br>最后得方程组，有-1，1，5<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%80%89%E4%B8%BB%E5%85%83%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%951.png" alt="Img"><br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%80%89%E4%B8%BB%E5%85%83%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%952.png" alt="Img"></li>
</ul>
</li>
<li><p>一般使用列主元就已经足够</p>
</li>
<li><p><strong>进阶的选主元消去</strong></p>
<ul>
<li><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E5%AF%B9%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%B4%E6%98%8E.png" alt="对算法的说明"></li>
<li>运算量：$\frac{n^3}{3}$(计算机中做乘除运算的时间远远超过做加减运算时间，故我们只估计 <em>乘除运算</em> 的次数)</li>
</ul>
</li>
<li><p>Gauss-Jordan消去法<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%AB%98%E6%96%AF%E7%BA%A6%E5%BD%93%E6%B6%88%E5%8E%BB%E6%B3%951.png" alt="Img"><br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E9%AB%98%E6%96%AF%E7%BA%A6%E5%BD%93%E6%B6%88%E5%8E%BB%E6%B3%952.png" alt="Img"></p>
<blockquote>
<p>用途<br>高斯约当消去法（Gauss-Jordan elimination）是高斯消去法的一种改进形式，用于求解线性方程组并求解矩阵的逆。与高斯消去法不同，高斯约当消去法一次性将矩阵化为阶梯形式，并最终化为单位矩阵。因此，它能够同时解决线性方程组和求解逆矩阵的问题。<br>高斯约当消去法的主要用途包括：</p>
</blockquote>
<ol>
<li><strong>求解线性方程组</strong>：通过高斯约当消去法，可以将线性方程组的系数矩阵化为阶梯形式，并最终化为单位矩阵。这使得方程组的解可以直接从化简后的矩阵中读取。</li>
<li><strong>求解逆矩阵</strong>：在高斯约当消去法中，将待求的矩阵与单位矩阵连接在一起，通过一系列的行变换将待求矩阵化为单位矩阵，同时单位矩阵也会变为原矩阵的逆。因此，高斯约当消去法也可用于求解矩阵的逆。</li>
<li><strong>求解行列式</strong>：通过高斯约当消去法，可以化简原矩阵为上三角形式，从而可以直接计算矩阵的行列式。<br>总之，高斯约当消去法是一种功能强大的方法，可以同时解决线性方程组、求解逆矩阵以及计算行列式等问题。</li>
</ol>
</li>
</ul>
<p>求方程解的例子</p>
<blockquote>
<p>考虑以下线性方程组：<br>[<br>\begin{cases}<br>2x + 3y - z &#x3D; 7 \<br>3x + y + 2z &#x3D; 5 \<br>x - 2y + z &#x3D; -1<br>\end{cases}<br>]<br>可以将这个线性方程组表示为增广矩阵形式：<br>[<br>\left[\begin{array}{ccc|c}<br>2 &amp; 3 &amp; -1 &amp; 7 \<br>3 &amp; 1 &amp; 2 &amp; 5 \<br>1 &amp; -2 &amp; 1 &amp; -1<br>\end{array}\right]<br>]<br>现在，我们将通过高斯约当消元法将这个增广矩阵化简为阶梯形式。然后，从阶梯形式中读取方程组的解。<br>    1. <strong>第一步</strong>：将第一行第一个元素（主元素）变为 1，同时使用第一行的主元素消去其他行的对应元素。<br>[<br>\left[\begin{array}{ccc|c}<br>1 &amp; \frac{3}{2} &amp; -\frac{1}{2} &amp; \frac{7}{2} \<br>3 &amp; 1 &amp; 2 &amp; 5 \<br>1 &amp; -2 &amp; 1 &amp; -1<br>\end{array}\right]<br>]<br>    2. <strong>第二步</strong>：使用第一行的第一个元素将第二行的第一个元素变为 0，并将第三行的第一个元素变为 0。<br>[<br>\left[\begin{array}{ccc|c}<br>1 &amp; \frac{3}{2} &amp; -\frac{1}{2} &amp; \frac{7}{2} \<br>0 &amp; -\frac{7}{2} &amp; \frac{7}{2} &amp; -\frac{11}{2} \<br>0 &amp; -\frac{7}{2} &amp; \frac{3}{2} &amp; -\frac{9}{2}<br>\end{array}\right]<br>]<br>    3. <strong>第三步</strong>：将第二行第二个元素（主元素）变为 1，并使用第二行的主元素消去第一行和第三行的对应元素。<br>[<br>\left[\begin{array}{ccc|c}<br>1 &amp; \frac{3}{2} &amp; -\frac{1}{2} &amp; \frac{7}{2} \<br>0 &amp; 1 &amp; -1 &amp; 1 \<br>0 &amp; -\frac{7}{2} &amp; \frac{3}{2} &amp; -\frac{9}{2}<br>\end{array}\right]<br>]<br>    4. <strong>第四步</strong>：使用第二行的第二个元素将第一行的第二个元素变为 0，并使用第二行的第二个元素将第三行的第二个元素变为 0。<br>[<br>\left[\begin{array}{ccc|c}<br>1 &amp; 0 &amp; 1 &amp; 3 \<br>0 &amp; 1 &amp; -1 &amp; 1 \<br>0 &amp; 0 &amp; 2 &amp; 4<br>\end{array}\right]<br>]<br>    5. <strong>第五步</strong>：将第三行的第三个元素（主元素）变为 1，并使用第三行的主元素消去第一行和第二行的对应元素。<br>[<br>\left[\begin{array}{ccc|c}<br>1 &amp; 0 &amp; 0 &amp; 1 \<br>0 &amp; 1 &amp; 0 &amp; 2 \<br>0 &amp; 0 &amp; 1 &amp; 2<br>\end{array}\right]<br>]<br>现在，我们得到了阶梯形式的增广矩阵。根据阶梯形式，我们可以直接读出方程组的解：<br>[<br>\begin{cases}<br>x &#x3D; 1 \<br>y &#x3D; 2 \<br>z &#x3D; 2<br>\end{cases}<br>]<br>这就是线性方程组的解，通过高斯约当消元法得到。</p>
</blockquote>
<h4 id="重点-小结"><a href="#重点-小结" class="headerlink" title="重点&amp;小结"></a><strong>重点&amp;小结</strong></h4><p><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/4.1%E5%B0%8F%E7%BB%93.png" alt="Img"></p>
<ol>
<li><p>解线性方程组Gauss消去法的计算程序如何实现？可以进行Gauss消去法的条件是什么？</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gauss_elimination</span>(<span class="params">A, b</span>):</span><br><span class="line">    n = len(A)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 合并增广矩阵</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        A[i].append(b[i])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 消元过程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="comment"># 首先找到主元素所在行</span></span><br><span class="line">        max_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> abs(A[j][i]) &gt; abs(A[max_index][i]):</span><br><span class="line">                max_index = j</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将主元素所在行交换至当前行</span></span><br><span class="line">        A[i], A[max_index] = A[max_index], A[i]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将当前主元素所在列的其他元素消为0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, n):</span><br><span class="line">            factor = A[j][i] / A[i][i]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, n + <span class="number">1</span>):</span><br><span class="line">                A[j][k] -= factor * A[i][k]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回代求解</span></span><br><span class="line">    x = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        x[i] = A[i][n] / A[i][i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">            A[j][n] -= A[j][i] * x[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">A = [[<span class="number">2</span>, <span class="number">1</span>, -<span class="number">1</span>],</span><br><span class="line">     [-<span class="number">3</span>, -<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">     [-<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = [<span class="number">8</span>, -<span class="number">11</span>, -<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">solution = gauss_elimination(A, b)</span><br><span class="line">print(<span class="string">&quot;Solution:&quot;</span>, solution)</span><br></pre></td></tr></table></figure>
<p>Gauss 消去法可以应用于求解线性方程组的条件包括：</p>
</li>
<li><p><strong>方程组的系数矩阵是一个非奇异矩阵</strong>：这意味着方程组的系数矩阵的行列式不为零。非奇异矩阵保证了方程组有唯一解。</p>
</li>
<li><p>方程组的系数矩阵是一个方阵：Gauss 消去法通常应用于求解方阵形式的线性方程组。如果方程组的系数矩阵不是方阵，那么方程组可能有无穷解或者无解。</p>
</li>
<li><p>可以<strong>按顺序进行消去</strong>的充要条件：<strong>主对角线元素不为零</strong>：Gauss 消去法在进行消元的过程中会涉及到主对角线元素的除法操作，因此要求主对角线元素不为零，避免除以零的情况。</p>
</li>
<li><p>方程组的条件数较小：条件数反映了方程组的稳定性，较小的条件数意味着方程组求解的稳定性较高，更容易得到准确的解。高条件数可能导致数值不稳定性和舍入误差的累积。</p>
</li>
<li><p>解线性方程组列主元Gauss消去法的计算程序如何实现？可以进行列主元Gauss消去法的条件是什么？<br>条件同上；顺序消元过程进行到底&amp;高斯消去法求解&lt;-&gt;系数矩阵一切<strong>顺序主子矩阵</strong>均非奇异</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">swap_rows</span>(<span class="params">A, i, j</span>):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;交换矩阵的两行&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    A[i], A[j] = A[j], A[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gauss_elimination</span>(<span class="params">A, b</span>):</span><br><span class="line">    n = len(A)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 合并增广矩阵</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        A[i].append(b[i])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 消元过程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="comment"># 在当前列中找到绝对值最大的元素所在的行</span></span><br><span class="line">        max_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> abs(A[j][i]) &gt; abs(A[max_index][i]):</span><br><span class="line">                max_index = j</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将找到的主元素所在行交换至当前行</span></span><br><span class="line">        swap_rows(A, i, max_index)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将当前主元素所在列的其他元素消为0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, n):</span><br><span class="line">            factor = A[j][i] / A[i][i]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, n + <span class="number">1</span>):</span><br><span class="line">                A[j][k] -= factor * A[i][k]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回代求解</span></span><br><span class="line">    x = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        x[i] = A[i][n] / A[i][i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">            A[j][n] -= A[j][i] * x[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">A = [[<span class="number">2</span>, <span class="number">1</span>, -<span class="number">1</span>],</span><br><span class="line">     [-<span class="number">3</span>, -<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">     [-<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = [<span class="number">8</span>, -<span class="number">11</span>, -<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">solution = gauss_elimination(A, b)</span><br><span class="line">print(<span class="string">&quot;Solution:&quot;</span>, solution)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Gauss消去法的计算复杂度是？<br>$O(n^3)$，其中 n 是方程组的未知数个数。</p>
</li>
</ol>
<h3 id="直接三角分解法"><a href="#直接三角分解法" class="headerlink" title="直接三角分解法"></a>直接三角分解法</h3><p>对于方程组AX&#x3D;b，只要对系数矩阵作了三角分解A&#x3D;LU，就可以很容易地求出线性方程的解。<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/%E4%B8%89%E8%A7%92%E5%88%86%E8%A7%A3%E6%B3%95%E4%B8%8EDOO.png" alt="Img"></p>
<ul>
<li>A的行列式就是U的行列式:<br>$$ A_k&#x3D;L_kU_k,detA_k&#x3D;detU_k&#x3D;\prod^k_{i&#x3D;1} a^{(i-1)}_{ii} $$</li>
</ul>
<h4 id="会计算Dolittle（4，5）"><a href="#会计算Dolittle（4，5）" class="headerlink" title="会计算Dolittle（4，5）"></a>会计算Dolittle（4，5）</h4><p>核心：使用尽可能少的计算量写出非零数：通过矩阵乘法规则可以推出来A在LU上的“映射”，每行依次进行，先行后列，可以直接把LU中的非0数写出来<br><strong>步骤如下</strong>：</p>
<ul>
<li>L矩阵对角线元素全为1，U矩阵第一行元素与A第一行相同</li>
<li>取k&#x3D;1,2,…,n.依次计算k行U和k列L<ul>
<li>$a_ij$ &#x3D; Li行*Uj列,按这个来列方程解值<br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/do1.png" alt="Img"></li>
</ul>
</li>
<li><strong>求解方程组Ax＝b 的Doolittle 三角分解方法,包括分解和回代两步。</strong><br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/do2.png" alt="Img"><br><img src="/./_Img/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.assets/do3.png" alt="Img"></li>
</ul>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>学点</category>
      </categories>
  </entry>
  <entry>
    <title>coding_records</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/coding-records/</url>
    <content><![CDATA[<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="35-搜索插入位置（升序不重复）"><a href="#35-搜索插入位置（升序不重复）" class="headerlink" title="35. 搜索插入位置（升序不重复）"></a>35. 搜索插入位置（升序不重复）</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<ul>
<li>建议可以复刻一下算法过程，实际上当target &lt; nums[mid] 时，返回值并不需要-1</li>
<li><strong><code>.size()</code>返回的是长度，要-1！</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int l=<span class="number">0</span>, r=nums.size()-<span class="number">1</span>;    <span class="regexp">//</span>注意size()</span><br><span class="line">        int flag = <span class="number">0</span>;</span><br><span class="line">        int mid = (l+r) /<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;=r) mid = (l+r) /<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid; <span class="regexp">//</span>就是这里！画图复现一边代码就能看出来这里不-<span class="number">1</span>！</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="34-搜索指定数的重复区间（上下界bysearch）"><a href="#34-搜索指定数的重复区间（上下界bysearch）" class="headerlink" title="34. 搜索指定数的重复区间（上下界bysearch）"></a>34. 搜索指定数的重复区间（上下界bysearch）</h3><h4 id="常规二分（两遍时间复杂度不变）"><a href="#常规二分（两遍时间复杂度不变）" class="headerlink" title="常规二分（两遍时间复杂度不变）"></a>常规二分（两遍时间复杂度不变）</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int l = <span class="number">0</span>,r = nums.size()-<span class="number">1</span>;</span><br><span class="line">        int mid1 = (l+r) / <span class="number">2</span>;</span><br><span class="line">        int mid2 = (l+r) / <span class="number">2</span>;</span><br><span class="line">        int f = <span class="number">0</span>,ans1,ans2;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid1] == target) ans1 = mid1,f=<span class="number">1</span>;   <span class="regexp">//</span>需要判定区间边界是否要包含在内</span><br><span class="line">            <span class="keyword">if</span>( nums[mid1] &gt;= target)</span><br><span class="line">                r = mid1 -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid1 + <span class="number">1</span>;</span><br><span class="line">            mid1 = (l+r) /<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l = <span class="number">0</span>,r = nums.size()-<span class="number">1</span>;    <span class="regexp">//</span>重复使用变量需要初始化</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid2]==target)</span><br><span class="line">                ans2 = mid2;</span><br><span class="line">            <span class="keyword">if</span>( nums[mid2] &lt;= target)</span><br><span class="line">                l = mid2 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid2 -<span class="number">1</span>;</span><br><span class="line">            mid2 = (l+r) /<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">1</span>)              /<span class="regexp">/不知道为啥这里判定就是会报错。。</span></span><br><span class="line"><span class="regexp">            return &#123;ans1, ans2&#125;;</span></span><br><span class="line"><span class="regexp">        return &#123;-1,-1&#125;;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>
<h4 id="bysearch解法"><a href="#bysearch解法" class="headerlink" title="bysearch解法"></a>bysearch解法</h4><p>思路：找到一个大于等于target的最小下标，再找一个大于target的最小下标</p>
<ul>
<li>把不一样的问题整理成一样的问题可以减少代码量<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123; </span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int binarySearch(vector&lt;int&gt;&amp; nums, int target, bool type)&#123;</span><br><span class="line">        <span class="regexp">//bool</span>用来判断是大于等于还是大于,type=<span class="number">1</span>时筛选大于等于</span><br><span class="line">        int l = <span class="number">0</span>,r = nums.size()-<span class="number">1</span>,ans=-<span class="number">1</span>;</span><br><span class="line">        int mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target) ans=mid;<span class="regexp">//mid</span>是一个中间量，需要ans来记录符合条件的值</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target |<span class="params"></span>| (type &amp;&amp; nums[mid] &gt;= target))&#123;</span><br><span class="line">                r = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                l = mid +<span class="number">1</span>;</span><br><span class="line">            mid =(l+r)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  ans;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int left = binarySearch(nums,target,<span class="number">1</span>);</span><br><span class="line">        int right = binarySearch(nums,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;left,right&#125;; <span class="regexp">//vector</span>类型的返回方式</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> &#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="977-有序数组的平方（双指针）"><a href="#977-有序数组的平方（双指针）" class="headerlink" title="977.有序数组的平方（双指针）"></a>977.有序数组的平方（双指针）</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int l = <span class="number">0</span>, r = nums.size()-<span class="number">1</span>;</span><br><span class="line">        vector&lt;int&gt; ans(nums.size());</span><br><span class="line">        int i = nums.size()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            int res1 = nums[l]*nums[l];</span><br><span class="line">            int res2 = nums[r]*nums[r];</span><br><span class="line">            <span class="keyword">if</span>(res1 &gt; res2)&#123;</span><br><span class="line">                ans[i] = res1;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans[i]=res2;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><h4 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int result = <span class="variable constant_">INT32_MAX</span>;</span><br><span class="line">        int sum = <span class="number">0</span>; <span class="regexp">//</span> 滑动窗口数值之和</span><br><span class="line">        int i = <span class="number">0</span>; <span class="regexp">//</span> 滑动窗口起始位置</span><br><span class="line">        int subLength = <span class="number">0</span>; <span class="regexp">//</span> 滑动窗口的长度</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; nums.size(); j++) &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="regexp">//</span> 注意这里使用<span class="keyword">while</span>，每次更新 i（起始位置），并不断比较子序列是否符合条件</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">                subLength = (j - i + <span class="number">1</span>); <span class="regexp">//</span> 取子序列的长度</span><br><span class="line">                result = result &lt; subLength ? result : subLength;</span><br><span class="line">                sum -= nums[i++]; <span class="regexp">//</span> 这里体现出滑动窗口的精髓之处，不断变更i（子序列的起始位置）</span><br><span class="line">                /<span class="regexp">/先减随后i自加</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line"><span class="regexp">        return result == INT32_MAX ? 0 : result;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>
<h5 id="一个我写的的代码"><a href="#一个我写的的代码" class="headerlink" title="一个我写的的代码"></a>一个我写的的代码</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int i=<span class="number">0</span>,ans=<span class="number">100001</span>;</span><br><span class="line">        int sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;nums.size();j++)&#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target &amp;&amp; i&lt;=j)&#123;</span><br><span class="line">                int count = j-i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(ans&gt;count) ans=count; <span class="regexp">//</span>注意先判定更新ans再操作</span><br><span class="line">                sum -= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">100001</span>) ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438.找到字符串中所有字母异位词"></a>438.找到字符串中所有字母异位词</h4><h5 id="啊啊啊啊啊啊啊啊啊啊啊啊为什么不对啊啊啊啊啊啊啊啊啊啊啊啊"><a href="#啊啊啊啊啊啊啊啊啊啊啊啊为什么不对啊啊啊啊啊啊啊啊啊啊啊啊" class="headerlink" title="啊啊啊啊啊啊啊啊啊啊啊啊为什么不对啊啊啊啊啊啊啊啊啊啊啊啊"></a>啊啊啊啊啊啊啊啊啊啊啊啊为什么不对啊啊啊啊啊啊啊啊啊啊啊啊</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    vector&lt;int&gt; findAnagrams(string s, string p) &#123;</span><br><span class="line">        int m=s.length(),n=p.length();</span><br><span class="line">        int pp=<span class="number">0</span>;</span><br><span class="line">        vector&lt;int&gt; ans;</span><br><span class="line">        <span class="keyword">while</span>(pp&lt;(m-n))&#123;</span><br><span class="line">            int a[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;,flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">                a[p[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(int i=pp;i&lt;pp+n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                a[p[i]]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]!=<span class="number">0</span>) &#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                ans.push_back(pp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="904-水果成篮-好难捏"><a href="#904-水果成篮-好难捏" class="headerlink" title="904.水果成篮(好难捏)"></a><strong>904.<a href="https://leetcode.cn/problems/fruit-into-baskets/description/">水果成篮(好难捏)</a></strong></h4><h5 id="官方解"><a href="#官方解" class="headerlink" title="官方解"></a>官方解</h5><p>我们可以使用滑动窗口解决本题，$\textit{left}$ 和 $\textit{right}$ 分别表示满足要求的窗口的左右边界，同时我们使用哈希表存储这个窗口内的数以及出现的次数。</p>
<p>我们每次将 right\textit{right}right 移动一个位置，并将 fruits[right]$\textit{fruits}$[$\textit{right}$]fruits[right] 加入哈希表。如果此时哈希表不满足要求（即哈希表中出现超过两个键值对），那么我们需要不断移动 left\textit{left}left，并将 $fruits[left]\textit{fruits}[\textit{left}]fruits[left]$ 从哈希表中移除，直到哈希表满足要求为止。</p>
<p>需要注意的是，将 $fruits[left]\textit{fruits}[\textit{left}]fruits[left]$ 从哈希表中移除后，如果 $fruits[left]\textit{fruits}[\textit{left}]fruits[left]$ 在哈希表中的出现次数减少为 000，需要将对应的键值对从哈希表中移除。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int totalFruit(vector&lt;int&gt;&amp; fruits) &#123;</span><br><span class="line">        int n = fruits.size();</span><br><span class="line">        unordered_map&lt;int, int&gt; cnt;</span><br><span class="line"></span><br><span class="line">        int left = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (int right = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">            ++cnt[fruits[right]];</span><br><span class="line">            <span class="keyword">while</span> (cnt.size() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                auto it = cnt.find(fruits[left]);</span><br><span class="line">                --it-&gt;second;</span><br><span class="line">                <span class="keyword">if</span> (it-&gt;second == <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt.erase(it);</span><br><span class="line">                &#125;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：<span class="symbol">https:</span>/<span class="regexp">/leetcode.cn/problems</span><span class="regexp">/fruit-into-baskets/solutions</span><span class="regexp">/1893352/shui</span>-guo-cheng-lan-by-leetcode-solution-1uyu/</span><br><span class="line">来源：力扣（<span class="title class_">LeetCode</span>）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<h5 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h5><p>无注释版</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int totalFruit(vector&lt;int&gt;&amp; fruits) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fruits.size()&lt;<span class="number">3</span>) <span class="keyword">return</span> fruits.size();</span><br><span class="line">        int mn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>,f1=<span class="number">0</span>,f2=<span class="number">0</span>,t=<span class="number">0</span>;j&lt;fruits.size();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fruits[j]!=fruits[f1]&amp;&amp;fruits[j]!=fruits[f2])&#123;</span><br><span class="line">                <span class="keyword">if</span>(f1!=f2) f1=t;</span><br><span class="line">                f2=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fruits[t]!=fruits[j]) t=j;</span><br><span class="line">            mn=mn&gt;(j-f1+<span class="number">1</span>)<span class="string">?m</span><span class="symbol">n:</span>(j-f1+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有注释版</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int totalFruit(vector&lt;int&gt;&amp; fruits) &#123;</span><br><span class="line">        <span class="regexp">//</span>当fruits数组长度≤<span class="number">2</span>，则直接返回fruits数组长度</span><br><span class="line">        <span class="keyword">if</span>(fruits.size()&lt;<span class="number">3</span>) <span class="keyword">return</span> fruits.size();</span><br><span class="line"><span class="regexp">//ans</span>为结果，即fruits数组中包含两个不同水果类型的最大子序列长度</span><br><span class="line">        int ans=<span class="number">0</span>;</span><br><span class="line"><span class="regexp">/*j为遍历fruits数组的指针，也是滑动窗口的右边界，f1,f2分别为第一个和第二个篮子</span></span><br><span class="line"><span class="regexp">的起始索引，f1同时也是滑动窗口的左边界，t为未来两个篮子里的第一个篮子的起始索</span></span><br><span class="line"><span class="regexp">引*/</span></span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>,f1=<span class="number">0</span>,f2=<span class="number">0</span>,t=<span class="number">0</span>;j&lt;fruits.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="regexp">/*当f1=f2时，fruits[j]!=fruits[f1]&amp;&amp;fruits[j]!=fruits[f2]说明遇到的是第二个篮子</span></span><br><span class="line"><span class="regexp">要装的第二种水果；当f1!=f2时，fruits[j]!=fruits[f1]&amp;&amp;fruits[j]!=fruits[f2]说明</span></span><br><span class="line"><span class="regexp">遇到的是第三种水果*/</span></span><br><span class="line">            <span class="keyword">if</span>(fruits[j]!=fruits[f1]&amp;&amp;fruits[j]!=fruits[f2])</span><br><span class="line">            &#123;</span><br><span class="line"><span class="regexp">/*当f1=f2时，说明第一个篮子已经装了一种水果，第二个篮子里还没有装，不更新f1，</span></span><br><span class="line"><span class="regexp">只更新f2，即往第二个篮子里装第二种水果；</span></span><br><span class="line"><span class="regexp">当f1!=f2时，fruits[j]!=fruits[f1]&amp;&amp;fruits[j]!=fruits[f2]说明遇到的是第三种水果，</span></span><br><span class="line"><span class="regexp">则更新f1和f2，即当前两个篮子的两种水果已装满，更新f1和f2为未来两个篮子里的两种</span></span><br><span class="line"><span class="regexp">水果*/</span></span><br><span class="line">                <span class="keyword">if</span>(f1!=f2) f1=t;</span><br><span class="line">                f2=j;</span><br><span class="line">            &#125;</span><br><span class="line">/*t寻找未来两个篮子中第一个篮子要装的一种水果的起始索引，每次t与当前的j作对比，</span><br><span class="line">当fruits[t]!=fruits[j]时，更新t=j*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            if(fruits[t]!=fruits[j]) t=j;</span></span><br><span class="line"><span class="regexp">/</span>*更新当前子序列的长度，即每次计算装入两个篮子中的水果总数目*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            ans=ans&gt;(j-f1+1)?mn:(j-f1+1);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return ans;/</span><span class="regexp">/返回最终结果ans</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>
<h5 id="一个部分错误的代码"><a href="#一个部分错误的代码" class="headerlink" title="一个部分错误的代码"></a>一个部分错误的代码</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    int totalFruit(vector&lt;int&gt;&amp; fruits) &#123;</span><br><span class="line">        int tr1,tr2,i=<span class="number">0</span>;</span><br><span class="line">        int ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;fruits.size();j++)&#123;</span><br><span class="line">            int count=<span class="number">1</span>;</span><br><span class="line">		    tr1 = fruits[i]; </span><br><span class="line">		    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(fruits[j]!=tr1)&#123;</span><br><span class="line">                    count++;<span class="regexp">//</span>用两个数表示两个果很容易错</span><br><span class="line">                    <span class="keyword">if</span>(count == <span class="number">2</span>) </span><br><span class="line">                        tr2 = fruits[j];</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(fruits[j]!=tr2)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==fruits.size()-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                j++;</span><br><span class="line">		    &#125;</span><br><span class="line">        int length = j-i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(length&gt;ans) </span><br><span class="line">            ans=length;</span><br><span class="line">        i++;    <span class="regexp">//j</span>在到达最后一位时自动退出循环了，但是有可能j不动i后移一位时会得到最长</span><br><span class="line">                /<span class="regexp">/这个故事告诉我们要在while窗口中更新i</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    return ans;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>
<h3 id="76-最小覆盖字串"><a href="#76-最小覆盖字串" class="headerlink" title="76.最小覆盖字串"></a>76.<a href="https://leetcode.cn/problems/minimum-window-substring/">最小覆盖字串</a></h3><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>判断集合中某个元素存在性</p>
<h2 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49.字母异位词分组"></a>49.<a href="https://leetcode.cn/problems/group-anagrams/description/">字母异位词分组</a></h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (string&amp; <span class="symbol">str:</span> strs) &#123;</span><br><span class="line">            string key = str;</span><br><span class="line">            sort(key.<span class="keyword">begin</span>(),key.<span class="keyword">end</span>());</span><br><span class="line">            mp[key].emplace_back(str);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt;ans;</span><br><span class="line">        <span class="keyword">for</span>(auto it=mp.<span class="keyword">begin</span>();it!=mp.<span class="keyword">end</span>();++it)&#123;</span><br><span class="line">            ans.emplace_back(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="438-找到字符串中所有的字母异位词"><a href="#438-找到字符串中所有的字母异位词" class="headerlink" title="438. 找到字符串中所有的字母异位词"></a>438. <a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/description/">找到字符串中所有的字母异位词</a></h2><h3 id="啊啊啊啊啊改了无数次"><a href="#啊啊啊啊啊改了无数次" class="headerlink" title="啊啊啊啊啊改了无数次"></a>啊啊啊啊啊改了无数次</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    vector&lt;int&gt; findAnagrams(string s, string p) &#123;</span><br><span class="line">        int m=s.size(),n=p.size();</span><br><span class="line">        int pp=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line">        vector&lt;int&gt; ans;</span><br><span class="line">        <span class="keyword">while</span>(pp&lt;(m-n+<span class="number">1</span>))&#123;  <span class="regexp">//</span>都是循环条件没找好</span><br><span class="line">            int a[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;,flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                a[p[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(int i=pp;i&lt;pp+n;i++)&#123;</span><br><span class="line">                a[s[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]!=<span class="number">0</span>) &#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                ans.push_back(pp);</span><br><span class="line">            &#125;</span><br><span class="line">            pp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h1><p>##循环</p>
<h3 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h3><ol>
<li>循环不变量，区间左右开闭的选择守恒</li>
<li>注意边界限定，以及lr同时赋begin值</li>
<li>如果n为奇数的话，需要单独给矩阵最中间的位置赋值<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; generateMatrix(int n) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; a(n, vector&lt;int&gt;(n, <span class="number">0</span>));    <span class="regexp">//</span> vector类型创建方法</span><br><span class="line">        int l=<span class="number">0</span>,r=<span class="number">0</span>,i=<span class="number">1</span>;</span><br><span class="line">        int <span class="keyword">begin</span>=<span class="number">0</span>,<span class="keyword">end</span>=n-<span class="number">1</span>;    <span class="regexp">//</span></span><br><span class="line">        int loop=n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(loop--)&#123;  <span class="regexp">//</span></span><br><span class="line">            l=<span class="keyword">begin</span>,r=<span class="keyword">begin</span>;    <span class="regexp">//</span></span><br><span class="line">            <span class="keyword">for</span>(;r&lt;<span class="keyword">end</span>;r++)&#123;</span><br><span class="line">                a[l][r] = i;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;l&lt;<span class="keyword">end</span>;l++)&#123;</span><br><span class="line">                a[l][r] = i;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;r&gt;<span class="keyword">begin</span>;r--)&#123;</span><br><span class="line">                a[l][r] = i;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;l&gt;<span class="keyword">begin</span>;l--)&#123;</span><br><span class="line">                a[l][r] = i;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">begin</span>++;</span><br><span class="line">            <span class="keyword">end</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        int mid=n/<span class="number">2</span>;    </span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;    <span class="regexp">//</span></span><br><span class="line">            a[mid][mid] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
  </entry>
  <entry>
    <title>降维学习与度量学习</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/%E9%99%8D%E7%BB%B4%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%A6%E9%87%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="流形学习"><a href="#流形学习" class="headerlink" title="流形学习"></a>流形学习</h2><h3 id="代码总结"><a href="#代码总结" class="headerlink" title="代码总结"></a>代码总结</h3>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>pyQt5一步到位笔记</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/QtDesigner/</url>
    <content><![CDATA[<h1 id="QtDesiner的安装与配置"><a href="#QtDesiner的安装与配置" class="headerlink" title="QtDesiner的安装与配置"></a>QtDesiner的安装与配置</h1><h2 id="pyuic自动生成代码运行大法"><a href="#pyuic自动生成代码运行大法" class="headerlink" title="pyuic自动生成代码运行大法"></a>pyuic自动生成代码运行大法</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ui</span>_Dialog(<span class="title class_">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span>, parent=<span class="title class_">None</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>(<span class="title class_">Ui</span>_Dialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.showDialog(<span class="variable language_">self</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showDialog</span>(<span class="params"><span class="variable language_">self</span>, <span class="title class_">Dialog</span></span>)<span class="symbol">:</span></span><br></pre></td></tr></table></figure>
<h2 id="动态加载已保存的界面"><a href="#动态加载已保存的界面" class="headerlink" title="动态加载已保存的界面"></a>动态加载已保存的界面</h2><p>注意只有designer中已经保存的界面加载时才会更新</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainForm</span>(<span class="title class_">QMainWindow</span>, <span class="title class_">Ui</span>_MainWindow):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.ui = uic.loadUi(<span class="string">&quot;new_UI_full.ui&quot;</span>,<span class="variable language_">self</span>)</span><br></pre></td></tr></table></figure>
<p>对于显示，运行操作，写在main函数里！<br>属性调用：<br><code>self.ui.pushButton.clicked.connect(self.bindButton)</code></p>
<h1 id="槽函数与连接"><a href="#槽函数与连接" class="headerlink" title="槽函数与连接"></a>槽函数与连接</h1><h2 id="注意事项（未解决）"><a href="#注意事项（未解决）" class="headerlink" title="注意事项（未解决）"></a>注意事项（未解决）</h2><p>如果使用自定义信号，一定要记得<strong>信号是类变量，必须在类中定义</strong>，不能在实例方法中定义，否则后面发射信号和连接槽方法时都会报错。<br>不过我是这么解决的：(强行定制函数ing)</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.dia.comboBox_ImgType.currentIndexChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">ImgType</span>_init(</span><br><span class="line">    <span class="variable language_">self</span>.comboBox_ImgType.currentIndex()))  <span class="comment"># currentIndex返回当前项的序号(int)，第一个项的序号为0</span></span><br><span class="line"><span class="variable language_">self</span>.dia.comboBox_ImgType.currentIndexChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.stackedWidget.setCurrentIndex(</span><br><span class="line">    <span class="variable language_">self</span>.comboBox_ImgType.currentIndex()-<span class="number">1</span>))<span class="comment">#对应换页</span></span><br></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">class</span> configWin(ui_configWin.<span class="title class_">Ui</span>_configWin,<span class="title class_">QtWidgets</span>.<span class="title class_">QWidget</span>):</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span>,parent=<span class="title class_">None</span></span>):</span><br><span class="line">       <span class="variable language_">super</span>().__init__(parent)</span><br><span class="line">       <span class="variable language_">self</span>.setupUi(<span class="variable language_">self</span>)</span><br><span class="line">       <span class="variable language_">self</span>.sizeChanged = <span class="title class_">QtCore</span>.pyqtSignal(int)</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">resize</span>(<span class="params"><span class="variable language_">self</span>,width,height</span>):</span><br><span class="line">       <span class="variable language_">self</span>.sizeChanged.emit(width)</span><br><span class="line">       print(<span class="string">&quot;sizeChanged....&quot;</span>)</span><br><span class="line">       <span class="variable language_">super</span>().resize(width,height)</span><br><span class="line">       </span><br><span class="line"><span class="keyword">class</span> mainWin(<span class="title class_">QtWidgets</span>.<span class="title class_">QMainWindow</span>,ui_mainWin.<span class="title class_">Ui</span>_mainWindow):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">       <span class="variable language_">super</span>().__init__()</span><br><span class="line">       <span class="variable language_">self</span>.setupUi(<span class="variable language_">self</span>)       </span><br><span class="line">	<span class="variable language_">self</span>.configWin = configWin(<span class="variable language_">self</span>)</span><br><span class="line">       <span class="variable language_">self</span>.configWin.sizeChanged.connect(<span class="variable language_">self</span>.sizeChanged)</span><br></pre></td></tr></table></figure>
<p>报错<code>AttributeError: &#39;builtin_function_or_method&#39; object has no attribute &#39;connect&#39;</code><br>修正：<br>    <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtCore</span> import pyqtSignal</span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtGui</span> import <span class="title class_">QWindow</span></span><br><span class="line"><span class="keyword">class</span> configWin(ui_configWin.<span class="title class_">Ui</span>_configWin,<span class="title class_">QtWidgets</span>.<span class="title class_">QWidget</span>):</span><br><span class="line"></span><br><span class="line"> sizeChanged =pyqtSignal(int)<span class="comment">#写在这里</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span>,parent=<span class="title class_">None</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.setupUi(<span class="variable language_">self</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resize</span>(<span class="params"><span class="variable language_">self</span>,width,height</span>):</span><br><span class="line">        <span class="variable language_">self</span>.sizeChanged.emit(width)</span><br><span class="line">        <span class="variable language_">super</span>().resize(width,height)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> mainWin(<span class="title class_">QtWidgets</span>.<span class="title class_">QMainWindow</span>,ui_mainWin.<span class="title class_">Ui</span>_mainWindow):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setupUi(<span class="variable language_">self</span>)       </span><br><span class="line">  <span class="variable language_">self</span>.configWin = configWin(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.configWin.sizeChanged.connect(<span class="variable language_">self</span>.sizeChanged)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="关于-connect-函数"><a href="#关于-connect-函数" class="headerlink" title="关于.connect()函数"></a>关于<code>.connect()</code>函数</h2><p>需要注意的是，如果你的<code>connect()</code>里边是一个函数，以及你的函数传参是函数，你需要注意你书写函数的格式<br>一个改了很久的两行：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">timer.timeout.connect(<span class="symbol">lambda:</span> <span class="title class_">Bar</span>.setValue(<span class="title class_">Bar</span>.value()+<span class="number">10</span>)) <span class="comment"># 设置参数</span></span><br><span class="line">timer.timeout.connect(<span class="symbol">lambda:</span> checkState(<span class="title class_">Bar</span>.value(),timer))<span class="comment"># 检查时间</span></span><br></pre></td></tr></table></figure>
<ol>
<li>报错：传入的组件参数是<code>NoneType</code><br>这就需要区分<code>progressBar.setValue()</code>与<code>progressBar.setValue</code>的区别：</li>
</ol>
<ul>
<li>前者其实默认是一种call(None)，而返回值是NoneType</li>
<li>后者是一个函数(Reference the Method)</li>
</ul>
<ol start="2">
<li>关于<code>lambda</code></li>
</ol>
<ul>
<li>可以认为是函数的声明，整个式子其实是对函数的调用，但是在<code>.connect()</code>中调用函数时，必须要使用该声明</li>
</ul>
<p><a href="https://stackoverflow.com/questions/45793966/clicked-connect-error">讨论区有一个类似的例子</a></p>
<h2 id="几种连接方法"><a href="#几种连接方法" class="headerlink" title="几种连接方法"></a>几种连接方法</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种信号与槽连接的方法</span></span><br><span class="line">cb_font = <span class="title class_">QFontComboBox</span>(currentFontChanged=<span class="variable language_">self</span>.changeLabelFont)</span><br><span class="line">cb_font.pyqtConfigure(objectName=<span class="string">&#x27;fontCombo&#x27;</span>, editable=<span class="title class_">False</span>)</span><br><span class="line"><span class="comment"># 第二种信号与槽连接的方法</span></span><br><span class="line">cb_font.currentFontChanged.connect(<span class="variable language_">self</span>.changeButtonFont)</span><br><span class="line">main_layout.addWidget(cb_font)</span><br><span class="line"></span><br><span class="line">label = <span class="title class_">QLabel</span>()</span><br><span class="line">label.pyqtConfigure(text=<span class="string">&#x27;示例文本！&#x27;</span>, objectName=<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main_layout.addWidget(label)</span><br><span class="line"></span><br><span class="line">closeButton = <span class="title class_">QPushButton</span>(<span class="string">&#x27;关闭&#x27;</span>)</span><br><span class="line"><span class="comment"># 第三种连接信号与槽的方法</span></span><br><span class="line">closeButton.pyqtConfigure(objectName=<span class="string">&#x27;button&#x27;</span>, clicked=<span class="variable language_">self</span>.close)</span><br><span class="line">main_layout.addWidget(closeButton)</span><br><span class="line"></span><br><span class="line">vhbox = <span class="title class_">QVBoxLayout</span>()</span><br><span class="line">vhbox.addLayout(main_layout)</span><br><span class="line">vhbox.addStretch(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">self</span>.setLayout(vhbox)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四种连接信号与槽的方法</span></span><br><span class="line"><span class="title class_">QMetaObject</span>.connectSlotsByName(<span class="variable language_">self</span>)</span><br></pre></td></tr></table></figure>

<h1 id="MainWindow-主窗口-系列设置"><a href="#MainWindow-主窗口-系列设置" class="headerlink" title="MainWindow(主窗口)系列设置"></a>MainWindow(主窗口)系列设置</h1><h2 id="Menu-一定要注意只有新建主窗口才会有菜单栏"><a href="#Menu-一定要注意只有新建主窗口才会有菜单栏" class="headerlink" title="Menu(一定要注意只有新建主窗口才会有菜单栏)"></a>Menu(一定要注意只有新建主窗口才会有菜单栏)</h2><h3 id="菜单键的相关函数"><a href="#菜单键的相关函数" class="headerlink" title="菜单键的相关函数"></a>菜单键的相关函数</h3><p>self.menu_1.setTitle(_translate(“MainWindow”, “####”)) #菜单名称<br>self.action_1.setText(_translate(“MainWindow”, “#####”)) #菜单选项<br>self.action_1.triggered.connect(self.actionHandler_1) #点击菜单选项绑定响应（def 函数）</p>
<h3 id="提供四种Action信号"><a href="#提供四种Action信号" class="headerlink" title="提供四种Action信号"></a>提供四种Action信号</h3><p>changed():修改Action的属性时触发（如修改toolTip的信息）<br>hovered():Action关联的菜单项或者鼠标停留或者按下快捷键时触发<br>toggled(bool checked):Action设置checkable属性，关联的菜单项或toolBar在点击后会改变选中状态，触发toggled信号，参数为是否选中的最新状态。<br>triggered(bool checked):鼠标点击或者快捷键时触发。</p>
<ul>
<li>给动作绑定事件：<br><code>self.savelog.triggered.connect(self.saveLogs)</code><br>其中<code>self.saveLog</code>是动作名称，<code>self.aveLogs</code>是需要绑定的事件。<br>表示<code>self.saveLog</code>被触发时调用<code>self.aveLogs</code>函数事件</li>
</ul>
<h1 id="Scroll-Area"><a href="#Scroll-Area" class="headerlink" title="Scroll Area"></a>Scroll Area</h1><p>设置 ScrollAreaWidgetContents 的minimumSize属性，只有窗口大小小于这个值的时候，滑块才生效。<br>实际上相当于scrollArea内部创建了一个子区域，如果子区域大于最外区域，则出现滑块，如果只想出现一边有滑块，没有的那一边建议子块的最小值设置为0</p>
<h1 id="ComboBox"><a href="#ComboBox" class="headerlink" title="ComboBox"></a>ComboBox</h1><h2 id="访问QComboBox的列表项"><a href="#访问QComboBox的列表项" class="headerlink" title="访问QComboBox的列表项"></a>访问QComboBox的列表项</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">int currentlndex()：返回当前项的序号，第一个项的序号为<span class="number">0</span>。</span><br><span class="line"><span class="title class_">QString</span> currentText()：返回当前项的文本</span><br><span class="line"><span class="title class_">QVariant</span> currentData(int role = <span class="title class_">Qt</span><span class="symbol">:</span><span class="symbol">:UserRole</span>)：返回当前项的关联数据</span><br><span class="line"><span class="title class_">QString</span> itemText(int index) 返回指定索引号的项的文本</span><br><span class="line"><span class="title class_">QVariant</span> itemData(int index, int role = <span class="title class_">Qt</span>%<span class="symbol">:UserRole</span>) 返回指定索引号的项的关联数据。</span><br><span class="line">int count()：返回项的个数。</span><br></pre></td></tr></table></figure>
<h2 id="槽函数"><a href="#槽函数" class="headerlink" title="槽函数"></a>槽函数</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.reco_comboBox.currentIndexChanged.connect(</span><br><span class="line">    <span class="symbol">lambda:</span> <span class="variable language_">self</span>.model_init(<span class="variable language_">self</span>.reco_comboBox.currentIndex()))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#model_init函数的实现的核心代码</span></span><br><span class="line"><span class="comment"># 加载相关参数，并初始化模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_init</span>(<span class="params"><span class="variable language_">self</span>,tag</span>):</span><br><span class="line">    <span class="keyword">if</span> tag == <span class="number">1</span>:   <span class="comment">#当下拉框选中&quot;1&quot;触发事件</span></span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    代码省略</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="QSlider"><a href="#QSlider" class="headerlink" title="QSlider"></a>QSlider</h1><h2 id="重写slider点哪里到哪里"><a href="#重写slider点哪里到哪里" class="headerlink" title="重写slider点哪里到哪里"></a><a href="https://blog.csdn.net/xiaochou199604/article/details/127464749">重写slider点哪里到哪里</a></h2><p>新建包mySlider(或者直接新建类也行)，就差个导入么</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">from <span class="title class_">PyQt5</span> import <span class="title class_">QtCore</span>, <span class="title class_">QtGui</span>, <span class="title class_">QtWidgets</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtCore</span> import pyqtSignal</span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import <span class="title class_">QSlider</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySlider</span>(<span class="title class_">QSlider</span>):  <span class="comment"># 继承QSlider</span></span><br><span class="line">    customSliderClicked = pyqtSignal(str)  <span class="comment"># 创建信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span>, parent=<span class="title class_">None</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>(<span class="title class_">QSlider</span>, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params"><span class="variable language_">self</span>, <span class="title class_">QMouseEvent</span></span>):  <span class="comment"># 重写的鼠标点击事件</span></span><br><span class="line">        <span class="variable language_">super</span>().mousePressEvent(<span class="title class_">QMouseEvent</span>)</span><br><span class="line">        pos = <span class="title class_">QMouseEvent</span>.pos().x() / <span class="variable language_">self</span>.width()</span><br><span class="line">        <span class="variable language_">self</span>.setValue(round(pos * (<span class="variable language_">self</span>.maximum() - <span class="variable language_">self</span>.minimum()) + <span class="variable language_">self</span>.minimum()))  <span class="comment"># 设定滑动条滑块位置为鼠标点击处</span></span><br><span class="line">        <span class="variable language_">self</span>.customSliderClicked.emit(<span class="string">&quot;mouse Press&quot;</span>)  <span class="comment"># 发送信号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui</span>_Form(object):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params"><span class="variable language_">self</span>, <span class="title class_">Form</span></span>):</span><br><span class="line">        <span class="title class_">Form</span>.setObjectName(<span class="string">&quot;Form&quot;</span>)</span><br><span class="line">        <span class="title class_">Form</span>.resize(<span class="number">487</span>, <span class="number">402</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider = <span class="title class_">QtWidgets</span>.<span class="title class_">QSlider</span>(<span class="title class_">Form</span>)  <span class="comment"># 滑动条1</span></span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider.setGeometry(<span class="title class_">QtCore</span>.<span class="title class_">QRect</span>(<span class="number">60</span>, <span class="number">140</span>, <span class="number">361</span>, <span class="number">31</span>))</span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider.setOrientation(<span class="title class_">QtCore</span>.<span class="title class_">Qt</span>.<span class="title class_">Horizontal</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider.setObjectName(<span class="string">&quot;horizontalSlider&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider_2 = <span class="title class_">MySlider</span>(<span class="title class_">Form</span>)  <span class="comment"># 滑动条2，修改此处</span></span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider_2.setGeometry(<span class="title class_">QtCore</span>.<span class="title class_">QRect</span>(<span class="number">60</span>, <span class="number">230</span>, <span class="number">361</span>, <span class="number">31</span>))</span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider_2.setOrientation(<span class="title class_">QtCore</span>.<span class="title class_">Qt</span>.<span class="title class_">Horizontal</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider_2.setObjectName(<span class="string">&quot;horizontalSlider_2&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(<span class="title class_">Form</span>)</span><br><span class="line">        <span class="title class_">QtCore</span>.<span class="title class_">QMetaObject</span>.connectSlotsByName(<span class="title class_">Form</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params"><span class="variable language_">self</span>, <span class="title class_">Form</span></span>):</span><br><span class="line">        _translate = <span class="title class_">QtCore</span>.<span class="title class_">QCoreApplication</span>.translate</span><br><span class="line">        <span class="title class_">Form</span>.setWindowTitle(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Form&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>主程序调用,connect是自定义slot</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_">Ui</span>_Form, <span class="title class_">QMainWindow</span>):  <span class="comment"># 创建窗口</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setupUi(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider.valueChanged.connect(<span class="variable language_">self</span>.horizontalSlider_change)  <span class="comment"># 滑动条1数值变化时触发horizontalSlider_change</span></span><br><span class="line">        <span class="variable language_">self</span>.horizontalSlider_2.customSliderClicked.connect(</span><br><span class="line">            <span class="variable language_">self</span>.horizontalSlider_2_change)  </span><br></pre></td></tr></table></figure>


<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/*horizontal ：水平<span class="title class_">QSlider</span>*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QSlider::groove:horizontal &#123;</span></span><br><span class="line"><span class="regexp">border: 0px solid #bbb;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>*<span class="number">1</span>.滑动过的槽设计参数*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QSlider::sub-page:horizontal &#123;</span></span><br><span class="line"><span class="regexp"> /</span>*槽颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">background: rgb(90,49,255);</span></span><br><span class="line"><span class="regexp"> /</span>*外环区域倒圆角度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">border-radius: 2px;</span></span><br><span class="line"><span class="regexp"> /</span>*上遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-top:8px;</span></span><br><span class="line"><span class="regexp"> /</span>*下遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-bottom:8px;</span></span><br><span class="line"><span class="regexp">/</span>*width在这里无效，不写即可*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>*<span class="number">2</span>.未滑动过的槽设计参数*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QSlider::add-page:horizontal &#123;</span></span><br><span class="line"><span class="regexp">/</span>*槽颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">background: rgb(255,255, 255);</span></span><br><span class="line"><span class="regexp">/</span>*外环大小0px就是不显示，默认也是<span class="number">0</span>*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">border: 0px solid #777;</span></span><br><span class="line"><span class="regexp">/</span>*外环区域倒圆角度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">border-radius: 2px;</span></span><br><span class="line"><span class="regexp"> /</span>*上遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-top:9px;</span></span><br><span class="line"><span class="regexp"> /</span>*下遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-bottom:9px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">/</span>*<span class="number">3</span>.平时滑动的滑块设计参数*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QSlider::handle:horizontal &#123;</span></span><br><span class="line"><span class="regexp">/</span>*滑块颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">background: rgb(193,204,208);</span></span><br><span class="line"><span class="regexp">/</span>*滑块的宽度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">width: 5px;</span></span><br><span class="line"><span class="regexp">/</span>*滑块外环为1px，再加颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">border: 1px solid rgb(193,204,208);</span></span><br><span class="line"><span class="regexp"> /</span>*滑块外环倒圆角度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">border-radius: 2px; </span></span><br><span class="line"><span class="regexp"> /</span>*上遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-top:6px;</span></span><br><span class="line"><span class="regexp"> /</span>*下遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-bottom:6px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>*<span class="number">4</span>.手动拉动时显示的滑块设计参数*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QSlider::handle:horizontal:hover &#123;</span></span><br><span class="line"><span class="regexp">/</span>*滑块颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">background: rgb(193,204,208);</span></span><br><span class="line"><span class="regexp">/</span>*滑块的宽度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">width: 10px;</span></span><br><span class="line"><span class="regexp">/</span>*滑块外环为1px，再加颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">border: 1px solid rgb(193,204,208);</span></span><br><span class="line"><span class="regexp"> /</span>*滑块外环倒圆角度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">border-radius: 5px; </span></span><br><span class="line"><span class="regexp"> /</span>*上遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-top:4px;</span></span><br><span class="line"><span class="regexp"> /</span>*下遮住区域高度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">margin-bottom:4px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">QSlider::sub-page:horizontal &#123;</span></span><br><span class="line"><span class="regexp">background:rgb(170, 255, 127);</span></span><br><span class="line"><span class="regexp">border-radius: 0.1px;</span></span><br><span class="line"><span class="regexp">margin-top:9px;</span></span><br><span class="line"><span class="regexp">margin-bottom:9px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">QSlider::add-page:horizontal &#123;</span></span><br><span class="line"><span class="regexp">background: rgb(170,255,127);</span></span><br><span class="line"><span class="regexp">border-radius: 1px;</span></span><br><span class="line"><span class="regexp">margin-top:9px;</span></span><br><span class="line"><span class="regexp">margin-bottom:9px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure>

<h1 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>setChecked()</code></td>
<td>设置复选框的状态，True为选中，False为取消选中复选框</td>
</tr>
<tr>
<td><code>setText()</code></td>
<td>设置复选框的显示文本</td>
</tr>
<tr>
<td><code>text()</code></td>
<td>返回复选框的显示文本</td>
</tr>
<tr>
<td><code>isChecked()</code></td>
<td>检查复选框是否被选中</td>
</tr>
<tr>
<td><code>setCheckState()</code></td>
<td>设置复选框的勾选状态：2为选中（Checked）；1为半选中（ParticallyChecked）；0为没有选中（Unchecked）</td>
</tr>
<tr>
<td><code>setTristate(bool)</code></td>
<td>三态模式</td>
</tr>
</tbody></table>
<p><code>isChecked()</code>不能单独使用，要用<code>stateChanged.connect</code>连接起来<br><strong>但是更建议使用<code>toggle.connect()</code></strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.dia.checkBox_2.stateChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.test())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        chk1Status = <span class="variable language_">self</span>.dia.checkBox_2.text() + <span class="string">&quot;, isChecked=&quot;</span> + str(</span><br><span class="line">            <span class="variable language_">self</span>.dia.checkBox_2.isChecked()) + <span class="string">&#x27;, chekState=&#x27;</span> + str(</span><br><span class="line">            <span class="variable language_">self</span>.dia.checkBox_2.checkState()) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        print(chk1Status)</span><br></pre></td></tr></table></figure>
<p>我改了无数次的代码是这样的，如果只是ischecked不会更新！！！<br><strong>这个故事告诉我们，状态类的函数需要手动对他一直进行状态检查</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.checkBox1.stateChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.btnstate(<span class="variable language_">self</span>.checkBox1))</span><br><span class="line"><span class="variable language_">self</span>.checkBox2.toggled.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.btnstate(<span class="variable language_">self</span>.checkBox2))</span><br><span class="line"><span class="variable language_">self</span>.checkBox3.stateChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.btnstate(<span class="variable language_">self</span>.checkBox3))</span><br><span class="line"><span class="comment">#btnstate为一个打印函数</span></span><br></pre></td></tr></table></figure>
<h2 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h2><table>
<thead>
<tr>
<th>信号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>clicked(bool)</code></td>
<td>鼠标左键被按下，一直按着或者释放时，或者快捷键被按着或者释放时触发该信号</td>
</tr>
<tr>
<td><code>pressed()</code></td>
<td>当鼠标指针在按钮上并按下左键时触发该信号，一直按着或者按下并释放都会产生</td>
</tr>
<tr>
<td><code>released()</code></td>
<td>鼠标左键被释放时触发</td>
</tr>
<tr>
<td><code>toggled(checked)</code></td>
<td>checkable设置为True时，状态发生改变时触发信号</td>
</tr>
</tbody></table>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p><code>chk1Status = self.dia.checkBox_2.text() + &quot;, isChecked=&quot; + str(                     self.dia.checkBox_2.isChecked()) + &#39;, chekState=&#39; + str(                     self.dia.checkBox_2.checkState()) + &quot;\n&quot;                 print(chk1Status)</code><br>输出：<br><code>Normalization, isChecked=True, chekState=2</code></p>
<h1 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h1><p><a href="https://blog.51cto.com/techfanyi/6540034">一个很不错的教程</a></p>
<ol>
<li>单选框默认开启自动互斥（autoExclusive）。如果启用了自动互斥，属于同一个父部件的单选框的行为就和属于一个互斥按钮组的一样。如果你需要为属于同一父部件的单选框设置多个互斥按钮组，把它们加入QButtonGroup中。</li>
<li>每当一个按钮切换选中或未选中状态时，会发出的toggled()信号。如果希望每个按钮切换状态时触发一个动作，连接到这个信号。使用isChecked()来查看特定按钮是否被选中。</li>
<li>单选框可以显示文本，以及可选的小图标。图标使用setIcon()来设置，文本可以在构造函数或通过setText()来设置。可以指定快捷键，通过在文本中的特定字符前指定一个&amp;。</li>
</ol>
<h1 id="QTextBrowser-文本浏览框"><a href="#QTextBrowser-文本浏览框" class="headerlink" title="QTextBrowser(文本浏览框)"></a>QTextBrowser(文本浏览框)</h1><p>适用于多行<strong>不可修改</strong>文字在UI中的呈现</p>
<h2 id="修改函数"><a href="#修改函数" class="headerlink" title="修改函数"></a>修改函数</h2><ol>
<li>调用append方法可以向文本浏览框中添加文本<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.textBrowser.append(<span class="string">&quot;Hello World!&quot;</span>) </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h2><ul>
<li>不建议在designer里直接敲字，我发现这东西有一个雷点在于如果你直接往上边敲字是样式是没什么改变的，但是如果是<code>append</code>方法就可以按样式表的来</li>
</ul>
<h1 id="QPushBUtton"><a href="#QPushBUtton" class="headerlink" title="QPushBUtton"></a>QPushBUtton</h1><h2 id="参数设置-样式表美化"><a href="#参数设置-样式表美化" class="headerlink" title="参数设置&amp;样式表美化"></a>参数设置&amp;样式表美化</h2><ol>
<li>toolTip:在点击按钮时会鼠标下方会出现的小提示</li>
<li>蓝黑科技感样式表<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QPushButton</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> transparent;	</span><br><span class="line">	<span class="symbol">color:</span>rgb(<span class="number">137</span>, <span class="number">195</span>, <span class="number">235</span>);</span><br><span class="line">	<span class="symbol">border:</span>1px solid <span class="comment">#89c3eb;</span></span><br><span class="line">	<span class="symbol">font:</span> <span class="number">75</span> 13pt <span class="string">&quot;Bahnschrift&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:hover</span>&#123; </span><br><span class="line"><span class="symbol">color:</span>rgb(<span class="number">53</span>, <span class="number">171</span>, <span class="number">239</span>);</span><br><span class="line">border-<span class="symbol">radius:</span>6px;</span><br><span class="line"><span class="symbol">border:</span>2px solid <span class="comment">#2980b6;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:pressed</span>&#123;</span><br><span class="line"><span class="symbol">border:</span> 1px solid <span class="comment">#3C3C3C;</span></span><br><span class="line">border-<span class="symbol">radius:</span>6px;</span><br><span class="line"><span class="symbol">background:</span>rgb(<span class="number">124</span>, <span class="number">195</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当需要单独设置某个按钮的样式表时，如果有状态限制需要每一个后边都限定状态（比如下边的hover状态设置）<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pushButton_ori_2,#pushButton_ori,#pushButton_2,#pushButton&#123;</span></span><br><span class="line">	background-<span class="symbol">color:</span> transparent;	</span><br><span class="line">	<span class="symbol">color:</span>rgb(<span class="number">137</span>, <span class="number">195</span>, <span class="number">235</span>);</span><br><span class="line">	<span class="symbol">font:</span> <span class="number">75</span> 13pt <span class="string">&quot;Bahnschrift&quot;</span>;</span><br><span class="line">	<span class="symbol">border:</span>none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#pushButton_ori_2:hover,</span></span><br><span class="line"><span class="comment">#pushButton_ori:hover,</span></span><br><span class="line"><span class="comment">#pushButton_2:hover,</span></span><br><span class="line"><span class="comment">#pushButton:hover&#123;</span></span><br><span class="line">	<span class="symbol">color:</span>rgb(<span class="number">52</span>, <span class="number">231</span>, <span class="number">254</span>);</span><br><span class="line">	<span class="symbol">border:</span>none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p> 好用的腾讯会议高仿例子：<br>最小化按钮样式表：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QPushButton</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">	<span class="symbol">font:</span> 15pt <span class="string">&quot;宋体&quot;</span> ;</span><br><span class="line">	<span class="symbol">border:</span>none;</span><br><span class="line">	border-<span class="symbol">radius:</span>none;	</span><br><span class="line">	<span class="symbol">color:</span> gray;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:hover</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">218</span>, <span class="number">218</span>, <span class="number">218</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">QToolTip</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关闭按钮样式表：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QPushButton</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">	<span class="symbol">font:</span> 10pt <span class="string">&quot;宋体&quot;</span> ;</span><br><span class="line">	<span class="symbol">border:</span>none;</span><br><span class="line">	border-top-right-<span class="symbol">radius:</span>4px;</span><br><span class="line">	border-top-left-<span class="symbol">radius:</span>0px;</span><br><span class="line">	border-bottom-right-<span class="symbol">radius:</span>0px;</span><br><span class="line">	border-bottom-left-<span class="symbol">radius:</span>0px;</span><br><span class="line">	<span class="symbol">color:</span> gray;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:hover</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">218</span>, <span class="number">218</span>, <span class="number">218</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">QToolTip</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置按键样式表：<br>tip:把鼠标移到按钮上时的图片改为原图片的淡化版，大小35左右为佳。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QPushButton</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">	<span class="symbol">font:</span> 10pt <span class="string">&quot;宋体&quot;</span> ;</span><br><span class="line">	<span class="symbol">border:</span>none;</span><br><span class="line">	border-top-right-<span class="symbol">radius:</span>4px;</span><br><span class="line">	border-top-left-<span class="symbol">radius:</span>0px;</span><br><span class="line">	border-bottom-right-<span class="symbol">radius:</span>0px;</span><br><span class="line">	border-bottom-left-<span class="symbol">radius:</span>0px;</span><br><span class="line">	<span class="symbol">color:</span> gray;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:hover</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">218</span>, <span class="number">218</span>, <span class="number">218</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">QToolTip</span>&#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="QProgressBar"><a href="#QProgressBar" class="headerlink" title="QProgressBar"></a>QProgressBar</h1><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><p>setRange()： 设置进度条的取值范围(最小值和最大值)<br>setMinimum()： 设置进度条的最小值<br>setFont(): 设置文本字体<br>setMaximum()： 设置进度条的最大值<br>setValue()： 设置进度条的值<br>reset()： 让进度条重新回到开始位置<br>setOrientation()： 设置进度条方向(水平: Qt.Horizontal, 垂直: Qt.Vertical)<br>setTextVisible()： 设置进度条的文本是否可见<br>setTextDirection()： 设置文本方向，只对垂直进度条有效<br>setInvertedAppearance()： 设置进度条的方向(True&#x2F;False: 正反方向)<br>setFormat()： 设置文本字符串的格式(%p, 百分比显示,这是默认情况, %v: 当前进度, %m :总步数)</p>
<h2 id="美化-1"><a href="#美化-1" class="headerlink" title="美化"></a>美化</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QProgressBar</span> &#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">114</span>, <span class="number">163</span>, <span class="number">195</span>);</span><br><span class="line">	<span class="symbol">color:</span>rgb(<span class="number">44</span>, <span class="number">62</span>, <span class="number">80</span>);</span><br><span class="line">	border-<span class="symbol">style:</span>none;</span><br><span class="line">	text-<span class="symbol">align:</span>center;</span><br><span class="line">	border-<span class="symbol">radius:</span>10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QProgressBar</span><span class="symbol">:</span><span class="symbol">:chunk</span>&#123;</span><br><span class="line">	border-<span class="symbol">radius:</span>10px;</span><br><span class="line">	background-<span class="symbol">color:</span>qlineargradient(<span class="symbol">spread:</span>pad, <span class="symbol">x1:</span><span class="number">0</span>,<span class="symbol">y1:</span><span class="number">0.511364</span>, <span class="symbol">x2:</span><span class="number">2</span>, <span class="symbol">y2:</span><span class="number">0.523</span>, <span class="symbol">stop:</span><span class="number">0</span> rgb(<span class="number">41</span>, <span class="number">128</span>, <span class="number">182</span>), <span class="symbol">stop:</span><span class="number">1</span> rgb(<span class="number">43</span>, <span class="number">6</span>, <span class="number">255</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中可以调整<code>x2:2</code>的数值，比如改为<code>x2:1</code>会使得渐变色变化速度更快且最终的颜色最深。</p>
<h2 id="进度条更新并跳出新界面（可以做启动画面）"><a href="#进度条更新并跳出新界面（可以做启动画面）" class="headerlink" title="进度条更新并跳出新界面（可以做启动画面）"></a>进度条更新并跳出新界面（可以做启动画面）</h2><p><img src="https://img-blog.csdnimg.cn/29e37de047154425ae4363ef37b5217b.gif" alt="效果展示"><br><a href="https://blog.csdn.net/lildkdkdkjf/article/details/121955573">原教程在这里</a>，笨人对代码作了一些注释，后面附有修改</p>
<h3 id="作者源代码（不完全）"><a href="#作者源代码（不完全）" class="headerlink" title="作者源代码（不完全）"></a>作者源代码（不完全）</h3><p>背景建议使用<code>Qframe</code>，<code>QprogressBar</code>样式表设置参见上美化</p>
<ol>
<li>设置定时器，实际上这个Bar并不是根据加载进度走的，而是100ms更新一次<ul>
<li>实际上如果你想与你的程序进度连接的话，只要把<code>self.load_progress_bar</code>放在你需要的位置就行<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_loader</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.timer = <span class="title class_">QtCore</span>.<span class="title class_">QTimer</span>()    <span class="comment">#建立一个计时器</span></span><br><span class="line">    <span class="variable language_">self</span>.timer.timeout.connect(<span class="variable language_">self</span>.load_progress_bar)  </span><br><span class="line">    <span class="variable language_">self</span>.timer.start(<span class="number">100</span>)   <span class="comment">#更新时间间隔</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>对进度条操作，每次加一,大于既定值时执行操作；此处是关闭本界面，调用打开新界面的函数，并停止计时<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_progress_bar</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.progressBar.setValue(<span class="variable language_">self</span>.progressBar.value() + <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#self.cont_label_title[0] += 1 #这两行暂时不知道是什么意思，但是好像对功能实现没有影响</span></span><br><span class="line">    <span class="comment">#self.cont_label_title[1] += 1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.progressBar.value() &gt;= <span class="number">100</span>:</span><br><span class="line">        <span class="variable language_">self</span>.window.close()</span><br><span class="line">        <span class="variable language_">self</span>.open_table_main()</span><br><span class="line">        <span class="variable language_">self</span>.timer.stop()</span><br></pre></td></tr></table></figure></li>
<li>调用新界面产生函数<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">open_table_main</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.<span class="title class_">MainWindow</span> = <span class="title class_">QtWidgets</span>.<span class="title class_">QMainWindow</span>()</span><br><span class="line">    <span class="variable language_">self</span>.ui = <span class="title class_">Ui</span>_MainWindow()</span><br><span class="line">    <span class="variable language_">self</span>.ui.setupUi(<span class="variable language_">self</span>.<span class="title class_">MainWindow</span>)</span><br><span class="line">    <span class="variable language_">self</span>.<span class="title class_">MainWindow</span>.show()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="笨人修改"><a href="#笨人修改" class="headerlink" title="笨人修改"></a>笨人修改</h3><h1 id="QFileDialog"><a href="#QFileDialog" class="headerlink" title="QFileDialog"></a>QFileDialog</h1><p><a href="https://developer.aliyun.com/article/832236">教程</a><br>获取文件夹路径，对话框获取文件</p>
<h1 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h1><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ol>
<li><p>QLineEdit.text()：返回输入框的当前文本。</p>
</li>
<li><p>QLineEdit.addAction(Action,QLineEdit.ActionPosition)：添加动作到文本输入栏，上面已经举过例子了。</p>
</li>
<li><p>QLineEdit.setAlignment(Qt.Alignment flag)：属性保存了输入框的对齐方式（水平和垂直方向。</p>
</li>
<li><p>QLineEdit.setCompleter() ：输入栏的自动补全就是靠这个实现的，下下章我们讲解。</p>
</li>
<li><p>QLineEdit.deselect() ：取消选中任何已选中的文本。</p>
</li>
<li><p>QLineEdit.displayText()：返回显示的文本。默认值为一个空字符串。</p>
</li>
<li><p>setEchoMode（）：如果echoMode是Normal，和text()返回的一样；如果EchoMode是Password或PasswordEchoOnEdit，会返回平台相关的密码掩码字符；如果EchoMode是NoEcho，返回一个空字符串””。</p>
</li>
<li><p>QLineEdit.selectedText()：返回选中的的文本。如果没有选中，返回一个空字符串。默认为一个空字符串。</p>
</li>
<li><p>QLineEdit.setCursorPosition(QLineEdit.cursorPosition)：设置输入框当前光标的位置。</p>
</li>
<li><p>QLineEdit.setMaxLength(int)：此属性包含文本的最大允许长度。如果文本太长，将从限制的位置截断。默认值为32767。</p>
</li>
<li><p>QLineEdit.setReadOnly(bool)：此属性保存输入框是否为只读。在只读模式下，用户仍然可以将文本复制到剪贴板，但不能编辑它，且不显示光标。</p>
</li>
<li><p>QLineEdit.setSelection(int start, int length) ：从位置start选择文本为length个字符，允许负长度。我们一启动程序是否设置setSelection的，效果如下：</p>
</li>
<li><p>QLineEdit.setValidator()：设置输入框的验证器，将限制任意可能输入的文本</p>
</li>
<li><p><code>placeholderText</code>用于输入前的提示显示文字该属性包含行编辑的占位符文本。只要行编辑为空，设置此属性将使行编辑显示一个灰色的占位符文本。</p>
</li>
</ol>
<p>通常情况下，即使具有焦点，空行编辑也会显示占位符文本。但是，如果内容是水平居中的，则行编辑具有焦点时，占位符文本不会显示在光标下方。默认情况下，该属性包含一个空字符串。</p>
<ol start="15">
<li><p>QLineEdit.isClearButtonEnabled(bool) ：是否设置清除内容的按钮。</p>
</li>
<li><p>QLineEdit.setInputMask()：设置掩码，效果就是我们演示视频中的License输入。</p>
</li>
</ol>
<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><ol>
<li><p>selectionChanged() ：只要选择改变这个信号就会被发射。</p>
</li>
<li><p>cursorPositionChanged(int old, int new) ：只要光标移动，这个信号就会发射。前面的位置old，新的位置是new。</p>
</li>
<li><p>editingFinished()：按下返回或回车键或线条编辑失去焦点时发出此信号。</p>
</li>
<li><p>returnPressed()：按下返回或回车键时发出此信号。</p>
</li>
<li><p>textChanged(str)：只要文字发生变化就会发出此信号。文本参数是新文本。与textEdited()不同，当通过调用setText()以编程方式更改文本时，也会发出此信号。</p>
</li>
<li><p>textEdited(str) ：无论何时编辑文本都会发出此信号。文本参数是新文本。与textChanged()不同，当以编程方式更改文本时，不会发出此信号，例如通过调用setText()。</p>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol>
<li><p>clear() ：清除输入框内容</p>
</li>
<li><p>copy()：如果echoMode()是Normal，将选中的文本复制到剪贴板。</p>
</li>
<li><p>cut() ：如果echoMode()是Normal，将所选文本复制到剪贴板并删除它。 如果当前的验证不允许删除选定的文本，cut()将复制而不删除。</p>
</li>
<li><p>paste() ：如果输入框不是只读的，插入剪贴板中的文本到光标所在位置，删除任何选定的文本。如果最终的结果不被当前的验证器接受，将没有任何反应。</p>
</li>
<li><p>redo() ：重做上次操作，如果redo可用（isRedoAvailable() ）。</p>
</li>
<li><p>selectAll() ：选中所有文本（即：高亮），并将光标移动到末尾。当一个默认值被插入时，这非常有用，因为如果用户在点击部件之前就输入，选中的文本将被删除。</p>
</li>
<li><p>setText(str) ：设置输入框显示的文本。</p>
</li>
<li><p>undo() ：撤消上次操作（如果撤销可用）</p>
</li>
</ol>
<h1 id="QGroupBox"><a href="#QGroupBox" class="headerlink" title="QGroupBox"></a>QGroupBox</h1><ol>
<li>去掉不需要的标题栏<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QGroupBox</span><span class="symbol">:</span><span class="symbol">:setStyleSheet</span>(<span class="string">&quot;QGroupBox&#123; margin-top:0px;&#125; QGroupBox:title &#123;margin-top: 0px;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Widget-通用窗口-系列设置"><a href="#Widget-通用窗口-系列设置" class="headerlink" title="Widget(通用窗口)系列设置"></a>Widget(通用窗口)系列设置</h1><p>通用窗口不包含菜单栏、工具栏！</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="侧边栏修改"><a href="#侧边栏修改" class="headerlink" title="侧边栏修改"></a>侧边栏修改</h1><h2 id="特定对口修改"><a href="#特定对口修改" class="headerlink" title="特定对口修改"></a>特定对口修改</h2><h3 id="对于文字颜色或者背景色背景图片填充的修改建议直接在相应参数的styleSheet中修改"><a href="#对于文字颜色或者背景色背景图片填充的修改建议直接在相应参数的styleSheet中修改" class="headerlink" title="对于文字颜色或者背景色背景图片填充的修改建议直接在相应参数的styleSheet中修改"></a>对于文字颜色或者背景色背景图片填充的修改建议直接在相应参数的styleSheet中修改</h3><p>注意这个修改需要选中后每一条进行修改，比方说菜单栏，每一个菜单栏的下属栏等等。<br>示例如下：</p>
<ol>
<li>color，background-color等等直接用</li>
<li>贴图：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">background-<span class="symbol">image:</span>url(<span class="symbol">:/Img/main_bgimg</span>.jpg);</span><br><span class="line"><span class="comment">#直接给背景贴图</span></span><br><span class="line"><span class="title class_">MainWindow</span>&#123;background-<span class="symbol">image:</span>url(<span class="symbol">:/Img/main_bgimg</span>.jpg);&#125;</span><br><span class="line"><span class="comment">#直接给背景贴图</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>值得注意的是，如果较大类中设置了背景，建议使用<code>#name</code>来限定插图范围，不然大类里边的小组件样式表是不起作用的</li>
</ul>
<h2 id="TabWidget-Setting"><a href="#TabWidget-Setting" class="headerlink" title="TabWidget Setting"></a>TabWidget Setting</h2><ul>
<li><strong>修改表头</strong>：<code>CurrentTabText</code></li>
<li>修改是否可选：<code>setTabEnabled(int index, bool enable)</code></li>
</ul>
<h2 id="QlineEdit"><a href="#QlineEdit" class="headerlink" title="QlineEdit"></a>QlineEdit</h2><ul>
<li><code>.setPlaceholderText(&quot;&quot;)</code>:提示输入内容</li>
</ul>
<h2 id="泛泛修改"><a href="#泛泛修改" class="headerlink" title="泛泛修改"></a>泛泛修改</h2><p>只改动MainWindow即可<br>注意所有对样式表的修改直接在他给的条目里选择就可以，不需要手动输入标签，只要把类写出来就行<br>QMainWindow主窗口<br>QLabel纯文字</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="symbol">color:</span></span><br><span class="line">    <span class="comment">#修改字体颜色</span></span><br><span class="line">    background-<span class="symbol">color:</span></span><br><span class="line">    <span class="comment">#背景颜色</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特殊修改"><a href="#特殊修改" class="headerlink" title="特殊修改"></a>特殊修改</h2><h3 id="QCombobox"><a href="#QCombobox" class="headerlink" title="QCombobox"></a>QCombobox</h3><h4 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/*<span class="title class_">QCombobox</span>主体*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QComboBox &#123;</span></span><br><span class="line"><span class="regexp">    border: 2px solid #f3f3f3;/</span>*设置线宽*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	background-color: rgb(237, 242, 255);/</span>*背景颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    border-radius: 15px;/</span>*圆角*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    padding: 1px 2px 1px 2px;  /</span>*针对于组合框中的文本内容*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	text-align:bottom;</span></span><br><span class="line"><span class="regexp">    min-width: 9em;   /</span>*<span class="comment"># 组合框的最小宽度*/</span></span><br><span class="line">    /*min-<span class="symbol">height:</span> 5em;*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">	border-style:solid;/</span>*边框为实线型*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	border-width:2px;/</span>*边框宽度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	border-color:rgb(77, 123, 255);/</span>*边框颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">	padding-left: 10px;/</span>*左侧边距*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*<span class="title class_">QCombobox</span>右侧按钮*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QComboBox::drop-down &#123;</span></span><br><span class="line"><span class="regexp">    subcontrol-origin: padding;</span></span><br><span class="line"><span class="regexp">    subcontrol-position: top right;/</span>*放于右方顶部*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    width: 50px;/</span>*设置按钮范围宽度*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"> 	/</span>*border-<span class="symbol">radius:</span> 15px;</span><br><span class="line">    border-left-<span class="symbol">width:</span> 1px;</span><br><span class="line">    border-left-<span class="symbol">color:</span> darkgray;</span><br><span class="line">    border-left-<span class="symbol">style:</span> solid;*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    border-top-right-radius: 3px;/</span>*设置边框圆角*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    border-bottom-right-radius: 3px;</span></span><br><span class="line"><span class="regexp">/</span>*padding-<span class="symbol">right:</span> 50px;*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*<span class="title class_">QCombobox</span>右侧按钮的箭头图标*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QComboBox::down-arrow &#123;</span></span><br><span class="line"><span class="regexp">	border-image: url(:/image</span><span class="regexp">/down_list.png);/</span>*自定义图片填充*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	width: 10px;/</span>*设置该图标的宽高*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	height: 10px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#程序在运行过程中，动态对QCombobox填充可选项。比如登录时填充人名数据、选择摄像头分辨率时的分辨率列表等等不固定的元素。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* 下拉后，整个下拉窗体样式 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QComboBox QAbstractItemView &#123;</span></span><br><span class="line"><span class="regexp">    border: 2px solid #f3f3f3;/</span>*边框宽度、线形、颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	background-color: rgba(237, 242, 255, 1);/</span>*背景颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    border-radius: 15px;/</span>*圆角*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    padding: 1px 2px 1px 2px;  /</span>*针对于组合框中的文本内容*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    min-width: 9em;   /</span>*<span class="comment"># 组合框的最小宽度*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 下拉后，整个下拉窗体每项的样式 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QComboBox QAbstractItemView::item &#123;</span></span><br><span class="line"><span class="regexp">	border-radius: 15px;/</span>*圆角*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    height: 30px;   /</span>* 项的高度（设置pComboBox-&gt;setView(new <span class="title class_">QListView</span>());后，该项才起作用） *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	background-color: rgb(237, 242, 255);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>*以下部分不知为何不生效，有待调试*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">/</span>* 下拉后，整个下拉窗体越过每项的样式 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QComboBox QAbstractItemView::item:hover &#123;</span></span><br><span class="line"><span class="regexp">    color: #FFFFF0;</span></span><br><span class="line"><span class="regexp">       /</span>* 整个下拉窗体越过每项的背景色 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">	background-color: rgb(98, 0, 255);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* 下拉后，整个下拉窗体被选择的每项的样式 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QComboBox QAbstractItemView::item:selected &#123;</span></span><br><span class="line"><span class="regexp">    color: #FFFFF0;</span></span><br><span class="line"><span class="regexp">	background-color: rgb(0, 85, 200);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/填充下拉选项</span></span><br><span class="line"><span class="regexp">    ui-&gt;comboBox-&gt;clear();/</span><span class="regexp">/清空combobox</span></span><br><span class="line"><span class="regexp">    QStandardItemModel *pItemModel = qobject_cast&lt;QStandardItemModel*&gt;(ui-&gt;comboBox-&gt;model());</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/字体设置</span></span><br><span class="line"><span class="regexp">    int combobox_item_fontsize = 9;</span></span><br><span class="line"><span class="regexp">    QFont font;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/font.setPixelSize(combobox_item_fontsize*scale);</span></span><br><span class="line"><span class="regexp">    font.setPointSize(combobox_item_fontsize);</span></span><br><span class="line"><span class="regexp">    font.setFamily(&quot;黑体&quot;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/填充默认项（在没有任何数据时，可以先做一个默认的提示项给用户，然后让用户自己输入）</span></span><br><span class="line"><span class="regexp">    QString tip_string(u8&quot;请选择用户名&quot;);</span></span><br><span class="line"><span class="regexp">    ui-&gt;comboBox-&gt;addItem(tip_string);</span></span><br><span class="line"><span class="regexp">    pItemModel-&gt;item(0)-&gt;setIcon(QIcon(&quot;:/image</span><span class="regexp">/account.png&quot;));    /</span><span class="regexp">/修改某项图标</span></span><br><span class="line"><span class="regexp">    pItemModel-&gt;item(0)-&gt;setForeground(QColor(255, 0, 0));            /</span><span class="regexp">/修改某项文本颜色</span></span><br><span class="line"><span class="regexp">    pItemModel-&gt;item(0)-&gt;setBackground(QColor(220,220,220));    /</span><span class="regexp">/修改某项背景颜色</span></span><br><span class="line"><span class="regexp">    pItemModel-&gt;item(0)-&gt;setFont(font);</span></span><br><span class="line"><span class="regexp">    pItemModel-&gt;item(0)-&gt;setTextAlignment(Qt::AlignVCenter | Qt::AlignHCenter);    /</span><span class="regexp">/修改某项文本对齐方式</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/填充正式项</span></span><br><span class="line"><span class="regexp">    if(ui-&gt;comboBox-&gt;currentText() == tip_string)</span></span><br><span class="line"><span class="regexp">        ui-&gt;comboBox-&gt;clear();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    int i= 0;</span></span><br><span class="line"><span class="regexp">    QStringList m_list;/</span><span class="regexp">/随便来点填充数据</span></span><br><span class="line"><span class="regexp">    m_list&lt;&lt;&quot;AAA&quot;&lt;&lt;&quot;BBB&quot;&lt;&lt;&quot;CCC&quot;&lt;&lt;&quot;DDD&quot;;</span></span><br><span class="line"><span class="regexp">    foreach (QString name, m_list)</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        qDebug()&lt;&lt;&quot;combobox additem:&quot;&lt;&lt;name;</span></span><br><span class="line"><span class="regexp">        ui-&gt;comboBox-&gt;addItem(name);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        pItemModel-&gt;item(i)-&gt;setIcon(QIcon(&quot;:/image</span><span class="regexp">/account.png&quot;));    /</span><span class="regexp">/修改某项图标</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/pItemModel-&gt;item(i)-&gt;setText(&quot;修改的文本  &quot; + QString::number(i + 1));                          /</span><span class="regexp">/修改某项文本</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/pItemModel-&gt;item(i)-&gt;setForeground(QColor(255, 0, 0));            /</span><span class="regexp">/修改某项文本颜色</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/pItemModel-&gt;item(i)-&gt;setBackground(QColor(220,220,220));    /</span><span class="regexp">/修改某项背景颜色（若样式表中已经设置了表项的背景颜色，则不会生效）</span></span><br><span class="line"><span class="regexp">        pItemModel-&gt;item(i)-&gt;setFont(font);</span></span><br><span class="line"><span class="regexp">        pItemModel-&gt;item(i)-&gt;setTextAlignment(Qt::AlignVCenter | Qt::AlignHCenter);    /</span><span class="regexp">/修改某项文本对齐方式</span></span><br><span class="line"><span class="regexp">        i++;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/以上设置完，会默认选择第一项。可以手动选择-1项，即为未选择状态</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ui-&gt;comboBox-&gt;setCurrentIndex(-1);</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure>

<h1 id="常用页操作"><a href="#常用页操作" class="headerlink" title="常用页操作"></a>常用页操作</h1><h2 id="StakedWight实现点击按钮更换界面布局"><a href="#StakedWight实现点击按钮更换界面布局" class="headerlink" title="StakedWight实现点击按钮更换界面布局"></a>StakedWight实现点击按钮更换界面布局</h2><ol>
<li>在containers中找到stacked Widget(注意不是建立新的界面)并拖动成自己需要的大小</li>
<li>对界面进行编辑，需要的buttons拖动到上边便会成为其子部件</li>
<li>pyuid生成代码</li>
<li>添加连接函数，注意menu用<code>triggered</code> button用<code>clicked</code><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加换页槽函数</span></span><br><span class="line">       <span class="variable language_">self</span>.actionRadiomic.triggered.connect(<span class="variable language_">self</span>.display1)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">display1</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">           <span class="variable language_">self</span>.stackedWidget.setCurrentIndex(<span class="number">1</span>)</span><br><span class="line">   <span class="comment">#注意页码子控件一般是从0开始，1为第二页，默认初始显示0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="窗口与窗口调用"><a href="#窗口与窗口调用" class="headerlink" title="窗口与窗口调用"></a>窗口与窗口调用</h1><h2 id="子窗口的调用"><a href="#子窗口的调用" class="headerlink" title="子窗口的调用"></a>子窗口的调用</h2><h2 id="子窗口部件无反应问题"><a href="#子窗口部件无反应问题" class="headerlink" title="子窗口部件无反应问题"></a>子窗口部件无反应问题</h2><p>笨人已经搞到崩溃，等查到debug方式的时候整个人已经萎了喝喝，父窗口改成WindowModel就可以了<br><img src="https://img-blog.csdnimg.cn/2021070721504362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkyMjk5,size_16,color_FFFFFF,t_70#pic_center" alt="Img"><br>这是模式窗口属性，有三个值：NoModal指没有模式，也就是不会阻塞其他窗口应用的模式；WindowModal就是单窗口层次模式，只准其本身与其子窗口可以使用；ApplicationModal就是应用模式，除了本身其他窗口都不能使用。</p>
<h1 id="PyQt5的QSS美化"><a href="#PyQt5的QSS美化" class="headerlink" title="PyQt5的QSS美化"></a>PyQt5的QSS美化</h1><h2 id="样式表调用"><a href="#样式表调用" class="headerlink" title="样式表调用"></a>样式表调用</h2><h3 id="样式表写出，但不显示"><a href="#样式表写出，但不显示" class="headerlink" title="样式表写出，但不显示"></a>样式表写出，但不显示</h3><p>前边的限制用<code>#name</code>加括号，限定对象，在多页切换的工具中要单选出改页面（建议在右侧的工具栏中选择并进行修改）</p>
<h2 id="qss调用"><a href="#qss调用" class="headerlink" title="qss调用"></a>qss调用</h2><h3 id="主函数-全局调用"><a href="#主函数-全局调用" class="headerlink" title="主函数 全局调用"></a>主函数 全局调用</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">styleFile = <span class="string">&#x27;./pyqt5/qss/style.qss&#x27;</span></span><br><span class="line">    with open(styleFile, <span class="string">&quot;r&quot;</span>) as <span class="symbol">f:</span></span><br><span class="line">        style = f.read()</span><br><span class="line">    win.setStyleSheet(style)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<h3 id="设置图片样式表"><a href="#设置图片样式表" class="headerlink" title="设置图片样式表"></a><a href="https://blog.csdn.net/lm_is_dc/article/details/132784648?ops_request_misc=&request_id=&biz_id=102&utm_term=pyqt5%E5%B0%86%E6%8E%A7%E4%BB%B6%E8%83%8C%E6%99%AF%E8%AE%BE%E7%BD%AE%E6%88%90%E5%9B%BE%E7%89%87&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-132784648.142%5Ev94%5EchatsearchT3_1&spm=1018.2226.3001.4187">设置图片样式表</a></h3><p><strong>但是你一定要知道图片要用png格式，只有你能显示出来那个缩略图才说明成功了</strong><br><code>border-image:url(D:/www/xxx/Pytorch/Braintumor/PyQt_test/Img/Hydrogen.jpg);</code></p>
<h2 id="一些主题"><a href="#一些主题" class="headerlink" title="一些主题"></a>一些主题</h2><p><a href="">一个很简单的有重定义边框的主题</a></p>
<h3 id="好看的字体加颜色"><a href="#好看的字体加颜色" class="headerlink" title="好看的字体加颜色"></a>好看的字体加颜色</h3><ol>
<li>深蓝色+柔和体(松散衡水体感觉是)<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">color:</span> rgb(<span class="number">44</span>, <span class="number">62</span>, <span class="number">80</span>);</span><br><span class="line"><span class="symbol">font:</span> italic 11pt <span class="string">&quot;Cascadia Code SemiLight&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>适合做题目的可爱点字体<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">font:</span> 15pt <span class="string">&quot;Cooper Black&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>圆润的正常体<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">font:</span> 9pt <span class="string">&quot;Arial Rounded MT Bold&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="qtawesome使用总结"><a href="#qtawesome使用总结" class="headerlink" title="qtawesome使用总结"></a>qtawesome使用总结</h2><ol>
<li>展示图标库<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="对某个控件的所有子控件进行集体美化"><a href="#对某个控件的所有子控件进行集体美化" class="headerlink" title="对某个控件的所有子控件进行集体美化"></a>对某个控件的所有子控件进行集体美化</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.left_widget.setStyleSheet(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">            QPushButton&#123;border:none;color:white;padding-left:5px;</span></span><br><span class="line"><span class="string">                    height:35px;</span></span><br><span class="line"><span class="string">                    font-size:15px;</span></span><br><span class="line"><span class="string">                    padding-right:10px;&#125;</span></span><br><span class="line"><span class="string">            QPushButton#left_label&#123;</span></span><br><span class="line"><span class="string">                border:none;</span></span><br><span class="line"><span class="string">                border-bottom:1px solid white;</span></span><br><span class="line"><span class="string">                font-size:20px;</span></span><br><span class="line"><span class="string">                font-weight:700;</span></span><br><span class="line"><span class="string">                font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">            QWidget#left_widget&#123;</span></span><br><span class="line"><span class="string">                background:Gray;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">                border-top:1px solid white;</span></span><br><span class="line"><span class="string">                border-bottom:1px solid white;</span></span><br><span class="line"><span class="string">                border-left:1px solid white;</span></span><br><span class="line"><span class="string">                border-top-left-radius:10px;</span></span><br><span class="line"><span class="string">                border-bottom-left-radius:10px;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            QPushButton#left_button:hover&#123; color:white;</span></span><br><span class="line"><span class="string">                    border:2px solid #F3F3F5;</span></span><br><span class="line"><span class="string">                    border-radius:15px;</span></span><br><span class="line"><span class="string">                    background:black;&#125;</span></span><br><span class="line"><span class="string">        &#x27;</span><span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="QTabWidget样式"><a href="#QTabWidget样式" class="headerlink" title="QTabWidget样式"></a>QTabWidget样式</h2><p><img src="https://img-blog.csdnimg.cn/20210626185511397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTcwMDU4,size_16,color_FFFFFF,t_70" alt="各个组件的实际指向"></p>
<h3 id="QTabWidget"><a href="#QTabWidget" class="headerlink" title="QTabWidget"></a>QTabWidget</h3><ol>
<li>QTabWidget显示区域的属性设置<br><strong>要在大控件里添加</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabWidget</span><span class="symbol">:</span><span class="symbol">:pane</span> &#123;</span><br><span class="line">border-<span class="symbol">top:</span> 1px solid <span class="comment">#E5E5E5;</span></span><br><span class="line">border-<span class="symbol">left:</span>1px solid <span class="comment">#E5E5E5;</span></span><br><span class="line"><span class="symbol">position:</span> absolute;</span><br><span class="line">font-<span class="symbol">size:</span> 14px;</span><br><span class="line">background-<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line"><span class="symbol">top:</span>-1px  <span class="comment">#稍微遮一点点选项卡的上部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>QTabWidget 选择项的属性设置<br>自己的代码~<strong>一定要注意伪状态后边是没有空格的！要不然没反应</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span>&#123;</span><br><span class="line">background-<span class="symbol">color:</span> rgb(<span class="number">41</span>, <span class="number">128</span>, <span class="number">182</span>);</span><br><span class="line">min-<span class="symbol">width:</span>250px;</span><br><span class="line">min-<span class="symbol">height:</span>70px;</span><br><span class="line">border-top-left-<span class="symbol">radius:</span> 15px;</span><br><span class="line">border-top-right-<span class="symbol">radius:</span> 15px;</span><br><span class="line"><span class="symbol">color:</span> rgb(<span class="number">44</span>, <span class="number">62</span>, <span class="number">80</span>);</span><br><span class="line"><span class="symbol">font:</span> italic 11pt <span class="string">&quot;Cascadia Code SemiLight&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:hover</span>&#123;</span><br><span class="line">background-<span class="symbol">color:</span> rgb(<span class="number">137</span>, <span class="number">195</span>, <span class="number">235</span>);</span><br><span class="line">border-<span class="symbol">right:</span>2px solid;</span><br><span class="line">border-<span class="symbol">top:</span>2px solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
别人的代码（我就加注释啦）<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span>&#123;</span><br><span class="line">background-<span class="symbol">color:</span> rgb(<span class="number">41</span>, <span class="number">128</span>, <span class="number">182</span>);</span><br><span class="line">min-<span class="symbol">width:</span>250px;<span class="comment">#宽度</span></span><br><span class="line">min-<span class="symbol">height:</span>70px;<span class="comment">#高度</span></span><br><span class="line">border-top-left-<span class="symbol">radius:</span> 15px;</span><br><span class="line">border-top-right-<span class="symbol">radius:</span> 15px;</span><br><span class="line"><span class="symbol">color:</span> rgb(<span class="number">44</span>, <span class="number">62</span>, <span class="number">80</span>);</span><br><span class="line"><span class="symbol">font:</span> italic 11pt <span class="string">&quot;Cascadia Code SemiLight&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:hover</span>&#123;</span><br><span class="line">background-<span class="symbol">color:</span> rgb(<span class="number">137</span>, <span class="number">195</span>, <span class="number">235</span>);</span><br><span class="line">border-<span class="symbol">right:</span>2px solid; <span class="comment">#如果要设置颜色的话在solid之后加一个#颜色</span></span><br><span class="line">border-<span class="symbol">top:</span>2px solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<strong>只有出现TabBar才会设置标签项的颜色</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span> &#123;</span><br><span class="line"><span class="symbol">border:</span> none;</span><br><span class="line">border-bottom-<span class="symbol">color:</span> <span class="comment">#FFFFFF; /* same as the pane color */</span></span><br><span class="line">border-top-left-<span class="symbol">radius:</span> 4px;</span><br><span class="line">border-top-right-<span class="symbol">radius:</span> 4px;</span><br><span class="line">min-<span class="symbol">width:</span> 8ex;</span><br><span class="line"><span class="symbol">padding:</span> 2px;</span><br><span class="line">font-<span class="symbol">size:</span> 14px;</span><br><span class="line">background-<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:selected</span>, <span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:hover</span> &#123;</span><br><span class="line">background-<span class="symbol">color:</span><span class="comment">#FFFFFF;//选中背景色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:selected</span> &#123;</span><br><span class="line"><span class="symbol">border:</span>none; <span class="comment">#去掉边框</span></span><br><span class="line"><span class="symbol">color:</span><span class="comment">#2080F7;//选中颜色</span></span><br><span class="line">border-<span class="symbol">bottom:</span> 2px solid <span class="comment">#2080F7;</span></span><br><span class="line">font-<span class="symbol">weight:</span>bold;</span><br><span class="line">background-<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>QTabWidget 头部属性设置<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabWidget</span><span class="symbol">:</span><span class="symbol">:tab-bar</span> &#123;</span><br><span class="line">border-<span class="symbol">top:</span> 2px solid <span class="comment">#E5E5E5;</span></span><br><span class="line">border-<span class="symbol">bottom:</span> 2px solid <span class="comment">#E5E5E5;</span></span><br><span class="line">border-<span class="symbol">left:</span>1px solid <span class="comment">#E5E5E5;</span></span><br><span class="line"><span class="symbol">alignment:</span> center;<span class="regexp">//</span>居中显示</span><br><span class="line">font-<span class="symbol">size:</span> 14px;</span><br><span class="line">background-<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>头部选项卡<code>QTabBar::tab</code><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span> &#123;</span><br><span class="line">    <span class="symbol">background:</span> <span class="comment">#051322;</span></span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#7F8997;</span></span><br><span class="line">    <span class="symbol">border:</span> 2px;</span><br><span class="line">    border-top-left-<span class="symbol">radius:</span> 10px;</span><br><span class="line">    border-top-right-<span class="symbol">radius:</span> 10px;</span><br><span class="line">    min-<span class="symbol">width:</span> 200px;</span><br><span class="line">	min-<span class="symbol">height:</span> 35px;</span><br><span class="line">    <span class="symbol">padding:</span> 2px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:selected</span>&#123;</span><br><span class="line">    background-<span class="symbol">color:</span> white;</span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#001330;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:first</span>&#123; </span><br><span class="line">	min-<span class="symbol">width:</span> 35px;</span><br><span class="line">	background-<span class="symbol">color:</span> <span class="comment">#2489F2;</span></span><br><span class="line">	border-top-left-<span class="symbol">radius:</span> 3px;</span><br><span class="line">    border-top-right-<span class="symbol">radius:</span> 3px;</span><br><span class="line">	background-<span class="symbol">image:</span> url(<span class="symbol">:/Resources/image/homepage</span>.png);</span><br><span class="line">	background-<span class="symbol">position:</span> center;</span><br><span class="line">	background-<span class="symbol">repeat:</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:first</span><span class="symbol">:hover</span>&#123; </span><br><span class="line">	min-<span class="symbol">width:</span> 35px;</span><br><span class="line">	background-<span class="symbol">color:</span> <span class="comment">#2489F2;</span></span><br><span class="line">	border-top-left-<span class="symbol">radius:</span> 3px;</span><br><span class="line">    border-top-right-<span class="symbol">radius:</span> 3px;</span><br><span class="line">	background-<span class="symbol">image:</span> url(<span class="symbol">:/Resources/image/homepage_hover</span>.png);</span><br><span class="line">	background-<span class="symbol">position:</span> center;</span><br><span class="line">	background-<span class="symbol">repeat:</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:close-button</span>&#123; </span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/Resources/image/close</span>.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:close-button</span><span class="symbol">:hover</span>&#123;</span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/Resources/image/close_hover</span>.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>内容区美化<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/设置内容区域边框</span></span><br><span class="line"><span class="regexp">QTabWidget::pane&#123;</span></span><br><span class="line"><span class="regexp">	border:none;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/标题栏左侧间距</span></span><br><span class="line"><span class="regexp">QTabWidget::tab-bar &#123;</span></span><br><span class="line"><span class="regexp">    left: 1px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>头部属性设置<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabWidget</span><span class="symbol">:</span><span class="symbol">:tab-bar</span> &#123;</span><br><span class="line">border-<span class="symbol">top:</span> 2px solid <span class="comment">#E5E5E5;</span></span><br><span class="line">border-<span class="symbol">bottom:</span> 2px solid <span class="comment">#E5E5E5;</span></span><br><span class="line">border-<span class="symbol">left:</span>1px solid <span class="comment">#E5E5E5;</span></span><br><span class="line"><span class="symbol">alignment:</span> center;</span><br><span class="line">font-<span class="symbol">size:</span> 14px;</span><br><span class="line">background-<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>图片插入的一个小例子<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最左边标签未选中时显示（因为需要左边打圆角，所以和其他背景图片不一样，注意字体颜色）</span></span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:first</span><span class="symbol">:</span>!selected &#123;</span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#000000;</span></span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/common/images/common/</span>左_normal.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#最左边标签被选中</span></span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:first</span><span class="symbol">:selected</span> &#123;</span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/common/images/common/</span>左_pressed.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#最右边标签未选中时显示（因为需要右边打圆角，所以和其他背景图片不一样）</span></span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:last</span><span class="symbol">:</span>!selected &#123;</span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#000000;</span></span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/common/images/common/</span>右_normal.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#最右边标签被选中</span></span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:last</span><span class="symbol">:selected</span> &#123;</span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/common/images/common/</span>右_pressed.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#中间的标签未被选择的显示</span></span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:</span>!selected &#123;</span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#000000;</span></span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/common/images/common/</span>中_normal.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#中间标签选中显示的图片</span></span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:selected</span> &#123;</span><br><span class="line">	<span class="symbol">color:</span><span class="comment">#FFFFFF;</span></span><br><span class="line">	border-<span class="symbol">image:</span> url(<span class="symbol">:/common/images/common/</span>中_pressed.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>改变左右滑动的按钮<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabBar</span> <span class="title class_">QToolButton</span> &#123;</span><br><span class="line">    <span class="symbol">border:</span> none;</span><br><span class="line">	<span class="symbol">color:</span> rgb(<span class="number">255</span>, <span class="number">206</span>, <span class="number">6</span>);</span><br><span class="line">    background-<span class="symbol">color:</span> <span class="comment">#0b0e11;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">QTabBar</span> <span class="title class_">QToolButton</span><span class="symbol">:hover</span> &#123;</span><br><span class="line">	background-<span class="symbol">color:</span> rgb(<span class="number">44</span>, <span class="number">62</span>, <span class="number">80</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用QProxyStyle改变TabBar位置并改变文字方向"><a href="#利用QProxyStyle改变TabBar位置并改变文字方向" class="headerlink" title="利用QProxyStyle改变TabBar位置并改变文字方向"></a>利用<code>QProxyStyle</code>改变<code>TabBar</code>位置并改变文字方向</h3><p>但是是C语言（）</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;QPainter&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QProxyStyle&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTabStyle</span> : <span class="keyword">public</span> <span class="title class_">QProxyStyle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    <span class="title class_">QSize</span> sizeFromContents(<span class="title class_">ContentsType</span> type, const <span class="title class_">QStyleOption</span> *option,</span><br><span class="line">        const <span class="title class_">QSize</span> &amp;size, const <span class="title class_">QWidget</span> *widget) const</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">QSize</span> s = <span class="title class_">QProxyStyle</span><span class="symbol">:</span><span class="symbol">:sizeFromContents</span>(type, option, size, widget);</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="title class_">QStyle</span><span class="symbol">:</span><span class="symbol">:CT_TabBarTab</span>) &#123;</span><br><span class="line">            s.transpose();</span><br><span class="line">            s.rwidth() = <span class="number">90</span>; <span class="regexp">//</span> 设置每个tabBar中item的大小</span><br><span class="line">            s.rheight() = <span class="number">44</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    void drawControl(<span class="title class_">ControlElement</span> element, const <span class="title class_">QStyleOption</span> *option, <span class="title class_">QPainter</span> *painter, const <span class="title class_">QWidget</span> *widget) const</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="regexp">//</span>设置lab</span><br><span class="line">        <span class="keyword">if</span> (element == CE_TabBarTabLabel) &#123;</span><br><span class="line">            <span class="keyword">if</span> (const <span class="title class_">QStyleOptionTab</span> *tab = qstyleoption_cast&lt;const <span class="title class_">QStyleOptionTab</span> *&gt;(option)) &#123;</span><br><span class="line">                <span class="title class_">QRect</span> allRect = tab-&gt;rect;</span><br><span class="line">                <span class="regexp">//</span>选中状态</span><br><span class="line">                <span class="keyword">if</span> (tab-&gt;state &amp; <span class="title class_">QStyle</span><span class="symbol">:</span><span class="symbol">:State_Selected</span>) &#123;</span><br><span class="line">                    painter-&gt;save();</span><br><span class="line">                    painter-&gt;setPen(<span class="number">0xffffff</span>);</span><br><span class="line">                    painter-&gt;setBrush(<span class="title class_">QBrush</span>(<span class="number">0xffffff</span>));</span><br><span class="line">                    <span class="regexp">//painter</span>-&gt;drawRect(allRect.adjusted(<span class="number">6</span>, <span class="number">6</span>, -<span class="number">6</span>, -<span class="number">6</span>));</span><br><span class="line">                    painter-&gt;drawRect(allRect.adjusted(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">                    painter-&gt;restore();</span><br><span class="line">                &#125;</span><br><span class="line">                /<span class="regexp">/hover状态 鼠标移动状态</span></span><br><span class="line"><span class="regexp">                else if (tab-&gt;state &amp; QStyle::State_MouseOver) &#123;</span></span><br><span class="line"><span class="regexp">                    painter-&gt;save();</span></span><br><span class="line"><span class="regexp">                    painter-&gt;setPen(0xECECEC);/</span><span class="regexp">/画框</span></span><br><span class="line"><span class="regexp">                    painter-&gt;setBrush(QBrush(0xECECEC));</span></span><br><span class="line"><span class="regexp">                    painter-&gt;drawRect(allRect.adjusted(0, 0, 0, 0));</span></span><br><span class="line"><span class="regexp">                    painter-&gt;restore();</span></span><br><span class="line"><span class="regexp">                &#125; else &#123;</span></span><br><span class="line"><span class="regexp">                    painter-&gt;setPen(0x33CCFF);</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/字体</span></span><br><span class="line"><span class="regexp">                QTextOption option;</span></span><br><span class="line"><span class="regexp">                option.setAlignment(Qt::AlignCenter);</span></span><br><span class="line"><span class="regexp">                painter-&gt;setFont(QFont(&quot;楷体&quot;, 12, QFont::Bold));</span></span><br><span class="line"><span class="regexp">                painter-&gt;setPen(0x0A0A0A);</span></span><br><span class="line"><span class="regexp">                painter-&gt;drawText(allRect, tab-&gt;text, option);</span></span><br><span class="line"><span class="regexp">                return;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if (element == CE_TabBarTab) &#123;</span></span><br><span class="line"><span class="regexp">            QProxyStyle::drawControl(element, option, painter, widget);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ui-&gt;tabWidget-&gt;setTabPosition(<span class="title class_">QTabWidget</span><span class="symbol">:</span><span class="symbol">:West</span>);</span><br><span class="line">ui-&gt;tabWidget-&gt;tabBar()-&gt;setStyle(new <span class="title class_">CustomTabStyle</span>);</span><br></pre></td></tr></table></figure>
<h3 id="自己做的好看的成品嘿嘿"><a href="#自己做的好看的成品嘿嘿" class="headerlink" title="自己做的好看的成品嘿嘿"></a>自己做的好看的成品嘿嘿</h3><ol>
<li>蓝色的选项卡<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span>&#123;</span><br><span class="line">background-<span class="symbol">color:</span> rgb(<span class="number">41</span>, <span class="number">128</span>, <span class="number">182</span>);</span><br><span class="line">min-<span class="symbol">width:</span>250px;</span><br><span class="line">min-<span class="symbol">height:</span>70px;</span><br><span class="line">	<span class="symbol">color:</span> rgb(<span class="number">44</span>, <span class="number">62</span>, <span class="number">80</span>);</span><br><span class="line">	<span class="symbol">font:</span> italic 11pt <span class="string">&quot;Cascadia Code SemiLight&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:hover</span>,<span class="title class_">QTabBar</span><span class="symbol">:</span><span class="symbol">:tab</span><span class="symbol">:selected</span>&#123;</span><br><span class="line"><span class="symbol">border:</span>5px solid <span class="comment">#bce2e8;</span></span><br><span class="line">background-<span class="symbol">color:</span> rgb(<span class="number">137</span>, <span class="number">195</span>, <span class="number">235</span>);</span><br><span class="line">border-<span class="symbol">right:</span>2px solid;</span><br><span class="line">border-<span class="symbol">top:</span>2px solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="QFrame制作无边框窗口"><a href="#QFrame制作无边框窗口" class="headerlink" title="QFrame制作无边框窗口"></a>QFrame制作无边框窗口</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#frame</span></span><br><span class="line">&#123;</span><br><span class="line">	background-<span class="symbol">color:</span>rgb(<span class="number">39</span>, <span class="number">146</span>, <span class="number">195</span>);</span><br><span class="line">	<span class="symbol">border:</span> 5px, white;</span><br><span class="line">	border-<span class="symbol">radius:</span> 20px;</span><br><span class="line">	<span class="symbol">margin:</span> 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="QGruopBox"><a href="#QGruopBox" class="headerlink" title="QGruopBox"></a>QGruopBox</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QGroupBox</span>&#123;</span><br><span class="line"><span class="symbol">border:</span>2px solid gray;</span><br><span class="line">border-<span class="symbol">radius:</span>4px;</span><br><span class="line">margin-<span class="symbol">top:</span><span class="number">0</span>.5em;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QGroupBox</span><span class="symbol">:</span><span class="symbol">:title</span>&#123;</span><br><span class="line">subcontrol-<span class="symbol">origin:</span>margin;</span><br><span class="line">background-<span class="symbol">color:</span>white;</span><br><span class="line"><span class="symbol">padding:</span><span class="number">0</span> 3px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Scroll-Area-1"><a href="#Scroll-Area-1" class="headerlink" title="Scroll Area"></a>Scroll Area</h2><p>设置背景图片要设定里边那个Widget的样式，要不然所有子控件都会被改</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scrollAreaWidgetContents&#123;</span></span><br><span class="line">border-<span class="symbol">image:</span> url(./<span class="title class_">Img</span>/5deepblue.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QScrollArea</span>&#123;</span><br><span class="line"><span class="symbol">border:</span>none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="QComboBox"><a href="#QComboBox" class="headerlink" title="QComboBox"></a>QComboBox</h2><h3 id="指定下拉箭头图片自定义，图片文件为name-png"><a href="#指定下拉箭头图片自定义，图片文件为name-png" class="headerlink" title="指定下拉箭头图片自定义，图片文件为name.png"></a>指定下拉箭头图片自定义，图片文件为name.png</h3><ol>
<li>所有的下拉箭头<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QConboBox</span><span class="symbol">:drop-down</span>&#123;<span class="symbol">image:</span>url(name.png)&#125;</span><br></pre></td></tr></table></figure></li>
<li>指定ID的下拉箭头<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QComboBox</span><span class="comment">#myQComboBox::drop-down &#123;image：url（dropdown.png）&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="QSS伪状态"><a href="#QSS伪状态" class="headerlink" title="QSS伪状态"></a>QSS伪状态</h2><p>QSS的伪状态选择器是一个以冒号开头的选择表达式，限制控件在某种状态时才可以使用QSS规则，只能描述某一个控件或者一个复合控件的自控件的状态，只能放在选择器的最后边。</p>
<h3 id="hover：鼠标指针经过的状态"><a href="#hover：鼠标指针经过的状态" class="headerlink" title="hover：鼠标指针经过的状态"></a>hover：鼠标指针经过的状态</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QComboBox</span><span class="symbol">:hover</span>&#123;background-<span class="symbol">color:</span>red&#125;</span><br><span class="line"><span class="comment">#经过combobox时其背景变为红色</span></span><br><span class="line"><span class="title class_">QComboBox</span><span class="symbol">:</span><span class="symbol">:drop-down</span><span class="symbol">:hover</span>&#123;background-<span class="symbol">color:</span>red&#125;</span><br><span class="line"><span class="comment">#经过其下拉箭头的时候，下拉箭头的背景变成12</span></span><br><span class="line"><span class="title class_">QCheckBox</span>：hover：checked&#123;color：white&#125;</span><br><span class="line"><span class="comment">#多种伪状态可以同时使用：表示当鼠标指针经过一个选中的QCheckBox时，设置其文字的前景色为白色12</span></span><br></pre></td></tr></table></figure>
<p><code>:!hove</code>可表示没有鼠标经过的状态<br>实例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowDemo</span>(<span class="title class_">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>(<span class="title class_">WindowDemo</span>, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="comment">#实例化列表控件</span></span><br><span class="line">        combo=<span class="title class_">QComboBox</span>(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment">#设置列表控件的名称</span></span><br><span class="line">        combo.setObjectName(<span class="string">&#x27;myQComboBox&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#添加条目到列表控件</span></span><br><span class="line">        combo.addItem(<span class="string">&#x27;Window&#x27;</span>)</span><br><span class="line">        combo.addItem(<span class="string">&#x27;Ubuntu&#x27;</span>)</span><br><span class="line">        combo.addItem(<span class="string">&#x27;Red Hat&#x27;</span>)</span><br><span class="line">        <span class="comment">#控件移动到指定位置</span></span><br><span class="line">        combo.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">        <span class="comment">#设置窗口的标题与初始窗口的属性</span></span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">250</span>,<span class="number">200</span>,<span class="number">320</span>,<span class="number">150</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QComboBox样式&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#设置样式</span></span><br><span class="line"></span><br><span class="line">        qssStyle=<span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        QComboBox#myQComboBox::drop-down&#123;</span></span><br><span class="line"><span class="string">        image:url(./images/dropdown.png)</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">        QComboBox#myQComboBox::drop-down:hover&#123;</span></span><br><span class="line"><span class="string">        background-color:red</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.setStyleSheet(qssStyle)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app=<span class="title class_">QApplication</span>(sys.argv)</span><br><span class="line">    win=<span class="title class_">WindowDemo</span>()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<h2 id="MainWindow：直接在retranslateUi后边设置"><a href="#MainWindow：直接在retranslateUi后边设置" class="headerlink" title="MainWindow：直接在retranslateUi后边设置"></a>MainWindow：直接在retranslateUi后边设置</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#MainWindow.setWindowOpacity(0.9) # 设置窗口透明度</span></span><br><span class="line"><span class="title class_">MainWindow</span>.setAttribute(<span class="title class_">QtCore</span>.<span class="title class_">Qt</span>.WA_TranslucentBackground) <span class="comment"># 设置窗口背景透明</span></span><br><span class="line"><span class="comment">#MainWindow.setWindowFlag(QtCore.Qt.FramelessWindowHint) # 隐藏边框</span></span><br><span class="line">pe = <span class="title class_">QPalette</span>()</span><br><span class="line"><span class="title class_">MainWindow</span>.setAutoFillBackground(<span class="title class_">True</span>)</span><br><span class="line">pe.setColor(<span class="title class_">QPalette</span>.<span class="title class_">Window</span>,<span class="title class_">Qt</span>.lightGray)  <span class="comment">#设置背景色</span></span><br><span class="line"><span class="comment">#pe.setColor(QPalette.Background,Qt.blue)</span></span><br><span class="line"><span class="title class_">MainWindow</span>.setPalette(pe)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Ui</span>_MainWindow3.setWindowTitle(<span class="string">&quot;语音识别&quot;</span>)        </span><br><span class="line"><span class="title class_">Ui</span>_MainWindow3.setWindowIcon(<span class="title class_">QIcon</span>(<span class="string">&#x27;Amg.jpg&#x27;</span>)) <span class="comment">#设置图标,可以用图片，也可以用qtawesome</span></span><br></pre></td></tr></table></figure>

<h2 id="PushButton：直接在初始setup后设置"><a href="#PushButton：直接在初始setup后设置" class="headerlink" title="PushButton：直接在初始setup后设置"></a>PushButton：直接在初始setup后设置</h2><ol>
<li>设置按钮前的图标<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">spin_icon = qtawesome.icon(<span class="string">&#x27;fa5s.microphone-alt&#x27;</span>, color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"><span class="comment">#图标名参考示例格式，以及qtawesome的readme中对于库的提示来写，格式就是 库.图标名</span></span><br><span class="line"><span class="variable language_">self</span>.pushButton.setIcon(spin_icon)<span class="comment">#设置图标</span></span><br><span class="line"><span class="variable language_">self</span>.pushButton.setIconSize(<span class="title class_">QtCore</span>.<span class="title class_">QSize</span>(<span class="number">50</span>,<span class="number">50</span>))<span class="comment">#需要导入库from PyQt5.QtCore import QSize</span></span><br><span class="line"><span class="variable language_">self</span>.pushButton.setStyleSheet(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;QPushButton&#123;background-color: rgb(70, 70, 70);</span></span><br><span class="line"><span class="string">                                color: rgb(255, 255, 255);&#125;</span></span><br><span class="line"><span class="string">QPushButton:hover&#123;color:white;</span></span><br><span class="line"><span class="string">            border:2px solid #F3F3F5;</span></span><br><span class="line"><span class="string">            border-radius:35px;</span></span><br><span class="line"><span class="string">            background:darkGray;&#125;&#x27;</span><span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>图标+圆角（图标用的是flaticon）<br>在qss文件添加以下内容：<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/*设置控件的背景*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QTabWidget</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    background-color:rgb(104,191,249);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*设置控件下面板的背景颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QTabWidget::pane</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    background-color: rgb(228, 233, 242);</span></span><br><span class="line"><span class="regexp">    border:none;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*设置控件下选择页的颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QTabBar::tab</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">     font: 15pt &quot;Chinese fine black&quot;;</span></span><br><span class="line"><span class="regexp">     background-color:rgb(104,191,249);</span></span><br><span class="line"><span class="regexp">     min-width: 60px;</span></span><br><span class="line"><span class="regexp">     min-height: 30px;</span></span><br><span class="line"><span class="regexp">     padding: 2px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*设置控件下选择页被选中的颜色*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">QTabBar::tab:selected</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    background-color: rgb(228, 233, 242);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="将最大化最小化按钮设置为像苹果的三个点点"><a href="#将最大化最小化按钮设置为像苹果的三个点点" class="headerlink" title="将最大化最小化按钮设置为像苹果的三个点点"></a>将最大化最小化按钮设置为像苹果的三个点点</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> gui_view(<span class="title class_">QWidget</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">      <span class="variable language_">super</span>(gui_view, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">self</span>.resize(<span class="number">500</span>, <span class="number">350</span>)</span><br><span class="line">      <span class="variable language_">self</span>.setWindowFlags(<span class="title class_">Qt</span>.<span class="title class_">FramelessWindowHint</span>)  <span class="comment"># 去边框</span></span><br><span class="line">      <span class="comment"># # self.setAttribute(Qt.WA_TranslucentBackground)  # 设置窗口背景透明</span></span><br><span class="line"></span><br><span class="line">      button_red = <span class="title class_">QPushButton</span>(<span class="variable language_">self</span>)</span><br><span class="line">      button_red.move(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">      button_red.setFixedSize(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">      button_red.setStyleSheet(<span class="string">&quot;QPushButton&#123;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;    background:#CE0000;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;    color:white;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;    box-shadow: 1px 1px 3px;border-radius: 10px;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;&#125;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;QPushButton:hover&#123;                    \n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;    background:red;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;&#125;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;QPushButton:pressed&#123;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;    border: 1px solid #3C3C3C!important;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;    background:black;\n&quot;</span></span><br><span class="line">                                       <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">      button_red.clicked.connect(<span class="variable language_">self</span>.quit_button)</span><br><span class="line"></span><br><span class="line">      button_orange = <span class="title class_">QPushButton</span>(<span class="variable language_">self</span>)</span><br><span class="line">      button_orange.move(<span class="number">50</span>, <span class="number">20</span>)</span><br><span class="line">      button_orange.setFixedSize(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">      button_orange.setStyleSheet(<span class="string">&quot;QPushButton&#123;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;    background:orange;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;    color:white;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;    box-shadow: 1px 1px 3px;border-radius: 10px;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;&#125;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;QPushButton:hover&#123;                    \n&quot;</span></span><br><span class="line">                               <span class="string">&quot;    background:yellow;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;&#125;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;QPushButton:pressed&#123;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;    border: 1px solid #3C3C3C!important;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;    background:black;\n&quot;</span></span><br><span class="line">                               <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">      button_green = <span class="title class_">QPushButton</span>(<span class="variable language_">self</span>)</span><br><span class="line">      button_green.move(<span class="number">80</span>, <span class="number">20</span>)</span><br><span class="line">      button_green.setFixedSize(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">      button_green.setStyleSheet(<span class="string">&quot;QPushButton&#123;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;    background:green;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;    color:white;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;    box-shadow: 1px 1px 3px;border-radius: 10px;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;&#125;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;QPushButton:hover&#123;                    \n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;    background:#08BF14;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;&#125;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;QPushButton:pressed&#123;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;    border: 1px solid #3C3C3C!important;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;    background:black;\n&quot;</span></span><br><span class="line">                                  <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">quit_button</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">      quit()</span><br></pre></td></tr></table></figure>
<h4 id="最小化"><a href="#最小化" class="headerlink" title="最小化"></a>最小化</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QPushButton</span>&#123;</span><br><span class="line">    <span class="symbol">background:</span><span class="comment">#6C6C6C;</span></span><br><span class="line">    <span class="symbol">color:</span>white;</span><br><span class="line">    box-<span class="symbol">shadow:</span> 1px 1px 3px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);font-<span class="symbol">size:</span>16px;border-<span class="symbol">radius:</span> 8px;font-<span class="symbol">family:</span> 微软雅黑;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:hover</span>&#123;                    </span><br><span class="line">    <span class="symbol">background:</span><span class="comment">#9D9D9D;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:pressed</span>&#123;</span><br><span class="line">    <span class="symbol">border:</span> 1px solid <span class="comment">#3C3C3C!important;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">QPushButton</span>&#123;</span><br><span class="line">    <span class="symbol">background:</span><span class="comment">#CE0000;</span></span><br><span class="line">    <span class="symbol">color:</span>white;</span><br><span class="line">    box-<span class="symbol">shadow:</span> 1px 1px 3px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);font-<span class="symbol">size:</span>16px;border-<span class="symbol">radius:</span> 8px;font-<span class="symbol">family:</span> 微软雅黑;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:hover</span>&#123;                    </span><br><span class="line">    <span class="symbol">background:</span><span class="comment">#FF2D2D;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">QPushButton</span><span class="symbol">:pressed</span>&#123;</span><br><span class="line">    <span class="symbol">border:</span> 1px solid <span class="comment">#3C3C3C!important;</span></span><br><span class="line">    <span class="symbol">background:</span><span class="comment">#AE0000;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="少许动画操作"><a href="#少许动画操作" class="headerlink" title="少许动画操作"></a>少许动画操作</h1><h2 id="静态图片-动态文字"><a href="#静态图片-动态文字" class="headerlink" title="静态图片+动态文字"></a>静态图片+动态文字</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">app = <span class="title class_">QApplication</span>(sys.argv)</span><br><span class="line">pixmap = <span class="title class_">QPixmap</span>(<span class="string">&quot;Img/brain1.jpeg&quot;</span>)</span><br><span class="line">splash = <span class="title class_">QSplashScreen</span>(pixmap)</span><br><span class="line">splash.show()</span><br><span class="line"><span class="comment">#splash.setCursor(PyQt5.QtWidgets.BlankCursor)  # 设置点击图标关闭事件</span></span><br><span class="line">splash.showMessage(<span class="string">&quot;加载中&quot;</span>)  <span class="comment"># 第二个参数为字的位置，第三个参数为颜色</span></span><br><span class="line">app.processEvents()  <span class="comment"># 使程序还能响应其他事件</span></span><br><span class="line"></span><br><span class="line">dialog = <span class="title class_">Ui</span>_MainDialog() <span class="comment">#先创建好实例后取消</span></span><br><span class="line">splash.finish(dialog)  <span class="comment"># main为主界面的实例</span></span><br><span class="line"></span><br><span class="line">dailog.exec()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<h2 id="动态图gif"><a href="#动态图gif" class="headerlink" title="动态图gif"></a>动态图gif</h2><p>使用label实现：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.gif = <span class="title class_">QMovie</span>(<span class="string">&#x27;bg2.gif&#x27;</span>)</span><br><span class="line"><span class="variable language_">self</span>.label.setMovie(<span class="variable language_">self</span>.gif)</span><br><span class="line"><span class="variable language_">self</span>.gif.start()</span><br></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">app = <span class="title class_">QApplication</span>(sys.argv)</span><br><span class="line">label = <span class="title class_">QLabel</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">mv = <span class="title class_">QMovie</span>(<span class="string">&quot;:/gif/loading.gif&quot;</span>)</span><br><span class="line">label.setMovie(mv) <span class="comment">#其实是把label当成了一个载体，把mv放到label上</span></span><br><span class="line">label.setWindowFlags(<span class="title class_">Qt</span>.<span class="title class_">FramelessWindowHint</span>)  <span class="comment"># label窗口无边框设置</span></span><br><span class="line">label.setAttribute(<span class="title class_">Qt</span>.WA_TranslucentBackground)  <span class="comment"># label背景透明</span></span><br><span class="line">label.move((app.desktop()-&gt;width() - window.width()) / <span class="number">2</span>, (app.desktop()-&gt;height() - window.height()) / <span class="number">2</span>)  <span class="comment"># 调整位置</span></span><br><span class="line">label.setScaledContents(<span class="title class_">True</span>)</span><br><span class="line">mv.start()</span><br><span class="line">label.show()</span><br><span class="line">main = <span class="title class_">None</span> <span class="comment">#把main改成你的界面名字</span></span><br><span class="line"><span class="keyword">while</span> <span class="title class_">True</span>:</span><br><span class="line">    app.processEvents()  <span class="comment"># 使动画正常播放，不影响主界面构造</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">main:</span></span><br><span class="line">        main = <span class="title class_">MainWinodw</span>() <span class="comment">#实例创建你应该有的实例</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">main.show()</span><br><span class="line">label.close()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><h2 id="class-test"><a href="#class-test" class="headerlink" title="class_test"></a>class_test</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import <span class="title class_">PyQt5</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtCore</span> import <span class="title class_">Qt</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtGui</span> import <span class="title class_">QMovie</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import *</span><br><span class="line"></span><br><span class="line">from dictest import <span class="title class_">Ui</span>_MainDialog</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = <span class="title class_">QApplication</span>(sys.argv)</span><br><span class="line"></span><br><span class="line">    label = <span class="title class_">QLabel</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    mv = <span class="title class_">QMovie</span>(<span class="string">&quot;./Img/11.jpeg&quot;</span>)</span><br><span class="line">    label.setMovie(mv)</span><br><span class="line">    label.setWindowFlags(<span class="title class_">Qt</span>.<span class="title class_">FramelessWindowHint</span>)  <span class="comment"># label窗口无边框设置</span></span><br><span class="line">    label.setScaledContents(<span class="title class_">True</span>)</span><br><span class="line">    mv.start()</span><br><span class="line">    label.show() <span class="comment">#这句一定要有啊。。uic加载的时候也需要show</span></span><br><span class="line"></span><br><span class="line">    dailog = <span class="title class_">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="title class_">True</span>:</span><br><span class="line">        app.processEvents()  <span class="comment"># 使动画正常播放，不影响主界面构造</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">dailog:</span></span><br><span class="line">            dailog = <span class="title class_">Ui</span>_MainDialog()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    label.close()</span><br><span class="line">    dailog.exec()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<h2 id="showImage"><a href="#showImage" class="headerlink" title="showImage"></a>showImage</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义MyFigure类的一个实例</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">self</span>.F = <span class="title class_">MyFigure</span>(width=<span class="number">5</span>, height=<span class="number">4</span>, dpi=<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 在GUI的groupBox中创建一个布局，用于添加MyFigure类的实例（即图形）后其他部件。</span></span><br><span class="line"><span class="variable language_">self</span>.gridlayout_1 = <span class="title class_">QGridLayout</span>(<span class="variable language_">self</span>.graphicsView_2)  <span class="comment"># 继承容器</span></span><br><span class="line"><span class="variable language_">self</span>.gridlayout_1.addWidget(<span class="variable language_">self</span>.F, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#self.showimage()</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">self</span>.<span class="variable constant_">F2</span> = <span class="title class_">MyFigure</span>(width=<span class="number">5</span>, height=<span class="number">4</span>, dpi=<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">self</span>.gridlayout_2 = <span class="title class_">QGridLayout</span>(<span class="variable language_">self</span>.graphicsView_3)  <span class="comment"># 继承容器</span></span><br><span class="line"><span class="variable language_">self</span>.gridlayout_2.addWidget(<span class="variable language_">self</span>.<span class="variable constant_">F2</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">self</span>.<span class="variable constant_">F3</span> = <span class="title class_">MyFigure</span>(width=<span class="number">5</span>, height=<span class="number">4</span>, dpi=<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">self</span>.gridlayout_3 = <span class="title class_">QGridLayout</span>(<span class="variable language_">self</span>.graphicsView_4)  <span class="comment"># 继承容器</span></span><br><span class="line"><span class="variable language_">self</span>.gridlayout_3.addWidget(<span class="variable language_">self</span>.<span class="variable constant_">F3</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># self.horizontalSlider.valueChanged.connect(self.bindSlider)</span></span><br><span class="line"><span class="variable language_">self</span>.showimage()</span><br><span class="line">    <span class="comment"># SimpleView.VisNii(self,self.ori_path)</span></span><br></pre></td></tr></table></figure>

<h2 id="VTK-Vedo-实现"><a href="#VTK-Vedo-实现" class="headerlink" title="VTK(Vedo)实现"></a>VTK(Vedo)实现</h2><p>可以进行3D可视化，显示感兴趣区域，2D切割，使用的mySlicer是在vedo3dslicer上修改的，只是三个切片分别分装</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from <span class="title class_">PyQt5</span> import <span class="title class_">Qt</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import <span class="title class_">QGridLayout</span>, <span class="title class_">QDialog</span>, <span class="title class_">QGraphicsDropShadowEffect</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtCore</span> import <span class="title class_">Qt</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtGui</span> import <span class="title class_">QColor</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import *</span><br><span class="line">from qtpy import uic</span><br><span class="line"></span><br><span class="line">import matplotlib</span><br><span class="line">from vtkmodules.qt.<span class="title class_">QVTKRenderWindowInteractor</span> import <span class="title class_">QVTKRenderWindowInteractor</span></span><br><span class="line">import itk</span><br><span class="line">from vedo import *</span><br><span class="line">from vedo import <span class="title class_">Volume</span>, <span class="title class_">Plotter</span></span><br><span class="line"><span class="comment">#用来做数据处理</span></span><br><span class="line"></span><br><span class="line">matplotlib.use(<span class="string">&quot;Qt5Agg&quot;</span>)  <span class="comment"># 声明使用QT5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> child(<span class="title class_">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span>,path,ori_path,label_path</span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.openingUI = uic.loadUi(<span class="string">&quot;visualization.ui&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.read(path,ori_path,label_path)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params"><span class="variable language_">self</span>,path,ori_path,label_path</span>):</span><br><span class="line">        readData.read_csv(<span class="variable language_">self</span>.openingUI,path,ori_path,label_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">readData:</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        pass</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_number</span>(<span class="params"><span class="variable language_">self</span>,s</span>):</span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            float(s)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">True</span></span><br><span class="line">        except <span class="title class_">ValueError</span>:</span><br><span class="line">            pass</span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            import unicodedata</span><br><span class="line">            unicodedata.numeric(s)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">True</span></span><br><span class="line">        except (<span class="title class_">TypeError</span>, <span class="title class_">ValueError</span>):</span><br><span class="line">            pass</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_csv</span>(<span class="params"><span class="variable language_">self</span>,path,ori_path,label_path</span>):</span><br><span class="line">        df = pd.read_csv(path)</span><br><span class="line">        numdata = pd.<span class="title class_">DataFrame</span>() <span class="comment">#数字特征</span></span><br><span class="line">        <span class="keyword">for</span> idx, row <span class="keyword">in</span> df.iterrows():  <span class="comment"># 遍历 DataFrame</span></span><br><span class="line">            <span class="keyword">if</span> readData.is_number(<span class="variable language_">self</span>,row[<span class="string">&#x27;Value&#x27;</span>])<span class="symbol">:</span><span class="comment">#存储数字结果</span></span><br><span class="line">                numdata = numdata.append(&#123;<span class="string">&#x27;Feature&#x27;</span>: row[<span class="string">&#x27;Feature&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>: row[<span class="string">&#x27;Value&#x27;</span>]&#125;, ignore_index=<span class="title class_">True</span>)</span><br><span class="line">        <span class="comment">#for idx, row in numdata.iterrows():  # 遍历 特征文件并提取所有的有数字特征</span></span><br><span class="line">            <span class="comment">#print(idx, row[&#x27;Value&#x27;])</span></span><br><span class="line">        <span class="title class_">DataProsess</span>.visData(<span class="variable language_">self</span>,numdata,ori_path,label_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataProsess</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        pass</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">visData</span>(<span class="params"><span class="variable language_">self</span>,numdata,ori_path,label_path</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ori_path = ori_path</span><br><span class="line">        <span class="variable language_">self</span>.label_path = label_path</span><br><span class="line">        <span class="variable language_">self</span>.numdata = numdata</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.vtkWidget = <span class="title class_">QVTKRenderWindowInteractor</span>()</span><br><span class="line">        <span class="variable language_">self</span>.gridlayout = <span class="title class_">QGridLayout</span>(<span class="variable language_">self</span>.graphicsView_2)</span><br><span class="line">        <span class="variable language_">self</span>.gridlayout.addWidget(<span class="variable language_">self</span>.vtkWidget)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.vtkWidget_2 = <span class="title class_">QVTKRenderWindowInteractor</span>()</span><br><span class="line">        <span class="variable language_">self</span>.gridlayout_2 = <span class="title class_">QGridLayout</span>(<span class="variable language_">self</span>.graphicsView_3)</span><br><span class="line">        <span class="variable language_">self</span>.gridlayout_2.addWidget(<span class="variable language_">self</span>.vtkWidget_2)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Vis</span>_3D.readData(<span class="variable language_">self</span>,ori_path,label_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vis</span>_3D(<span class="title class_">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">readData</span>(<span class="params"><span class="variable language_">self</span>,ori_path,label_path</span>):</span><br><span class="line">        normal = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.cmap = <span class="string">&quot;gist_stern_r&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.cmap2 = <span class="string">&quot;viridis_r&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">w, _</span>):</span><br><span class="line">            c, n = <span class="variable language_">self</span>.pcutter.origin, <span class="variable language_">self</span>.pcutter.normal</span><br><span class="line">            vslice = <span class="variable language_">self</span>.vol.slice_plane(c, n, autocrop=<span class="title class_">True</span>, border=<span class="number">1.0</span>).cmap(<span class="string">&#x27;bone&#x27;</span>)  <span class="comment"># 给动态的切割面一个原点和一条法线</span></span><br><span class="line">            vslice.name = <span class="string">&quot;Slice&quot;</span></span><br><span class="line">            vslice2 = <span class="variable language_">self</span>.vol2.slice_plane(c, n, autocrop=<span class="title class_">True</span>, border=<span class="number">1.0</span>).cmap(<span class="variable language_">self</span>.cmap2)  <span class="comment"># 给动态的切割面一个原点和一条法线</span></span><br><span class="line">            vslice2.name = <span class="string">&quot;Slice2&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>.plt2.show(vslice, __doc__)  <span class="comment"># 少加点就行了...</span></span><br><span class="line"></span><br><span class="line">        itk_img = itk.imread(filename=ori_path)</span><br><span class="line">        vtk_img = itk.vtk_image_from_image(l_image=itk_img)</span><br><span class="line">        <span class="variable language_">self</span>.vol = <span class="title class_">Volume</span>(vtk_img).cmap(<span class="string">&quot;gist_stern_r&quot;</span>)</span><br><span class="line">        itk_img = itk.imread(filename=label_path)</span><br><span class="line">        vtk_img = itk.vtk_image_from_image(l_image=itk_img)</span><br><span class="line">        <span class="variable language_">self</span>.vol2 = <span class="title class_">Volume</span>(vtk_img).cmap(<span class="string">&quot;viridis_r&quot;</span>)</span><br><span class="line"></span><br><span class="line">        vslice = <span class="variable language_">self</span>.vol.slice_plane(<span class="variable language_">self</span>.vol.center(), normal).cmap(<span class="string">&quot;bone&quot;</span>)</span><br><span class="line">        vslice.name = <span class="string">&quot;Slice&quot;</span></span><br><span class="line">        vslice2 = <span class="variable language_">self</span>.vol2.slice_plane(<span class="variable language_">self</span>.vol2.center(), normal).cmap(<span class="string">&quot;bone&quot;</span>)</span><br><span class="line">        vslice.name = <span class="string">&quot;Slice2&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.plt = <span class="title class_">Plotter</span>(axes=<span class="number">8</span>, N=<span class="number">1</span>, bg=<span class="string">&quot;k&quot;</span>, bg2=<span class="string">&quot;bb&quot;</span>, interactive=<span class="title class_">True</span>,qt_widget=<span class="variable language_">self</span>.vtkWidget)  <span class="comment"># N:desired renderers,可以qt_windows,sharecam,</span></span><br><span class="line">        <span class="variable language_">self</span>.plt.interactive()</span><br><span class="line">        <span class="variable language_">self</span>.plt.show(<span class="variable language_">self</span>.vol,<span class="variable language_">self</span>.vol2, __doc__,  zoom=<span class="number">1.5</span>)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.plt2 = <span class="title class_">Plotter</span>(axes=<span class="number">8</span>, N=<span class="number">1</span>, bg=<span class="string">&quot;k&quot;</span>, bg2=<span class="string">&quot;bb&quot;</span>, interactive=<span class="title class_">True</span>, qt_widget=<span class="variable language_">self</span>.vtkWidget_2)</span><br><span class="line">        <span class="comment">#右侧的切面模型</span></span><br><span class="line">        <span class="variable language_">self</span>.pcutter = <span class="title class_">PlaneCutter</span>(</span><br><span class="line">            vslice,</span><br><span class="line">            normal=normal,  <span class="comment"># 平面的法线，此处赋值为平面法线</span></span><br><span class="line">            alpha=<span class="number">0</span>,  <span class="comment"># 输入网络截止部分的透明度</span></span><br><span class="line">            c=(<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.25</span>),</span><br><span class="line">            padding=<span class="number">0</span>,</span><br><span class="line">            can_translate=<span class="title class_">True</span>,</span><br><span class="line">            can_scale=<span class="title class_">True</span>,  <span class="comment"># 启用部件的缩放功能</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.pcutter.add_observer(<span class="string">&quot;interaction&quot;</span>, func)</span><br><span class="line">        <span class="variable language_">self</span>.plt2.at(<span class="number">0</span>).add(<span class="variable language_">self</span>.pcutter)</span><br><span class="line">        <span class="variable language_">self</span>.plt2.interactive()</span><br><span class="line">        <span class="variable language_">self</span>.plt2.show(vslice, __doc__)  <span class="comment"># 少加点就行了...</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.arr = vslice.pointdata[<span class="number">0</span>]  <span class="comment"># retrieve vertex array data</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">flatFunc</span>(<span class="params">evt</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> evt.<span class="symbol">actor:</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="symbol">try:</span></span><br><span class="line">                pid = evt.actor.closest_point(evt.picked3d, return_point_id=<span class="title class_">True</span>)</span><br><span class="line">            except <span class="title class_">AttributeError</span>:</span><br><span class="line">                pass</span><br><span class="line">            <span class="symbol">else:</span></span><br><span class="line">                txt = f<span class="string">&quot;Position:&#123;precision(evt.actor.picked3d, 3)&#125;\noriginal_shape_MeshVolume = &#123;self.arr[pid]&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">                pts = evt.actor.points()</span><br><span class="line">                sph = <span class="title class_">Sphere</span>(pts[pid], c=<span class="string">&#x27;orange7&#x27;</span>).pickable(<span class="title class_">True</span>)</span><br><span class="line">                fp = sph.flagpole(txt, s=<span class="number">7</span>, offset=(-<span class="number">150</span>, <span class="number">15</span>), font=<span class="number">2</span>).follow_camera()</span><br><span class="line">                <span class="comment"># remove old and add the two new objects</span></span><br><span class="line">                <span class="variable language_">self</span>.plt.remove(<span class="string">&#x27;Sphere&#x27;</span>, <span class="string">&#x27;FlagPole&#x27;</span>).add(sph, fp).render()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.arr = vslice.pointdata[<span class="number">0</span>]  <span class="comment"># retrieve vertex array data</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">flatFunc_3D</span>(<span class="params">evt</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> evt.<span class="symbol">actor:</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="symbol">try:</span></span><br><span class="line">                pid = evt.actor.closest_point(evt.picked2d, return_point_id=<span class="title class_">True</span>)</span><br><span class="line">            except <span class="title class_">AttributeError</span>:</span><br><span class="line">                pass</span><br><span class="line">            <span class="symbol">else:</span></span><br><span class="line">                <span class="keyword">for</span> idx,row <span class="keyword">in</span> <span class="variable language_">self</span>.numdata[<span class="symbol">:</span><span class="number">5</span>].iterrows():</span><br><span class="line">                    txt = idx[<span class="string">&#x27;Feature&#x27;</span>] + f<span class="string">&quot;idx:&#123;row[&#x27;Value&#x27;]&#125;\noriginal_shape_MeshVolume = &#123;self.arr[pid]&#125;&quot;</span></span><br><span class="line">                pts = evt.actor.vertics()</span><br><span class="line">                sph = <span class="title class_">Sphere</span>(pts[pid], c=<span class="string">&#x27;orange7&#x27;</span>).pickable(<span class="title class_">True</span>)</span><br><span class="line">                fp = sph.flagpole(txt, s=<span class="number">7</span>, offset=(-<span class="number">150</span>, <span class="number">15</span>), font=<span class="number">2</span>).follow_camera()</span><br><span class="line">                <span class="comment"># remove old and add the two new objects</span></span><br><span class="line">                <span class="variable language_">self</span>.plt2.remove(<span class="string">&#x27;Sphere&#x27;</span>, <span class="string">&#x27;FlagPole&#x27;</span>).add(sph, fp).render()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.plt.add_callback(<span class="string">&#x27;as my mouse moves please call&#x27;</span>, flatFunc)  <span class="comment"># be kind to vedo ;)</span></span><br><span class="line">        <span class="variable language_">self</span>.plt2.add_callback(<span class="string">&#x27;MouseClick&#x27;</span>, flatFunc_3D)</span><br></pre></td></tr></table></figure>

<h2 id="New-UI单模态的可视化"><a href="#New-UI单模态的可视化" class="headerlink" title="New_UI单模态的可视化"></a>New_UI单模态的可视化</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import nibabel</span><br><span class="line">from <span class="title class_">PyQt5</span> import uic</span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtCore</span> import <span class="title class_">Qt</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtGui</span> import <span class="title class_">QColor</span></span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import <span class="title class_">QDialog</span>, <span class="title class_">QGraphicsDropShadowEffect</span>, <span class="title class_">QMainWindow</span>, <span class="title class_">QFileDialog</span>, <span class="title class_">QGridLayout</span></span><br><span class="line"></span><br><span class="line">import nibabel as nib</span><br><span class="line">from pathlib import <span class="title class_">Path</span></span><br><span class="line"></span><br><span class="line">from <span class="title class_">RadiomicsPage</span> import <span class="title class_">RadiomicsFunc</span></span><br><span class="line">from VTK_new import <span class="title class_">SimpleView</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import HeterogeneityCAD</span></span><br><span class="line">from <span class="title class_">DlpFeatures</span> import <span class="title class_">DLPExtractor</span></span><br><span class="line"><span class="comment">#from RadioMLPage import RadioML</span></span><br><span class="line"></span><br><span class="line">import matplotlib</span><br><span class="line"></span><br><span class="line">matplotlib.use(<span class="string">&quot;Qt5Agg&quot;</span>)  <span class="comment"># 声明使用QT5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui</span>_MainDialog(<span class="title class_">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.dia = uic.loadUi(<span class="string">&quot;New_UI.ui&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.initDia()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initDia</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.dia.textBrowser_2.append(</span><br><span class="line">            <span class="string">&quot;Extracmator is a free open source software platform for medical image progressing and 3D visualization of image data.&quot;</span></span><br><span class="line">            <span class="string">&quot;This mudule contains some basic methods to visualize and give anlaysis of medical image computing data sets.\n&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dia.textBrowser_3.append(</span><br><span class="line">            <span class="string">&quot;You can perform basic traditional radiomics analysis by doing this:\n&quot;</span></span><br><span class="line">                <span class="string">&quot;1.Click &#x27;Input Label&#x27; and select your ROI\n&quot;</span></span><br><span class="line">                <span class="string">&quot;2.Click &#x27;Input Image&#x27; and select your brain image\n&quot;</span></span><br><span class="line">                <span class="string">&quot;3.Choose Pyradiomics and select the settings you need. If you&#x27;re not sure about that, commonSettings and choosing your output table path will be fine.\n&quot;</span></span><br><span class="line">                <span class="string">&quot;4.You can name the output csv.\n&quot;</span></span><br><span class="line">                <span class="string">&quot;5.Click the &#x27;Apply&#x27; to see the visual analysis.If you&#x27;re satisfied with that, click &#x27;Save Data&#x27; to save it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置页面样式</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.setWindowFlag(<span class="title class_">Qt</span>.<span class="title class_">FramelessWindowHint</span>)  <span class="comment"># 将界面设置为无框</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.setAttribute(<span class="title class_">Qt</span>.WA_TranslucentBackground)  <span class="comment"># 将界面属性设置为半透明</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.shadow = <span class="title class_">QGraphicsDropShadowEffect</span>()  <span class="comment"># 设定一个阴影,半径为10,颜色为#444444,定位为0,0</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.shadow.setBlurRadius(<span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dia.shadow.setColor(<span class="title class_">QColor</span>(<span class="string">&quot;#444444&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.dia.shadow.setOffset(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dia.frame.setGraphicsEffect(<span class="variable language_">self</span>.dia.shadow)  <span class="comment"># 为frame设定阴影效果</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.progressBar = <span class="variable language_">self</span>.progressBar</span><br><span class="line">        <span class="variable language_">self</span>.progressBar.setMinimum(<span class="number">0</span>)<span class="comment"># 将进度条最小值设为0</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_close.clicked.connect(<span class="variable language_">self</span>.quit_button)</span><br><span class="line">        <span class="variable language_">self</span>.dia.listWidget.itemClicked.connect(<span class="variable language_">self</span>.<span class="title class_">ChangePage</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dia.listWidget_2.itemClicked.connect(<span class="variable language_">self</span>.<span class="title class_">ChangePage</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.<span class="title class_">Actions</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Actions</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="comment"># 初始化属性</span></span><br><span class="line">        <span class="variable language_">self</span>.ori_path = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 上传图片</span></span><br><span class="line">        <span class="variable language_">self</span>.data2 =<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.pushButton.clicked.connect(<span class="variable language_">self</span>.bindButton)</span><br><span class="line">        <span class="variable language_">self</span>.dia.pushButton_ori.clicked.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.oriImg())  <span class="comment"># 上传图像</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="title class_">RadiomicsPart</span>()</span><br><span class="line">        <span class="variable language_">self</span>.<span class="title class_">DLPart</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getImage</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            data_nii = nib.load(<span class="variable language_">self</span>.ori_path)</span><br><span class="line">        except <span class="title class_">FileNotFoundError</span>:</span><br><span class="line">            pass</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            data = data_nii.get_fdata()</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取并展示全图</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">oriImg</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        file_name = <span class="title class_">QFileDialog</span>.getOpenFileName(<span class="title class_">None</span>, <span class="string">&quot;Open File&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;nii(*.nii.gz;*.nii;*.nrrd)&quot;</span>)</span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            <span class="variable language_">self</span>.ori_path = file_name[<span class="number">0</span>]  <span class="comment"># 提取文件路径</span></span><br><span class="line">        except nibabel.filebasedimages.<span class="title class_">ImageFileError</span>:</span><br><span class="line">            pass</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="title class_">SimpleView</span>.<span class="title class_">VisNii</span>(<span class="variable language_">self</span>, <span class="variable language_">self</span>.nii_path, <span class="variable language_">self</span>.ori_path)</span><br><span class="line">            <span class="variable language_">self</span>.showimage()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示切片</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showimage</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = <span class="variable language_">self</span>.getImage()</span><br><span class="line">        data1 = <span class="variable language_">self</span>.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RadiomicsPart</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="comment"># radiomics函数调用</span></span><br><span class="line">        <span class="variable language_">self</span>.nii_path = <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span> = <span class="title class_">RadiomicsFunc</span>()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.dia.radioButton_Para_Cus.clicked.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.cusParaSet(<span class="variable language_">self</span>.lineEdit_fileName_2))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.dia.groupBox_2.<span class="symbol">isChecked:</span></span><br><span class="line">            <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.setupParaFile()</span><br><span class="line">        <span class="variable language_">self</span>.dia.comboBox_ImgType.currentIndexChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">Change</span>(</span><br><span class="line">            <span class="variable language_">self</span>.comboBox_ImgType.currentIndex()))<span class="comment">#检查是否为第一项，如果如果是，允许选择特征</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.comboBox_ImgType.currentIndexChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">ImgType</span>_init(</span><br><span class="line">            <span class="variable language_">self</span>.comboBox_ImgType.currentIndex()))  <span class="comment"># currentIndex返回当前项的序号(int)，第一个项的序号为0</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.dia.comboBox_ImgType.currentIndexChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.stackedWidget.setCurrentIndex(</span><br><span class="line">            <span class="variable language_">self</span>.comboBox_ImgType.currentIndex()-<span class="number">1</span>))<span class="comment">#对应换页</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.<span class="title class_">PycheckStatus</span>()</span><br><span class="line">        <span class="variable language_">self</span>.save_name = <span class="string">&#x27;Features_Result&#x27;</span> <span class="comment">#给特征文件一个初始的名字</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.save_path = <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.pushButton_4.clicked.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.getSavePath())  <span class="comment"># 获取文件输出地址</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.lineEdit_fileName.textEdited[str].connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.onChange1(<span class="variable language_">self</span>.dia.lineEdit_fileName)) <span class="comment"># 实时获取文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.dia.pushButton_6.clicked.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.outPuts(<span class="variable language_">self</span>.save_path,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.save_name,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.nii_path,<span class="title class_">True</span>,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.ori_path,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.label_path)) <span class="comment">#保存数据</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.pushButton_2.clicked.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.outPuts(<span class="variable language_">self</span>.save_path,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.save_name,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.nii_path,<span class="title class_">True</span>,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.ori_path,</span><br><span class="line">                                                                                 <span class="variable language_">self</span>.label_path)) <span class="comment">#保存数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">DLPart</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.batch_path = <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.pushButton_8.clicked.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.getBatchPath())  <span class="comment"># 批量导入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#选择网络类型,序号从0开始</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.comboBox_NetType.currentIndexChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">DlpFeatures</span>.netSet(</span><br><span class="line">            <span class="variable language_">self</span>.comboBox_NetType.currentIndex()))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.<span class="title class_">DlpFeatures</span> = <span class="title class_">DLPExtractor</span>(<span class="variable language_">self</span>.dia.progressBar)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#选择网络</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实时获取文件名</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.lineEdit_fileName_3.textEdited[str].connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.onChange1(<span class="variable language_">self</span>.dia.lineEdit_fileName_3))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 点击Apply图片转化</span></span><br><span class="line">        <span class="variable language_">self</span>.save_path = <span class="string">&#x27;D:/www/xxx/Pytorch/Braintumor/PyQt_test/Result/&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.dia.pushButton_7.clicked.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">DlpFeatures</span>.converts(<span class="variable language_">self</span>.batch_path,<span class="variable language_">self</span>.save_path,<span class="variable language_">self</span>.dia.textBrowser,<span class="variable language_">self</span>.save_name) ) <span class="comment">#nii_path, outputfile</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    def RadioML(self):</span></span><br><span class="line"><span class="string">        self.dia.pushButton_11(lambda : RadioML.Main())</span></span><br><span class="line"><span class="string">        self.dia.pushButton_17(lambda: RadioML.Features())</span></span><br><span class="line"><span class="string">        self.dia.pushButton_18(lambda: RadioML.Score())</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    def HCADPart(self):</span></span><br><span class="line"><span class="string">        self.dia.pushButton_Reload.connect(self.bindButton)</span></span><br><span class="line"><span class="string">        self.dia.pushButton_AllNodes.connect(self.getBatchPath())</span></span><br><span class="line"><span class="string">        self.dia.pushButton_Remove.connect(self.delete()) #删除路径函数</span></span><br><span class="line"><span class="string">        self.dia.pushButton_RemoveAll(self.deleteAll()) #删除所有</span></span><br><span class="line"><span class="string">        self.dia.pushButton_SecROI(self.getROI()) #获取ROI</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getBatchPath</span>(<span class="params"><span class="variable language_">self</span></span>): <span class="comment">#批量导入</span></span><br><span class="line">        batch_path = <span class="title class_">QFileDialog</span>.getExistingDirectory(<span class="variable language_">self</span>, <span class="string">&quot;choose directory&quot;</span>, <span class="string">&quot;./&quot;</span>)</span><br><span class="line">        batch_path =  batch_path + <span class="string">&#x27;/&#x27;</span> <span class="comment">#在这里提取了地址之后给他加一个下级，转字符，这样可以直接调用下部文件夹</span></span><br><span class="line">        <span class="variable language_">self</span>.batch_path =  batch_path</span><br><span class="line">        print(<span class="variable language_">self</span>.batch_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSavePath</span>(<span class="params"><span class="variable language_">self</span></span>):  <span class="comment"># 获取存储地址</span></span><br><span class="line">        <span class="variable language_">self</span>.save_path = <span class="title class_">QFileDialog</span>.getExistingDirectory(<span class="variable language_">self</span>, <span class="string">&quot;choose directory&quot;</span>, <span class="string">&quot;./&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onChange1</span>(<span class="params"><span class="variable language_">self</span>,lineEdit</span>): <span class="comment">#实时获取文件名</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="variable constant_">VAR</span> = lineEdit.text()<span class="comment"># 设置保存特征的csv文件名</span></span><br><span class="line">        <span class="variable language_">self</span>.save_name = <span class="variable language_">self</span>.<span class="variable constant_">VAR</span></span><br><span class="line">        print(<span class="variable language_">self</span>.<span class="variable constant_">VAR</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Change</span>(<span class="params"><span class="variable language_">self</span>,tag</span>):</span><br><span class="line">        <span class="keyword">if</span> tag == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>.groupBox.setCheckable(<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ChangePage</span>(<span class="params"><span class="variable language_">self</span>,item</span>): <span class="comment">#list中点击对应右侧换行</span></span><br><span class="line">        index = <span class="variable language_">self</span>.dia.listWidget.row(item)</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">2</span>:</span><br><span class="line">            <span class="variable language_">self</span>.display1()</span><br><span class="line">        elif index==<span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>.display2()</span><br><span class="line">        elif index==<span class="number">3</span>:</span><br><span class="line">            <span class="variable language_">self</span>.display3()</span><br><span class="line">        elif index == <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.display5()</span><br><span class="line">        index = <span class="variable language_">self</span>.dia.listWidget_2.row(item)</span><br><span class="line">        <span class="keyword">if</span> index== <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.display4()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display1</span>(<span class="params"><span class="variable language_">self</span></span>): <span class="comment"># Dlp</span></span><br><span class="line">        <span class="variable language_">self</span>.stackedWidget_2.setCurrentIndex(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display2</span>(<span class="params"><span class="variable language_">self</span></span>): <span class="comment">#Pyradiomics</span></span><br><span class="line">        <span class="variable language_">self</span>.stackedWidget_2.setCurrentIndex(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display3</span>(<span class="params"><span class="variable language_">self</span></span>)<span class="symbol">:</span><span class="comment">#Here</span></span><br><span class="line">        <span class="variable language_">self</span>.stackedWidget_2.setCurrentIndex(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display4</span>(<span class="params"><span class="variable language_">self</span></span>): <span class="comment">#RadioML</span></span><br><span class="line">        <span class="variable language_">self</span>.stackedWidget_2.setCurrentIndex(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display5</span>(<span class="params"><span class="variable language_">self</span></span>): <span class="comment"># Wel</span></span><br><span class="line">        <span class="variable language_">self</span>.stackedWidget_2.setCurrentIndex(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PycheckStatus</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Nor1.stateChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Nor(<span class="variable language_">self</span>.dia.checkBox_Nor1.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Nor2.stateChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Nor(<span class="variable language_">self</span>.dia.checkBox_Nor2.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Nor3.stateChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Nor(<span class="variable language_">self</span>.dia.checkBox_Nor3.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Nor4.stateChanged.connect(<span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Nor(<span class="variable language_">self</span>.dia.checkBox_Nor4.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_15.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_FirstSpe(<span class="variable language_">self</span>.dia.checkBox_15.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_14.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_FirstSpe2(<span class="variable language_">self</span>.dia.checkBox_14.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_12.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_NFirstSpe2(<span class="variable language_">self</span>.dia.checkBox_12.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_13.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_FirstSpe2(<span class="variable language_">self</span>.dia.checkBox_13.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Mas4.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Mask(<span class="variable language_">self</span>.dia.checkBox_Mas4.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Mas3.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Mask(<span class="variable language_">self</span>.dia.checkBox_Mas3.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Mas2.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Mask(<span class="variable language_">self</span>.dia.checkBox_Mas2.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Mas1.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Mask(<span class="variable language_">self</span>.dia.checkBox_Mas1.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Mis2.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Misc(<span class="variable language_">self</span>.dia.checkBox_Mis2.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Res1.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Resampling(<span class="variable language_">self</span>.dia.checkBox_Res1.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Res3.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Resampling(<span class="variable language_">self</span>.dia.checkBox_Res3.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_2D1.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_2D(<span class="variable language_">self</span>.dia.checkBox_2D.isChecked()))</span><br><span class="line">        <span class="variable language_">self</span>.dia.checkBox_Voxel.stateChanged.connect(</span><br><span class="line">            <span class="symbol">lambda:</span> <span class="variable language_">self</span>.<span class="title class_">RadiomicsFunc</span>.<span class="title class_">Add</span>_Voxel(<span class="variable language_">self</span>.dia.checkBox_Voxel.isChecked()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bindButton</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        file_name = <span class="title class_">QFileDialog</span>.getOpenFileName(<span class="title class_">None</span>, <span class="string">&quot;Open File&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;nii(*.nii.gz;*.nii;*.nrrd)&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.nii_path = file_name[<span class="number">0</span>]  <span class="comment"># 提取文件路径</span></span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            <span class="variable language_">self</span>.data_mask = nib.load(<span class="title class_">Path</span>(<span class="variable language_">self</span>.nii_path))</span><br><span class="line">        except nibabel.filebasedimages.<span class="title class_">ImageFileError</span>:</span><br><span class="line">            pass</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="variable language_">self</span>.data2 = <span class="variable language_">self</span>.data_mask.get_fdata()</span><br><span class="line">            <span class="title class_">SimpleView</span>.<span class="title class_">VisNii</span>(<span class="variable language_">self</span>, <span class="variable language_">self</span>.nii_path, <span class="variable language_">self</span>.ori_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bindSlider</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        slice_idx = <span class="variable language_">self</span>.horizontalSlider.value()</span><br><span class="line">        <span class="variable language_">self</span>.showimage(slice_idx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quit_button</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params"><span class="variable language_">self</span>, event</span>):  <span class="comment"># 鼠标左键按下时获取鼠标坐标,按下右键取消</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == <span class="title class_">Qt</span>.<span class="title class_">LeftButton</span>:</span><br><span class="line">            <span class="variable language_">self</span>.m_flag = <span class="title class_">True</span></span><br><span class="line">            <span class="variable language_">self</span>.m_Position = event.globalPos() - <span class="variable language_">self</span>.pos()</span><br><span class="line">            event.accept()</span><br><span class="line">        elif event.button() == <span class="title class_">Qt</span>.<span class="title class_">RightButton</span>:</span><br><span class="line">            <span class="variable language_">self</span>.m_flag = <span class="title class_">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params"><span class="variable language_">self</span>, <span class="title class_">QMouseEvent</span></span>):  <span class="comment"># 鼠标在按下左键的情况下移动时,根据坐标移动界面</span></span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="title class_">Qt</span>.<span class="title class_">LeftButton</span> <span class="keyword">and</span> <span class="variable language_">self</span>.<span class="symbol">m_flag:</span></span><br><span class="line">                <span class="variable language_">self</span>.move(<span class="title class_">QMouseEvent</span>.globalPos() - <span class="variable language_">self</span>.m_Position)</span><br><span class="line">                <span class="title class_">QMouseEvent</span>.accept()</span><br><span class="line">        except <span class="title class_">AttributeError</span>:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params"><span class="variable language_">self</span>, <span class="title class_">QMouseEvent</span></span>):  <span class="comment"># 鼠标按键释放时,取消移动</span></span><br><span class="line">        <span class="variable language_">self</span>.m_flag = <span class="title class_">False</span></span><br></pre></td></tr></table></figure>

<h2 id="PyRadiomicsPage"><a href="#PyRadiomicsPage" class="headerlink" title="PyRadiomicsPage"></a>PyRadiomicsPage</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtCore</span> import pyqtSignal</span><br><span class="line">from radiomics import featureextractor as <span class="variable constant_">FEE</span> <span class="comment"># This module is used for interaction with pyradiomics</span></span><br><span class="line">import yaml</span><br><span class="line"></span><br><span class="line">from <span class="title class_">PyQt5</span> import uic</span><br><span class="line">from <span class="title class_">PyQt5</span>.<span class="title class_">QtWidgets</span> import <span class="title class_">QDialog</span>, <span class="title class_">QFileDialog</span>, <span class="title class_">QApplication</span></span><br><span class="line"></span><br><span class="line">from <span class="title class_">DataProsessing</span> import child</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RadiomicsFunc</span>(<span class="title class_">QDialog</span>):</span><br><span class="line">    isChecked = pyqtSignal(int)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.dia = uic.loadUi(<span class="string">&quot;New_UI.ui&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建参数文件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupParaFile</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.para_path = <span class="string">&#x27;./ParaFile/Param.yml&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ImgType_init</span>(<span class="params"><span class="variable language_">self</span>,tag</span>):</span><br><span class="line">        <span class="variable language_">self</span>.para_path = <span class="string">&#x27;./ParaFile/Param.yml&#x27;</span></span><br><span class="line">        settingData = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">            <span class="keyword">if</span> tag == <span class="number">1</span>: <span class="comment">#Original</span></span><br><span class="line">                <span class="variable language_">self</span>.displayOri()</span><br><span class="line">            elif tag == <span class="number">2</span>:</span><br><span class="line">                <span class="variable language_">self</span>.displayCT()</span><br><span class="line">            elif tag == <span class="number">3</span>:</span><br><span class="line">                <span class="variable language_">self</span>.displayMR3()</span><br><span class="line">            elif tag == <span class="number">4</span>:</span><br><span class="line">                <span class="variable language_">self</span>.displayMR5()</span><br><span class="line">            elif tag == <span class="number">5</span>:</span><br><span class="line">                <span class="variable language_">self</span>.displayMR()</span><br><span class="line">            yaml.dump(data=settingData, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">featureSet</span>(<span class="params"><span class="variable language_">self</span></span>)<span class="symbol">:</span><span class="comment">#get10PercentileFeatureValue():获取百分之十的特征值</span></span><br><span class="line">        <span class="comment"># 写入的数据类型是字典</span></span><br><span class="line">        featureData = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span><span class="comment">#如果没有选择特征计算，那么自动全选，排除不推荐的功能</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.checkBox_First.isChecked():</span><br><span class="line">                featureData[<span class="string">&quot;featureClass&quot;</span>] = &#123;<span class="string">&quot;firstorder&quot;</span>: [] &#125;</span><br><span class="line">                <span class="comment">#self.tabWidget.setTabEnabled(1)</span></span><br><span class="line">            <span class="comment">#else:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.checkBox_shape.isChecked():</span><br><span class="line">                featureData[<span class="string">&quot;featureClass&quot;</span>] = &#123;<span class="string">&quot;shape&quot;</span>: [] &#125;</span><br><span class="line">                <span class="comment">#self.tabWidget.setTabEnabled(2)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.checkBox_glcm.isChecked():</span><br><span class="line">                featureData[<span class="string">&quot;featureClass&quot;</span>] = &#123;<span class="string">&quot;glcm&quot;</span>: [] &#125;</span><br><span class="line">                <span class="comment">#self.tabWidget.setTabEnabled(3)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.checkBox_glrlm.isChecked():</span><br><span class="line">                featureData[<span class="string">&quot;featureClass&quot;</span>] = &#123;<span class="string">&quot;glrlm&quot;</span>: []&#125;</span><br><span class="line">                <span class="comment">#self.tabWidget.setTabEnabled(4)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.checkBox_glszm.isChecked():</span><br><span class="line">                featureData[<span class="string">&quot;featureClass&quot;</span>] = &#123;<span class="string">&quot;glszm&quot;</span>: [] &#125;</span><br><span class="line">                <span class="comment">#self.tabWidget.setTabEnabled(5)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.checkBox_gldm.isChecked():</span><br><span class="line">                featureData[<span class="string">&quot;featureClass&quot;</span>] = &#123;<span class="string">&quot;gldm&quot;</span>: [] &#125;</span><br><span class="line">                <span class="comment">#self.tabWidget.setTabEnabled(6)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.checkBox_ngtdm.isChecked():</span><br><span class="line">                 featureData[<span class="string">&quot;featureClass&quot;</span>] = &#123;<span class="string">&quot;ngtdm&quot;</span>: [] &#125;</span><br><span class="line">                 <span class="comment">#self.tabWidget.setTabEnable(7)</span></span><br><span class="line">            yaml.dump(data=featureData, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">outPuts</span>(<span class="params"><span class="variable language_">self</span>,place,name,nii_path,ifsave,ori_path,label_path</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ori_path = ori_path</span><br><span class="line">        <span class="variable language_">self</span>.label_path = label_path</span><br><span class="line">        <span class="comment"># 使用配置文件初始化特征抽取器</span></span><br><span class="line">        extractor = <span class="variable constant_">FEE</span>.<span class="title class_">RadiomicsFeatureExtractor</span>(parameter_file=<span class="variable language_">self</span>.para_path)</span><br><span class="line">        save_path = name + <span class="string">&#x27;.csv&#x27;</span></span><br><span class="line">        <span class="comment">#print(save_path)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 运行程序，提取特征</span></span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            result = extractor.execute(ori_path, nii_path)  <span class="comment"># 抽取特征，第一个是原图像，第二个是ROI</span></span><br><span class="line">        except <span class="title class_">ValueError</span>:</span><br><span class="line">            result = extractor.execute(ori_path, nii_path, label=<span class="number">2</span>)</span><br><span class="line">        type(result)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 储存数据</span></span><br><span class="line">        df = pd.<span class="title class_">DataFrame</span>()</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> result.items():</span><br><span class="line">            <span class="comment"># 如果当前特征是所选特征之一，则将其添加到 DataFrame</span></span><br><span class="line">            <span class="comment"># if key in selected_features:</span></span><br><span class="line">            df = df.append(&#123;<span class="string">&#x27;Feature&#x27;</span>: key, <span class="string">&#x27;Value&#x27;</span>: value&#125;, ignore_index=<span class="title class_">True</span>)</span><br><span class="line">            <span class="comment"># 清空，进行下一次遍历</span></span><br><span class="line">            ori_path = <span class="title class_">None</span></span><br><span class="line">            lab_path = <span class="title class_">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ifsave == <span class="title class_">True</span> :</span><br><span class="line">            <span class="comment"># 将 DataFrame 保存为 CSV 文件</span></span><br><span class="line">            df.to_csv(save_path, index=<span class="title class_">False</span>)</span><br><span class="line">            <span class="title class_">RadiomicsFunc</span>.invokeDialog_1(<span class="variable language_">self</span>, save_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 界面弹出</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invokeDialog_1</span>(<span class="params"><span class="variable language_">self</span>,path</span>):</span><br><span class="line">        <span class="comment">#app1 = QApplication(sys.argv)</span></span><br><span class="line">        dialog = child(path,<span class="variable language_">self</span>.ori_path,<span class="variable language_">self</span>.label_path)</span><br><span class="line">        <span class="comment">#child.read(dialog,path,self.ori_path,self.label_path)  #数据可视化</span></span><br><span class="line">        dialog.exec()</span><br><span class="line">        <span class="comment">#sys.exit(app1.exec_())</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayOri</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        with open(<span class="string">&#x27;./ParaFile/exampleCT.yaml&#x27;</span>, <span class="string">&quot;rb&quot;</span>) as <span class="symbol">ff:</span></span><br><span class="line">            content = ff.read()</span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&quot;ab&quot;</span>) as <span class="symbol">f2:</span></span><br><span class="line">                <span class="comment"># 将读取的数据写入到新的对象中</span></span><br><span class="line">                f2.write(content)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayCT</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        with open(<span class="string">&#x27;./ParaFile/exampleCT.yaml&#x27;</span>, <span class="string">&quot;rb&quot;</span>) as <span class="symbol">ff:</span></span><br><span class="line">            content = ff.read()</span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&quot;ab&quot;</span>) as <span class="symbol">f2:</span></span><br><span class="line">                <span class="comment"># 将读取的数据写入到新的对象中</span></span><br><span class="line">                f2.write(content)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayMR3</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        with open(<span class="string">&#x27;./ParaFile/exampleMR_3mm.yaml&#x27;</span>, <span class="string">&quot;rb&quot;</span>) as <span class="symbol">ff:</span></span><br><span class="line">            content = ff.read()</span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&quot;ab&quot;</span>) as <span class="symbol">f2:</span></span><br><span class="line">                <span class="comment"># 将读取的数据写入到新的对象中</span></span><br><span class="line">                f2.write(content)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayMR5</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        with open(<span class="string">&#x27;./ParaFile/exampleMR_5mm.yaml&#x27;</span>, <span class="string">&quot;rb&quot;</span>) as <span class="symbol">ff:</span></span><br><span class="line">            content = ff.read()</span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&quot;ab&quot;</span>) as <span class="symbol">f2:</span></span><br><span class="line">                <span class="comment"># 将读取的数据写入到新的对象中</span></span><br><span class="line">                f2.write(content)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayMR</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">        with open(<span class="string">&#x27;./ParaFile/exampleMR_NoResampling.yaml.yaml&#x27;</span>, <span class="string">&quot;rb&quot;</span>) as <span class="symbol">ff:</span></span><br><span class="line">            content = ff.read()</span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&quot;ab&quot;</span>) as <span class="symbol">f2:</span></span><br><span class="line">                <span class="comment"># 将读取的数据写入到新的对象中</span></span><br><span class="line">                f2.write(content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_Nor</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="comment"># print(str(state))</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;normalize&quot;</span>: <span class="string">&quot;True&quot;</span>, <span class="string">&quot;normalizeScale&quot;</span>: <span class="number">500</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_Mask</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;minimumROIDimensions&quot;</span>: <span class="string">&quot;2&quot;</span>, <span class="string">&quot;minimumROISize&quot;</span>: <span class="string">&quot;50&quot;</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_Bin</span>(<span class="params"><span class="variable language_">self</span>, state</span>):  <span class="comment"># 修改为带有BinWidth的输入项</span></span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span>  <span class="comment"># 可以改成binwidth的输入项</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;minimumROISize&quot;</span>: <span class="string">&quot;50&quot;</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_Misc</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;label&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_FirstSpe</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;voxelArrayShift&quot;</span>: <span class="string">&quot;1000&quot;</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_FirstSpe2</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;voxelArrayShift&quot;</span>: <span class="string">&quot;300&quot;</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_Resampling</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;interpolator &quot;</span>: <span class="string">&quot;&#x27;sitkBSpline&#x27;&quot;</span>, <span class="string">&quot;resampledPixelSpacing&quot;</span>: <span class="string">&quot; [2, 2, 2]&quot;</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_Resampling2</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">                &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;preCrop &quot;</span>: <span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                if self.dia.checkBox_4.isChecked():</span></span><br><span class="line"><span class="string">                    data[&quot;</span>setting<span class="string">&quot;] = &#123;&quot;</span>minimumROIDimensions<span class="string">&quot;: &quot;</span><span class="number">2</span><span class="string">&quot;,&quot;</span>minimumROISize<span class="string">&quot;: &quot;</span><span class="number">50</span><span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">                elif self.dia.checkBox_5.isChecked(): #可以改成binwidth的输入项</span></span><br><span class="line"><span class="string">                    data[&quot;</span>setting<span class="string">&quot;] = &#123;&quot;</span>minimumROISize<span class="string">&quot;: &quot;</span><span class="number">50</span><span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">                elif self.dia.checkBox_6.isChecked():</span></span><br><span class="line"><span class="string">                    data[&quot;</span>setting<span class="string">&quot;] = &#123;&quot;</span>voxelArrayShift<span class="string">&quot;: &quot;</span><span class="number">1000</span><span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">                elif self.dia.checkBox.isChecked():#label数的输入项</span></span><br><span class="line"><span class="string">                    data[&quot;</span>setting<span class="string">&quot;] = &#123;&quot;</span>label<span class="string">&quot;: 1&#125;</span></span><br><span class="line"><span class="string">            &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_2D</span>(<span class="params"><span class="variable language_">self</span>, state</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">            with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                    data[<span class="string">&quot;setting&quot;</span>] = &#123;<span class="string">&quot;force2D &quot;</span>: <span class="string">&quot;true&quot;</span>&#125;  <span class="comment"># 获取一个dimension，输入</span></span><br><span class="line">                yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add_Voxel</span>(<span class="params"><span class="variable language_">self</span>,state</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;  <span class="comment"># 有一个问题是会一直先输出一个空字典，还不知道怎么避免捏</span></span><br><span class="line">        with open(<span class="variable language_">self</span>.para_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="symbol">state:</span></span><br><span class="line">                data[<span class="string">&quot;voxelSetting&quot;</span>] = &#123;<span class="string">&quot;kernelRadius &quot;</span>: <span class="number">2</span>,<span class="string">&quot;maskedKernel&quot;</span><span class="symbol">:<span class="string">&quot;true&quot;</span></span>,<span class="string">&quot;initValue&quot;</span><span class="symbol">:<span class="string">&quot;nan&quot;</span></span>,<span class="string">&quot;voxelBatch&quot;</span><span class="symbol">:</span><span class="number">10000</span>&#125;  <span class="comment"># 获取一个dimension，输入</span></span><br><span class="line">            yaml.dump(data=data, stream=f, allow_unicode=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cusParaSet</span>(<span class="params"><span class="variable language_">self</span>,place</span>):</span><br><span class="line">        file_name = <span class="title class_">QFileDialog</span>.getOpenFileName(<span class="title class_">None</span>, <span class="string">&quot;Open File&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;yaml(*.yml;*.yaml)&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.para_path = file_name[<span class="number">0</span>]</span><br><span class="line">        place.setText(<span class="variable language_">self</span>.para_path)</span><br><span class="line">        <span class="comment">#读取yaml文件</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                          if tag == 1: #Original</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">Original</span><span class="string">&quot;: &#123;&#125;&#125; #写入参数设定文件</span></span><br><span class="line"><span class="string">                  self.displayOri(settingData)</span></span><br><span class="line"><span class="string">              elif tag == 2:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">Original</span><span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">                  self.displayCT(settingData)</span></span><br><span class="line"><span class="string">              elif tag == 3:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">Lo</span>G<span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              elif tag == 4:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">Square</span><span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              elif tag == 5:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">SquareRoot</span><span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              elif tag == 6:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">Logarithm</span><span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              elif tag == 7:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">Exponential</span><span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              elif tag == 8:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">Gradient</span><span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              elif tag == 9:</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">LocalBinaryPattern2</span>D<span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              else :</span></span><br><span class="line"><span class="string">                  settingData[&quot;</span>imageType<span class="string">&quot;] = &#123;&quot;</span><span class="title class_">LocalBinaryPattern3</span>D<span class="string">&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">              &quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="RadioML"><a href="#RadioML" class="headerlink" title="RadioML"></a>RadioML</h2><h3 id="直接使用python对R语言调用"><a href="#直接使用python对R语言调用" class="headerlink" title="直接使用python对R语言调用"></a>直接使用python对R语言调用</h3><p>&#96;&#96;ruby<br>#from rpy2 import robjects</p>
<p>import logging<br>import os<br>import platform<br>from functools import lru_cache<br>from rpy2.situation import get_r_home, get_rlib_path</p>
<p>def _fix_r_home():<br>    “””<br>    Fix the R_HOME env var if we need to<br>    “””<br>    r_home &#x3D; os.environ.get(“R_HOME”)<br>    #print(r_home)</p>
<pre><code>if r_home:
    os.environ[&quot;R_HOME&quot;] = r_home.replace(&quot;\\&quot;, &quot;/&quot;)

if not get_r_home():
    raise OSError(&quot;R_HOME is not set.&quot;)
</code></pre>
<p>def _add_dll_directory():<br>    “””<br>    Adds the platform’s R library path to the allowed library<br>    load dirs. Stops weird DLL loading issues if you are using<br>    R in a different path than the system install dir.</p>
<pre><code>Only applicable on Windows
&quot;&quot;&quot;

if &quot;add_dll_directory&quot; not in dir(os):
    return  # not windows

r_home = get_r_home()
system = platform.system()
dll_location = get_rlib_path(r_home, system)
dll_files_location = os.path.dirname(dll_location)

if dll_files_location not in os.getenv(&quot;PATH&quot;):
    logging.warning(f&quot;R DLL location is not in the path: &#123;dll_files_location&#125;&quot;)

# fix security in recent Python versions
os.add_dll_directory(dll_files_location)
</code></pre>
<p>@lru_cache<br>def get_robjects():<br>    “””<br>    Fix path and DLL loading issues before loading rpy2<br>    “””<br>    _fix_r_home()<br>    _add_dll_directory()</p>
<pre><code>from rpy2 import robjects
from rpy2.robjects import pandas2ri
pandas2ri.activate()

return robjects
</code></pre>
<p>class RadioML():<br>    def <strong>init</strong>(self):<br>        pass<br>    def Main(self,robjects):<br>        robjects.r.source(‘.&#x2F;RadioML-main.R’)<br>    def Features(self,robjects):<br>        robjects.r.source(‘.&#x2F;RadioML_features.R’)<br>    def Score(self,robjects):<br>        robjects.r.source(‘.&#x2F;RadioML_score.R’)</p>
<p>new_robjects &#x3D; get_robjects()<br>test &#x3D; RadioML()<br>test.Main(new_robjects)<br>#”D:&#x2F;www&#x2F;xxx&#x2F;Pytorch&#x2F;Braintumor&#x2F;PyQt_test&#x2F;lib&#x2F;RadioML-main&#x2F;RadioML_main.R”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># PyQt5的一些报错</span><br><span class="line">1. 点击run里面的edit configurations</span><br><span class="line">2. 将Emulate terminal in output console勾上后点击apply应用</span><br><span class="line">## ComboBox报错</span><br><span class="line">&gt; argument 1 has unexpected type &#x27;NoneType&#x27;</span><br><span class="line"></span><br><span class="line">[解决方法](https://deepinout.com/pyqt5/pyqt5-questions/47_pyqt5_argument_1_has_unexpected_type_nonetype.html)：`connect`中传的函数加一个`lambda`</span><br><span class="line">```ruby</span><br><span class="line">self.ui.comboBox_ImgType.currentIndexChanged.connect(lambda : self.RadiomicsFunc.ImgType_init(self.comboBox_ImgType.currentIndex()))</span><br></pre></td></tr></table></figure>
<h2 id="graphicsView刷新"><a href="#graphicsView刷新" class="headerlink" title="graphicsView刷新"></a>graphicsView刷新</h2><blockquote>
<p>QLayout: Attempting to add QLayout “” to QGraphicsView “graphicsView_4”, which already has a layout</p>
</blockquote>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>UI</tag>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title>医学伦理学</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/%E7%BB%86%E8%83%9E%E7%94%9F%E7%89%A9%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="细胞生物学的研究方法"><a href="#细胞生物学的研究方法" class="headerlink" title="细胞生物学的研究方法"></a>细胞生物学的研究方法</h1><h2 id="形态观察"><a href="#形态观察" class="headerlink" title="形态观察"></a>形态观察</h2><ul>
<li>相差显微镜：没有染色的活细胞</li>
<li>微分干涉显微镜（DIC）：凹凸的立体感</li>
<li>荧光显微镜：<ul>
<li>对细胞（膜）上组分（蛋白质核酸核糖）</li>
<li><strong>定性定位</strong>研究（存在性&amp;位置）</li>
</ul>
</li>
<li>激光共聚焦显微镜：<ul>
<li>更确切更精准更清楚地观察细胞结构</li>
<li>在Z轴（纵向）上进行“光学切片”构建三维体结构</li>
</ul>
</li>
<li>扫描电镜：样品表面形貌</li>
</ul>
<h2 id="样品操作"><a href="#样品操作" class="headerlink" title="样品操作"></a>样品操作</h2><ul>
<li>分离细胞&amp;细胞组分：差速离心、密度梯度离心</li>
<li>细胞分选：流式细胞仪</li>
<li>分子之间相互作用：酵母双杂交技术、FRET技术</li>
<li>分子的运动或迁移速率：荧光漂白恢复技术</li>
<li>细胞鉴定或分子是否表达：免疫荧光技术、免疫酶标技术<ul>
<li><strong>选择抗体要注意种属性</strong><br><strong>名词解释：FRET技术、荧光漂白恢复技术</strong></li>
<li>FRET技术：抗兔（FITC标记二抗）-&gt; 兔抗大鼠（一抗） -&gt; 大鼠</li>
<li>荧光漂白恢复技术</li>
</ul>
</li>
<li><strong>Triton x-100（曲拉通）</strong>：破膜、打洞<ul>
<li>适用于目标分子是<strong>跨膜蛋白抗体</strong>&amp;<strong>抗胞外端抗体</strong>不能直接和目标分子结合</li>
</ul>
</li>
</ul>
<h1 id="细胞质膜"><a href="#细胞质膜" class="headerlink" title="细胞质膜"></a>细胞质膜</h1><p><strong>细胞质膜</strong>：就是细胞膜，围绕在细胞最外层，由膜脂、蛋白质和糖类组成<br><strong>细胞内膜</strong>：围绕各种细胞器的膜系统，<strong>细胞膜和细胞内膜统称为生物膜</strong></p>
<h2 id="细胞质膜的结构模型与基本成分"><a href="#细胞质膜的结构模型与基本成分" class="headerlink" title="细胞质膜的结构模型与基本成分"></a>细胞质膜的结构模型与基本成分</h2><h3 id="结构模型"><a href="#结构模型" class="headerlink" title="结构模型"></a>结构模型</h3><ol>
<li>三明治模型：”蛋白质-脂类-蛋白质”</li>
<li>“<strong>单位膜</strong>模型”：暗亮暗+静止</li>
<li>流动镶嵌模型<ul>
<li><strong>流动性</strong>：膜蛋白、膜质均可侧向流动</li>
<li>膜蛋白分布具有<strong>不对称性</strong>：有的结合在膜表面，有的嵌入或横跨双分子层</li>
</ul>
</li>
<li><strong>脂筏模型</strong>：在生物膜的脂双层的外侧，鞘磷脂与胆固醇富集而形成有序的微功能区域，如同脂筏一样，上面载着蛋白质<ul>
<li>分辨胆固醇与鞘磷脂：明显比磷脂双分子层高</li>
</ul>
</li>
</ol>
<h3 id="生物膜的组成成分"><a href="#生物膜的组成成分" class="headerlink" title="生物膜的组成成分"></a>生物膜的组成成分</h3><ul>
<li>膜脂：双分子</li>
<li>膜蛋白：去垢剂：Triton X-100</li>
</ul>
<h4 id="膜脂："><a href="#膜脂：" class="headerlink" title="膜脂："></a><strong>膜脂</strong>：</h4><p><img src="/./_Img/%E7%BB%86%E8%83%9E%E7%94%9F%E7%89%A9%E5%AD%A6.assets/%E4%B8%89%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%88%90%E5%88%86.png" alt="三种主要成分"></p>
<ul>
<li><p>主要包括<strong>甘油磷脂、鞘脂、固醇</strong>（同时也是脂筏的主要成分）</p>
<ul>
<li><p>甘油磷脂：膜脂基本成分，占一半以上<br>  主要在内质网合成是3-磷酸甘油的一系列衍生物（PC，PS，PE，PI）</p>
<ul>
<li>甘油磷脂中某些成分如<strong>PI在细胞信号转导中起重要作用（磷脂酰肌醇双信使信号通路）</strong></li>
<li>具有一个极性头和两个非极性尾</li>
<li>有饱和脂肪酸&amp;不饱和脂肪酸，不饱和脂肪酸多为顺式</li>
</ul>
</li>
<li><p>鞘脂：膜脂的基本成分，一半以上</p>
<ul>
<li>鞘氨醇衍生物，主要在高尔基体合成。</li>
<li>糖脂：两性分子，极性头部直接共价键结合到鞘氨醇上的一个分子或寡糖链，普遍存在于原核和真核细胞的细胞质膜上<ul>
<li>糖脂的连接：</li>
</ul>
<ol>
<li>低聚糖连接于神经酰胺，形成神经节苷脂</li>
<li>人类红细胞膜上与脂连接的低聚糖链决定人的血型<ul>
<li>ABO血型抗原叫做<strong>ABO血型决定子</strong>，是一种糖脂，其寡糖部分决定抗原特异性：A血型寡糖链末端是<strong>N-乙酰半乳糖胺</strong>，B是半乳糖，O是<strong>N-乙酰氨基半乳糖胺</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>固醇：胆固醇及其衍生物的统称，含有四个闭环并且其中有三个六C环一个五C环；亲水头为一个羟基（只有这一部分是亲水基团）。是一种分子刚性很强的两性化合物。</p>
<ul>
<li>特点：<ul>
<li>胆固醇在哺乳动物细胞质膜中含量丰富</li>
<li>多数细胞的绝大部分胆固醇在<strong>细胞质膜</strong>和相关囊泡上</li>
<li><strong>来源：</strong>合成在动物细胞胞质和内质网，但动物体内的胆固醇多数来自于食物</li>
<li><strong>作用：在调节膜的流动性，增加膜的稳定性以及降低溶水性物质的通透性等起重要作用，是脂筏的基本结构</strong></li>
<li>缺乏胆固醇可能会抑制细胞分裂</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>膜脂的四种热运动方式</p>
<ul>
<li>基本运动方式：沿膜平面侧向运动</li>
<li>脂分子围绕轴心的自旋运动</li>
<li>脂分子尾部的摆动</li>
<li>双层脂分子之间的反转运动</li>
</ul>
</li>
<li><p><strong>脂质体：概念+应用</strong></p>
<ul>
<li>脂质体是根据<strong>磷脂分子可在水相中形成稳定的脂双层膜</strong>的趋势而制备的一种人工膜</li>
<li>应用：基因递送，细胞力学，原子力显微镜分子的锚定。总体而言就是一种载体作用。<ul>
<li>研究膜脂与膜蛋白及其生物学性质</li>
<li>脂质体中裹入DNA可用于基因转移</li>
<li>临床治疗中脂质体作为药物或酶载体</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="膜蛋白"><a href="#膜蛋白" class="headerlink" title="膜蛋白"></a>膜蛋白</h4><ul>
<li><p>基本类型</p>
<ul>
<li>外在（周）膜蛋白：<ul>
<li>水溶性蛋白</li>
<li>易分离：靠离子键等与膜内表面蛋白质或脂分子极性头部非共价键结合</li>
</ul>
</li>
<li>内在（整合）膜蛋白：<ul>
<li>水不溶性蛋白</li>
<li>跨膜螺旋，与膜紧密结合，常用去垢剂使膜崩解后才可分离</li>
</ul>
</li>
<li>脂质锚定蛋白<ul>
<li>通过磷脂或脂肪酸锚定，共价结合</li>
</ul>
</li>
<li><img src="/./_Img/%E7%BB%86%E8%83%9E%E7%94%9F%E7%89%A9%E5%AD%A6.assets/%E4%B8%89%E7%B1%BB%E8%9B%8B%E7%99%BD%E7%9A%84%E7%BB%93%E5%90%88%E6%96%B9%E5%BC%8F.png" alt="Img"></li>
</ul>
</li>
<li><p>内在膜蛋白与膜脂结合方式</p>
</li>
<li><p>外在膜蛋白与膜脂结合方式</p>
</li>
<li><p>去垢剂:一端亲水，另一端疏水的两性小分子，是分离与研究膜蛋白的常用试剂，有离子型（SDS）和非离子型（Triton X-100）</p>
<ul>
<li>这里会在设计实验中考查！<strong>免疫荧光染色中Triton X-100的作用：透化</strong><ul>
<li>免疫免疫要有抗原抗体的结合才可称为“免疫”</li>
<li><strong>Triton X-100的作用：</strong>溶解脂质，增加抗体对细胞膜的通透性，保证抗体可以接触到抗原结合位点。<ul>
<li>必须打孔：核蛋白、抗原抗体结合位点位于胞内的跨膜蛋白、胞质内蛋白</li>
<li>不许打孔：抗原抗体结合位点在胞外的跨膜蛋白，胞外端蛋白</li>
</ul>
</li>
</ul>
</li>
<li><strong>注意实验的设计：</strong></li>
</ul>
</li>
</ul>
<h2 id="细胞质膜的基本特征与功能"><a href="#细胞质膜的基本特征与功能" class="headerlink" title="细胞质膜的基本特征与功能"></a>细胞质膜的基本特征与功能</h2><h3 id="细胞质膜的基本特征：流动性与不对称性"><a href="#细胞质膜的基本特征：流动性与不对称性" class="headerlink" title="细胞质膜的基本特征：流动性与不对称性"></a>细胞质膜的基本特征：流动性与不对称性</h3><h4 id="膜的流动性"><a href="#膜的流动性" class="headerlink" title="膜的流动性"></a>膜的流动性</h4><ul>
<li>细胞膜的流动：主要由脂质分子本身的性质决定<ul>
<li><strong>脂肪酸链</strong>越短，<strong>不饱和程度</strong>越高，膜脂的流动性越大</li>
<li><strong>温度</strong>对膜脂运动有明显的影响</li>
<li><strong>胆固醇</strong>在动物细胞中对细胞膜流动性起重要的双向调节作用</li>
</ul>
</li>
<li>膜蛋白的流动：<strong>荧光抗体免疫标记实验</strong><ul>
<li>成斑现象&amp;成帽现象</li>
</ul>
</li>
<li><strong>影响膜流动性的因素</strong>：膜本身，遗传因子，环境因子。<ul>
<li><strong>胆固醇</strong>：胆固醇含量增加会降低膜的流动性</li>
<li><strong>脂肪酸链的饱和度</strong>：越不饱和流动性越强</li>
<li><strong>脂肪酸链的链长</strong>：越长相变温度越高，膜的流动性降低</li>
<li><strong>卵磷脂：鞘磷脂</strong>：比值增高流动性增加，其中鞘磷脂为脂筏的主要成分，黏度高于卵磷脂</li>
<li>膜蛋白和膜脂的结合方式、温度、酸碱度、离子强度等</li>
</ul>
</li>
<li>生理意义<ul>
<li>保证其正常生理功能</li>
<li>过低时酶活动与物质运输终止，流动性过高造成膜的溶解</li>
</ul>
</li>
<li><strong>如何证明？</strong><ul>
<li>膜蛋白膜脂流动性研究&amp;运动速率检测：<strong>荧光漂白恢复技术（FPAR）</strong></li>
<li>研究膜蛋白&amp;膜脂流动性基本实验技术：<strong>光脱色恢复技术</strong> </li>
<li>根据荧光恢复的速度推算出膜蛋白或膜脂扩散速度</li>
</ul>
</li>
</ul>
<h4 id="膜的不对称性"><a href="#膜的不对称性" class="headerlink" title="膜的不对称性"></a>膜的不对称性</h4><p>ES：膜脂细胞外表面</p>
<ul>
<li><p>膜脂的不对称性：糖脂仅存在于质膜的ES面，是完成生理功能的结构基础</p>
<ul>
<li>是生物膜完成复杂的在时间控件上有序的各种生理功能的保证</li>
<li>应用：<strong>检测细胞凋亡</strong>：磷脂酰丝氨酸在凋亡早期由脂膜内测翻向外侧</li>
</ul>
</li>
<li><p>膜蛋白的不对称性</p>
<ul>
<li>糖蛋白糖残基均分布在质膜的ES面</li>
<li><strong>指每种膜蛋白（糖侧链）分子在细胞膜上都具有明确的方向性</strong></li>
</ul>
</li>
<li><p>膜蛋白的不对称性:每种膜蛋白分子在质膜上明确的方向性</p>
</li>
</ul>
<h3 id="细胞质膜的基本功能"><a href="#细胞质膜的基本功能" class="headerlink" title="细胞质膜的基本功能"></a>细胞质膜的基本功能</h3><ul>
<li>为细胞生命活动提供相对稳定的内环境</li>
<li>选择性物质运输，包括输入与代谢</li>
<li>产物的排除，其中伴随有能量的传递</li>
<li>提供细胞识别位点，完成细胞内外信息跨膜传递</li>
<li>为酶提供结合位点，酶促反应高校进行</li>
<li>介导细胞与细胞，细胞与胞质的连接</li>
<li>参与形成细胞表面特化结构</li>
<li>膜蛋白异常与疾病有关，可做疾病治疗靶标</li>
</ul>
<h2 id="膜骨架与细胞表面的特化结构"><a href="#膜骨架与细胞表面的特化结构" class="headerlink" title="膜骨架与细胞表面的特化结构"></a>膜骨架与细胞表面的特化结构</h2><p>没啥要考的</p>
<h2 id="回顾："><a href="#回顾：" class="headerlink" title="回顾："></a>回顾：</h2><p>结构模型：<br>生物膜的组成</p>
<h1 id="物质的跨膜运输"><a href="#物质的跨膜运输" class="headerlink" title="物质的跨膜运输"></a>物质的跨膜运输</h1><p>被动运输小批量，其余大批量，耗能</p>
<h2 id="膜转运蛋白与小分子及离子的跨膜运输"><a href="#膜转运蛋白与小分子及离子的跨膜运输" class="headerlink" title="膜转运蛋白与小分子及离子的跨膜运输"></a>膜转运蛋白与小分子及离子的跨膜运输</h2><h3 id="载体蛋白"><a href="#载体蛋白" class="headerlink" title="载体蛋白"></a>载体蛋白</h3><ul>
<li>主动被动均需要</li>
<li>构象改变</li>
</ul>
<h2 id="被动运输"><a href="#被动运输" class="headerlink" title="被动运输"></a>被动运输</h2><h2 id="主动运输"><a href="#主动运输" class="headerlink" title="主动运输"></a>主动运输</h2><h2 id="胞吞胞吐"><a href="#胞吞胞吐" class="headerlink" title="胞吞胞吐"></a>胞吞胞吐</h2>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>医学小课</tag>
      </tags>
  </entry>
  <entry>
    <title>集成学习</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>相关代码与课后习题见<a href="">我的GitHub</a></p>
<h1 id="个体与集成"><a href="#个体与集成" class="headerlink" title="个体与集成"></a>个体与集成</h1><ol>
<li>集成学习(ensemble learning)通过构建数个个体学习器来完成学习任务，每个个体学习器都是经过训练的算法；</li>
<li>集成的个体算法类型相同的（均为决策树或者均为神经网络等等）被称为“同质”(homogeneous)，反之为“异质”(heterogenous)。<ul>
<li>同质中的个体学习器称为“基学习器”(base learner)，相应的算法称为“基学习算法”(base learning algorithm)</li>
<li>异质中的个体称为“组件学习器”(component learner)，或者直接称之为个体学习器</li>
</ul>
</li>
<li>集成学习对性能提高的研究主要针对“弱学习器”(weak learner)，但是在实际应用中，为了个体学习器尽可能少，还是会使用学习能力更强的学习器。<ul>
<li>弱学习器是略优于随机猜测的学习器</li>
</ul>
</li>
</ol>
<h2 id="研究核心"><a href="#研究核心" class="headerlink" title="研究核心"></a>研究核心</h2><p>要获得好的集成，个体学习器应当“好而不同”：准确性+多样性(diversity);</p>
<ul>
<li>随着继承中个体分类器数目的增大，集成错误率指数级下降，最终趋于0；</li>
<li>但是以上结论基于假设：学习器间的误差相互独立，但由于训练目标是解决同一个问题，所以不可能相互独立，因此可以看出，集成过程中准确性和多样性是类似于查准率和查全率的关系<br><strong>因此，如何产生并结合“好而不同”的学习器，是集成学习的核心。</strong></li>
</ul>
<h1 id="集成学习方法"><a href="#集成学习方法" class="headerlink" title="集成学习方法"></a>集成学习方法</h1><p>分为两类：</p>
<ol>
<li>序列化：个体学习器间存在强依赖关系，必须串行生成；Boosting</li>
<li>并行化： 不存在强依赖关系，可以同时生成；Bagging &amp; Random Forest</li>
</ol>
<h2 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h2><p>可以将弱学习器提升为强学习器</p>
<h3 id="WorkFlow"><a href="#WorkFlow" class="headerlink" title="WorkFlow"></a>WorkFlow</h3><p>前提：base间强依赖 &amp; 串行序列化</p>
<ol>
<li>训练一个base</li>
<li>根据base的表现对训练样本分布进行调整，错误样本关注增加</li>
<li>基于调整后的样本训练一个base，知道base数为预定超参数n</li>
</ol>
<h3 id="Example-AdaBoost"><a href="#Example-AdaBoost" class="headerlink" title="Example:AdaBoost"></a>Example:AdaBoost</h3><p>加权模型，其实就是通过改变base的线性组合的系数来实现最小化损失函数$$ H(x)&#x3D;\sum^T_{t&#x3D;1}\alpha_th_t(x)$$</p>
<ol>
<li>初始化样本权值分布，一般初始化每个样本权值相等</li>
<li>基于分布从数据集中训练出分类器$h_t$</li>
<li>估计分类器的误差$\epsilon_t$;<ul>
<li>这里设定如果误差大于0.5，也就是二分类问题的准确度低于随机猜测正确的概率，break舍去</li>
<li>实际操作中可以自行设定对base精度的要求</li>
</ul>
</li>
<li>确定分类器的权重$$\alpha_t&#x3D;\frac{1}{2}ln(\frac{1-\epsilon_t}{\epsilon_t})$$</li>
<li>更新样本分布，其中$Z_t$是规范化因子，确保最终可以得到一个规范的分布$$ D_{t+1}&#x3D;\frac{D_t(x)}{Z_t}×\begin{cases}<br>exp(-\alpha_t), h_t(x)&#x3D;f(x) \<br>exp(\alpha_t), h_t(x)\ne f(x)<br>\end{cases} &#x3D;\frac{D_t(x)exp(-\alpha_t)f(x)h_t(x)}{Z_t}$$</li>
<li>最终输出：$$H(x)&#x3D;sign(\sum^T_{t&#x3D;1}\alpha_th_t(x))$$</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>通过re-weighting对特定的数据分布进行学习，对无法接受带权样本的base，可以re-sampling处理（在训练过程中根据样本分布对训练集进行重新采样，用重采样后的样本对基学习器训练）</li>
<li>每一轮都会检查base被保留的条件，不符合的舍弃</li>
<li>从偏差-方差分解的角度来看，Boosting主要关注<strong>降低偏差</strong>，因此Boosting能基于<strong>泛化程度弱</strong>的学习器构建强集成</li>
</ol>
<h2 id="Bagging与随机森林"><a href="#Bagging与随机森林" class="headerlink" title="Bagging与随机森林"></a>Bagging与随机森林</h2><p>不存在强依赖关系&amp;同时生成的并行式关系</p>
<h3 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h3><h4 id="WorkFlow-1"><a href="#WorkFlow-1" class="headerlink" title="WorkFlow"></a>WorkFlow</h4><p>直接原理：自助采样法bootstrap sampling</p>
<ol>
<li>给定m个样本的数据集，有放回的随机抽取，m次随机采样后大概会有63.2%的原始数据出现在新样本集中，以此类推采样出T个类似采样集<ul>
<li>可以预留36.8%的数据作为验证集对泛化性能进行“包外估计”<ul>
<li>对于决策树base，可以辅助剪枝</li>
<li>对于神经网络base，可以辅助早期停止，降低过拟合</li>
</ul>
</li>
</ul>
</li>
<li>对分类任务进行简单投票法，票数相同时随机选择一个</li>
</ol>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>从偏差-方差角度看，更关注<strong>降低方差</strong>，因此在不剪枝决策树、神经网络等<strong>易受样本扰动的学习器</strong>上效果更明显。</p>
<h3 id="随机森林Random-Forest"><a href="#随机森林Random-Forest" class="headerlink" title="随机森林Random Forest"></a>随机森林Random Forest</h3><p>RF实质上是Bagging的扩展变体，以决策树为base构建Bagging集成，引入了随机属性选择。</p>
<h4 id="WorkFlow-2"><a href="#WorkFlow-2" class="headerlink" title="WorkFlow"></a>WorkFlow</h4><p>总体就是对最优属性的选择，所以属性取值不同时的分叉不同，像一棵树。</p>
<ol>
<li>对决策树的每个结点，从该节点d个属性中随机选择一个包含k个属性的子集，然后从这个子集中选择一个最优属性用于划分。一般来说选择$k&#x3D;log_2d$</li>
<li>离散性质通过取值进行分叉，连续性质通过拟合度分叉</li>
</ol>
<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ol>
<li>简单&amp;计算开销小，训练效率高。</li>
<li>base的多样性来自样本+属性的扰动，最终集成泛化性能可以通过base差异度的提升来提升。</li>
<li>起始性能不好（所以可以增加学习轮次和base）</li>
</ol>
<h4 id="note"><a href="#note" class="headerlink" title="note"></a>note</h4><p>RF是一个“随机型”的决策树，所以说当你的数据集比较少或者说训练轮次不够的时候，验证集精度会有比较大的差距，我用了一个RF+linear来拟合连续性质进行二分类的样例最大会有20%的精度误差，而数据集的属性又比较多，40选15的时候可以有最优达到90%，但是极其不稳定，笨人觉得或许可以直接存起来高精度的RF结果然后给对应的属性加权？不过还没有继续跑ing（痛苦的回忆）</p>
<h1 id="结合策略"><a href="#结合策略" class="headerlink" title="结合策略"></a>结合策略</h1><p>学习器结合三大优势：</p>
<ol>
<li>统计：学习任务假设空间大时可能多假设同性能，此时结合之后会更稳定</li>
<li>计算：算法局部极小点降低泛化性能，多次运行结合后可以降低局部极小出现的概率</li>
<li>表示：可以更好地吻合真实假设，使假设空间扩大</li>
</ol>
<h2 id="平均法"><a href="#平均法" class="headerlink" title="平均法"></a>平均法</h2><p>根据性能加权，但是必须使用非负权重才能优于个体学习器；性能相近的时候简单平均就可以。</p>
<h2 id="投票法"><a href="#投票法" class="headerlink" title="投票法"></a>投票法</h2><ol>
<li>用于分类任务，可以超过半数也可以选最多；</li>
<li>类标记投标为硬投票hard voting，类概率标记投票为软投票soft voting。虽然分类概率不准确，但是往往类概率投票准确度会更高。<ul>
<li><strong>如果base类型不同，概率不能直接比较</strong>，一般就是hard voting了。</li>
</ul>
</li>
</ol>
<h2 id="学习法"><a href="#学习法" class="headerlink" title="学习法"></a>学习法</h2><p>训练数据很多时，用另一个学习器来结合，把base称为初级学习器，用于结合的学习器称为次级学习器或者元学习器meta-learner</p>
<h3 id="Example：Stack算法"><a href="#Example：Stack算法" class="headerlink" title="Example：Stack算法"></a>Example：Stack算法</h3><ol>
<li>使用初级学习算法产生初级学习器（可以是异质base）</li>
<li>使用初级学习器的输出产生次级训练集，用于训练次级学习器，此处初级样本的标记仍被当作样例标记<ul>
<li>这一步有比较大的过拟合风险，一般使用留一法或者交叉验证，<strong>用训练初级学习器未使用的样本</strong>产生次级学习器的训练样本</li>
</ul>
</li>
<li>训练次级学习器并输出T个一一对应T个初级学习器的值<br><strong>次级学习器的输入属性表示</strong>和该算法对stacking集成的泛化性能影响很大。研究表明<strong>初级学习器输出类概率</strong>作为次级学习器输入时，用多响应线性回归MLR作为次级学习算法效果更好，使用不同的属性集更佳</li>
</ol>
<h1 id="多样性"><a href="#多样性" class="headerlink" title="多样性"></a>多样性</h1><h2 id="误差-分歧分解"><a href="#误差-分歧分解" class="headerlink" title="误差-分歧分解"></a>误差-分歧分解</h2>]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的Python</title>
    <url>/2023/%E5%AD%A6%E7%82%B9/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84Python/</url>
    <content><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><h2 id="一个简单的小例子"><a href="#一个简单的小例子" class="headerlink" title="一个简单的小例子"></a>一个简单的小例子</h2><ol>
<li>通过函数，传入可变参数，最后输出值return是字典，不需要传入的参数是预设的。</li>
<li>自动给相同类型属性的变量赋值</li>
<li>实体，属性，功能….<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">attack_vals = &#123;</span><br><span class="line">    <span class="string">&quot;A&quot;</span><span class="symbol">:</span><span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;B&quot;</span><span class="symbol">:</span><span class="number">50</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dog</span>(<span class="params">name,d_type</span>)<span class="symbol">:</span><span class="comment">#传参的模板</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span><span class="symbol">:name</span>,</span><br><span class="line">        <span class="string">&quot;d_type&quot;</span><span class="symbol">:d_type</span>,</span><br><span class="line">        <span class="string">&quot;attack_val&quot;</span><span class="symbol">:</span><span class="number">30</span>,</span><br><span class="line">        <span class="string">&quot;life_val&quot;</span><span class="symbol">:</span><span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#自动给相同类型属性的变量赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dog_bite</span>(<span class="params">person_obj</span>) <span class="comment">#编辑对象的特定动作，绑定不出错儿~</span></span><br><span class="line">        person_obj[<span class="string">&quot;life_val&quot;</span>] -= data[<span class="string">&quot;attack_val&quot;</span>] <span class="comment">#执行动作</span></span><br><span class="line">    <span class="comment">#由于data就是在这个函数里定义的，所以直接调用data就可以</span></span><br><span class="line">    <span class="comment">#将函数定义在“狗”的内部，避免被错误地调用</span></span><br><span class="line">    data[<span class="string">&quot;bite&quot;</span>] = dog_bite</span><br><span class="line">    <span class="comment">#确保外部可以顺利调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d_type <span class="keyword">in</span> <span class="symbol">attack_vals:</span></span><br><span class="line">        data[attack_val] = attack_vals[d_type]</span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        data[attack_val] = <span class="number">15</span> <span class="comment">#给没有名字的一个默认值</span></span><br><span class="line">    <span class="keyword">return</span> data <span class="comment">#输出字典类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以此类推可以生成多个实体</span></span><br><span class="line">d1 = dog(<span class="string">&quot;lym&quot;</span>,<span class="string">&quot;A&quot;</span>)</span><br><span class="line">d1[<span class="string">&quot;bite&quot;</span>](person) <span class="comment">#调用dog_bite函数</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="面向过程-面向对象"><a href="#面向过程-面向对象" class="headerlink" title="面向过程 &amp; 面向对象"></a>面向过程 &amp; 面向对象</h2><h3 id="面向过程编程-Procedural-Programming"><a href="#面向过程编程-Procedural-Programming" class="headerlink" title="面向过程编程(Procedural Programming)"></a>面向过程编程(Procedural Programming)</h3><ul>
<li>top-down language，程序从上到下一步步执行，解决问题（分解问题思想）</li>
<li>简单的小脚本，可扩展性差</li>
</ul>
<h3 id="面向对象编程-Object-oriented-Programming"><a href="#面向对象编程-Object-oriented-Programming" class="headerlink" title="面向对象编程(Object-oriented Programming)"></a>面向对象编程(Object-oriented Programming)</h3><h4 id="class-类"><a href="#class-类" class="headerlink" title="class : 类"></a><code>class</code> : 类</h4><ol>
<li>首字母大写+驼峰命名法；</li>
<li><strong>属性</strong>：类中的变量；<br>属性只能通过实例来调用<code>实例.属性</code>；</li>
</ol>
<ul>
<li>类下直接定义的属性：公共属性，每一个实例会共享这个值。<br>公共属性可以直接在外部修改，对单独的实例进行修改就可以~</li>
<li><strong>初始化方法\构造方法\构造函数</strong>：<br>实例化时会自动执行，进行一些初始化工作。</li>
</ul>
<ol>
<li>用于构造一些私有化属性（传到参数里）；<br>实例属性只被实例享有，不会存到类里，调用报错。<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">A:</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="variable language_">self</span>,attribute1,attribute2</span>):</span><br><span class="line">        <span class="comment">#如果真正把属性传到实例，要把两个值和实例绑定：</span></span><br><span class="line">        <span class="variable language_">self</span>.a1 = attribute1</span><br><span class="line">        <span class="variable language_">self</span>.a2 = attribute2</span><br><span class="line">        <span class="comment">#在本函数中可以直接调用，不加实例；</span></span><br><span class="line">        <span class="comment">#外部调用attribute1，2时调用方式与公共相同相同；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化时传入参数：</span></span><br><span class="line">exm = A(attA,attB)</span><br></pre></td></tr></table></figure></li>
<li></li>
<li><strong>方法</strong>： 类中的函数、功能；<br><code>self</code>： 代表实例本身,必须是方法中第一个参数；</li>
<li>实例化：将类变为实体</li>
</ol>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>微生物学笔记</title>
    <url>/2024/%E5%AD%A6%E7%82%B9/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><ul>
<li><strong>微生物的定义</strong>：微生物是一种存在于自然界的一大群<strong>体形微小、结构简单、肉眼直接看不见</strong>的微小生物。</li>
<li><strong>微生物的分类</strong>：<ul>
<li>具有细胞结构：<ul>
<li>原核微生物：细菌、放线菌</li>
<li>真核微生物：真菌（酵母菌、霉菌、蕈菌）、原生生物（草履虫等）</li>
</ul>
</li>
<li>不具有细胞结构：病毒</li>
</ul>
</li>
<li>微生物是一类个体微<strong>小</strong>、结构<strong>简</strong>单的<strong>低</strong>等生物。<ul>
<li>小：um级（光镜下可见）、nm级（电镜下可见）</li>
<li>简：单细胞、简单多细胞、非细胞</li>
<li>低：<strong>原核类</strong>（细菌、放线菌、支原体、立克次氏体、衣原体、蓝细菌）、<strong>真核类</strong>（真菌、原生动物、显微藻类）、<strong>非细胞类</strong>（病毒、亚病毒）</li>
</ul>
</li>
<li>微生物的<strong>共同特点</strong>：<ul>
<li>体积小、表面积大（巨大的营养物质吸收面、代谢废物的排泄面）</li>
<li>吸收多、转化快</li>
<li>生长旺、繁殖快</li>
<li>适应强、易变异</li>
<li>分布广、种类多</li>
</ul>
</li>
<li>微生物在生物界的地位<ul>
<li>六界系统：原核生物界、原生生物界、真菌界、动物界、植物界、（病毒界）<ul>
<li>微生物分布于除了动植物界的其他四界</li>
</ul>
</li>
<li>三域系统：古生菌域、细菌域、真核生物域<ul>
<li>微生物分布于三域</li>
</ul>
</li>
</ul>
</li>
<li>微生物学的发展<ul>
<li>微生物学的定义：是在分子、细胞或群体水平上研究微生物的形态结构、生长繁殖、生理代谢、遗传变异、生态分布和分类进化等生命活动的基本规律，并将其应用于工业发酵、医学卫生和生物工程等领域的科学。</li>
</ul>
</li>
<li>微生物学的分科：<ul>
<li>按研究微生物的基本生命活动规律划分：微生物生态学、微生物分类学、微生物生理学、微生物生物化学、微生物遗传学</li>
<li>按微生物的应用领域划分：工业微生物学、农业微生物学、医学微生物学、药用微生物学、兽医微生物学、食品微生物学</li>
<li>按所研究的微生物的对象划分：细菌学、真菌学、病毒学、原生动物学</li>
<li>按微生物所在的生态环境划分：土壤微生物学、海洋微生物学、宇宙微生物学</li>
<li>按实验技术操作划分：实验微生物学</li>
</ul>
</li>
<li>微生物学的发展：<ul>
<li>史前期（朦胧时期）、初创时期（形态学时期）、奠基时期（生理学时期）、发展时期（生化时期）、分子生物学时期（成熟时期）</li>
</ul>
</li>
<li>微生物学研究的<strong>重要意义</strong>：<ul>
<li>在环境中的作用：<ul>
<li>微生物在生态系统中的地位：分解者，也有部分生产者</li>
<li>利用微生物改善环境：如污水处理</li>
<li>微生物对环境的有害影响：引起动物、人、植物的疾病等</li>
</ul>
</li>
<li>在医药中的作用：各种疾病的疫苗、抗菌素、生物防治等</li>
<li>在食品中的作用：<ul>
<li>有利：食品微生物工程，如酿酒、面包、酱油、酸奶等</li>
<li>有害：引起食品酸败（发霉、变质），食品中毒以及其他疾病</li>
</ul>
</li>
<li>在农业和畜牧业的作用：微生物饲料、农用抗菌素、生物农药、生物菌肥、微生物能源等 </li>
<li>在科学研究的作用：如对生物工程、微生物基因组学、微生物生命现象等的研究</li>
</ul>
</li>
</ul>
<h2 id="第二章-原核微生物"><a href="#第二章-原核微生物" class="headerlink" title="第二章 原核微生物"></a>第二章 原核微生物</h2><ul>
<li><strong>原核微生物的定义</strong>：指一大类含有<strong>无核膜包裹</strong>的，存在称作<strong>核区的裸露DNA</strong>的<strong>原始单细胞生物</strong>。</li>
<li>原核细胞与真核细胞的区别：<ul>
<li>原核细胞有明显核区，无核膜；真核细胞有核膜</li>
<li>原核细胞无线粒体，能量代谢和许多物质代谢在质膜上进行；真核细胞有线粒体，能量代谢和许多合成代谢在线粒体中进行</li>
<li>原核细胞核糖体分布在细胞质中，真核细胞核糖体分布在内质网膜上</li>
</ul>
</li>
<li>原核生物的三菌、三体：<ul>
<li>三菌：细菌、放线菌、蓝细菌</li>
<li>三体：支原体、立克次氏体、衣原体</li>
</ul>
</li>
</ul>
<h3 id="细菌"><a href="#细菌" class="headerlink" title="细菌"></a>细菌</h3><ul>
<li>定义：细菌是一类细胞细而短、结构简单、细胞壁坚韧、以二等分裂方式繁殖和水生性较强的单细胞原核微生物</li>
<li>生存环境：温暖潮湿、富含有机物的地方，都有大量细菌活动。有特殊的臭味或酸败味，发粘、发滑</li>
<li>应用：<ul>
<li>工业上生产各种氨基酸、核苷酸、酶制剂、乙醇、丙酮、丁醇、有机酸、抗生素等</li>
<li>农业上用作杀虫菌剂、细菌肥料的生产和在沼气发酵等方面的应用</li>
<li>医药上如各种菌苗、类霉素、代血浆和许多医用酶类的生产等</li>
<li>环保上的应用等</li>
</ul>
</li>
<li>危害：人、动植物的传染病，食物和工农业产品腐烂变质</li>
<li>细菌细胞形态：球菌、杆菌、螺旋菌、其他形状的细菌<ul>
<li>球菌：根据细胞分裂的方向及分裂后的各子细胞的空间排列状态不同，可将球菌分为单球菌、双球菌、链球菌、四联球菌、八叠球菌、葡萄球菌等</li>
<li>杆菌：按形态可分为短杆状、长杆状、棒杆状、梭状杆状、月亮状、竹节状、双歧杆菌、柄杆菌等；按繁殖后的排列方式则有双杆菌、链状、栅状、“八”字状等；按是否产生芽苞可分为芽孢杆菌、无芽孢杆菌</li>
<li>螺旋菌：<ul>
<li>弧菌（只有一个弯曲，形似C字或逗号）：霍乱弧菌、逗号弧菌</li>
<li>螺旋菌（螺旋数2-6环）：幽门螺杆菌、干酪螺菌</li>
<li>螺旋体（螺旋数大于6环）：梅毒密螺旋体</li>
</ul>
</li>
<li>影响细菌形态的因素：培养时间、培养温度、培养基成分、浓度、pH值等</li>
</ul>
</li>
<li>细菌的大小：<ul>
<li>长度单位：微米($\mu m$)</li>
<li>表示：球菌（直径），杆菌（宽x长）、螺菌（宽、长、螺距）</li>
<li>细胞的大小是细菌分类的特征，细菌细胞大小还与营养等因素有关</li>
</ul>
</li>
<li>细菌的结构：<ul>
<li>一般构造：<ul>
<li>细胞壁：位于细胞表面，内侧紧贴细胞膜的一层较为坚韧，略具弹性的细胞结构。约占干重的10-25%<ul>
<li>革兰氏染色法：初染（结晶紫）、媒染剂（碘液）、脱色（95%乙醇）、复染（蕃红）。菌体呈紫色的为革兰氏阳性菌，菌体呈红色的为革兰氏阴性菌</li>
<li>革兰氏阳性菌的细胞壁：<strong>细胞壁不分层；肽聚糖层厚，层次多，交联度高；多数含有磷壁酸；无外膜；无脂多糖（LPS）</strong>；类脂和脂蛋白含量低（仅抗酸性细菌含类脂）；鞭毛结构基体上着生两个环；产毒素以<strong>外毒素</strong>为主；对机械力的抗性强；细胞壁抗溶菌酶弱；<strong>对青霉素和磺胺敏感</strong></li>
<li>革兰氏阴性菌的细胞壁：<strong>细胞壁分内外壁层；肽聚糖层薄，一般单层，交联度低；无磷壁酸；有外膜；有脂多糖（LPS）</strong>；类脂和脂蛋白含量高；鞭毛结构基体上着生四个环；产毒素以<strong>内毒素</strong>为主；对机械力的抗性弱；细胞壁抗溶菌酶强；对青霉素和磺胺不敏感，<strong>对链霉素等敏感；细胞壁组成和结构比阳性菌更复杂</strong></li>
<li>磷壁酸功能：<ul>
<li>带负电荷，可与环境中的Mg+等阳离子结合，提高这些离子的浓度，以保证细胞膜上一些合成酶维持高活性的需要</li>
<li>保证革兰氏阳性致病菌与其宿主间的粘连</li>
<li>赋予革兰氏阳性细菌以特异的表面抗原</li>
<li>提供某些噬菌体以特异的吸附受体</li>
<li>贮藏磷元素</li>
<li>调节细胞内自溶素的活力以防止细胞死亡</li>
</ul>
</li>
<li>脂多糖（LPS）功能：<ul>
<li>作为重要的抗原因子决定了阴性菌抗原的多样性，有助于躲避宿主免疫系统的攻击</li>
<li>是内毒素的物质基础</li>
<li>起细菌自我保护作用，可以阻止溶菌酶、抗生素和染料等侵入菌体，也可以阻止周质空间中的酶外漏</li>
<li>许多噬菌体在细胞表面的吸附受体</li>
</ul>
</li>
<li>细胞壁功能：<ul>
<li>固定细胞外型和提高机械强度，使其免受渗透压等外力的损伤</li>
<li>鞭毛生长和运动的支点</li>
<li>阻止大分子有害物质进入细胞</li>
<li>赋予细菌特定的抗原性以及对抗生素和噬菌体的敏感性</li>
</ul>
</li>
<li>细胞壁缺陷细菌：<ul>
<li>自然界中长期进化形成：支原体</li>
<li>实验室或宿主体内形成：<ul>
<li>缺壁突变：L型细菌</li>
<li>人工去壁：<ul>
<li>基本去尽：原生质体（G+）</li>
<li>部分去除：球状体（G-）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>细胞质膜：主要由磷脂双分子层和蛋白质组成，与真核细胞的质膜相似，但不含胆固醇等甾醇<ul>
<li>生理功能：<ul>
<li>选择性地控制细胞内外的营养物质和代谢产物的运送</li>
<li>是维持细胞内正常渗透压的屏障</li>
<li>合成细胞壁和糖被的各种组分（肽聚糖、磷壁酸、LPS、荚膜多糖等）的重要基地</li>
<li>膜上含有氧化磷酸化或光合磷酸化等能量代谢的酶系，是细胞的产能场所</li>
<li>是鞭毛基体的着生部位和鞭毛旋转的供能部位</li>
</ul>
</li>
<li>间体：细胞膜内褶形成的一种管状、层状或串状物，一般位于细胞分裂的部位或附近<ul>
<li>参与隔膜形成</li>
<li>与核分裂有关</li>
<li>类似线粒体功能</li>
</ul>
</li>
</ul>
</li>
<li>细胞质和内含物：细胞质是细胞质膜包围的除核区外的一切半透明、胶状、颗粒状物质的总称。含水量约80%，主要成分为核糖体、贮藏物、多种酶类和中间代谢物、质粒、各种营养物和大分子的单体等，少数细菌还有类囊体、羧酶体、气泡或伴孢晶体等<ul>
<li>核糖体：一种核糖核蛋白的颗粒状物质，由核糖核酸（60%）和蛋白质（40%）组成，常以游离状态或多聚核糖状态分布于细胞质中<ul>
<li>功能：是细胞合成蛋白质的机构</li>
</ul>
</li>
<li>贮藏物：由不同化学成分累积而成的不溶性沉淀颗粒，主要功能是贮存营养物<ul>
<li>分类：碳源及能源类（糖源和硫源）、氮源类、磷源（异染粒）</li>
</ul>
</li>
<li>气泡：许多光合营养型、无鞭毛运动的水生细菌中存在的充满气体的泡囊状内含物，内由数排柱形小空泡组成，外有2nm厚的蛋白质膜包裹<ul>
<li>功能：调节细胞比重，使其漂浮在合适的水层中；吸收空气，空气中的氧气可供代谢需要</li>
</ul>
</li>
</ul>
</li>
<li>核区：原核生物所特有的无核膜结构、无固定形态的原始细胞核<ul>
<li>细菌的遗传物质称为核质体&#x2F;原核&#x2F;拟核&#x2F;核基因组，无核膜、核仁和有丝分裂器</li>
<li>功能：负载遗传信息</li>
<li>核质由单一密闭环状DNA分子反复回旋卷曲盘绕组成松散网状结构</li>
<li>每个细胞所含的核区数一般1~4个</li>
<li>细菌除在染色体复制时间内呈双倍体外，一般均为单倍体</li>
</ul>
</li>
<li>质粒：细菌染色体外的共价闭合环状双链DNA分子<ul>
<li>特点：<ul>
<li>可自我复制，稳定遗传</li>
<li>对生存不是必要的</li>
<li>不同质粒携带不同遗传信息</li>
<li>无质粒细菌可通过接合等方式获得，不能自发产生</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>特殊结构：<ul>
<li>糖被：包被于某些细菌细胞壁外的一层厚度不定的胶状物质。糖被按其有无固定层次、层次厚薄又可细分为荚膜、微荚膜、粘液层和菌胶团<ul>
<li>荚膜成分：多糖、多肽</li>
<li>特点：<ul>
<li>主要成分是多糖、多肽或蛋白质，尤其以多糖居多。经特殊的荚膜染色（背景染色&#x2F;负染色）可在光学显微镜清楚地观察到它的存在</li>
<li>产生糖被是微生物的一种遗传特性，其菌落特征及血清学反应是细菌分类鉴定的指标之一</li>
<li>荚膜并非细胞生活的必要结构，但它对细菌在环境中的生存有利</li>
<li>细菌糖被与人类的科学研究和生产实践有密切的联系</li>
</ul>
</li>
<li>功能：<ul>
<li>保护作用：保护细菌免受干旱损坏，防止噬菌体的吸附和裂解，使致病菌免受突破主白细胞吞噬</li>
<li>贮藏养料</li>
<li>作为透性屏障或离子交换系介质</li>
<li>附着作用</li>
<li>细菌间的信息识别作用</li>
<li>堆积代谢废物</li>
</ul>
</li>
</ul>
</li>
<li>鞭毛：某些细菌细胞表面着生的一至数十条长丝状、螺旋形的附属物，首要功能是完成运动，逆时针旋转向前，顺时针旋转向后<ul>
<li>着生方式：单端鞭毛、端生丛毛、两端生鞭毛、周生鞭毛</li>
<li>结构：鞭毛丝、鞭毛钩、基体</li>
<li>菌种包含许多杆菌和少数球菌</li>
</ul>
</li>
<li>菌毛：长在细菌体表的纤细、中空、短直、数量较多的蛋白质类附属物，具有<strong>使菌体附着于物体表面</strong>的功能<ul>
<li>菌毛比鞭毛简单，无基体等构造，每个细菌约有250~300条菌毛，有菌毛的细菌以G-致病菌和球菌居多，借助菌毛可把它们牢固地黏附于宿主的呼吸道、消化道、泌尿生殖道等的黏膜上，进一步定植和致病</li>
</ul>
</li>
<li>性菌毛：构造和成分与菌毛相同，但比菌毛长，且每个细胞只有一至数根。一般多见于G-细菌的供体菌中，具有向受体菌传递遗传物质的作用</li>
<li><strong>芽苞</strong>：某些细菌在其生长发育后期，在细胞内形成<em>一个圆形或椭圆形、厚壁、含水量极低、<strong>抗逆性</strong>极强的<strong>休眠体</strong></em>（相对于环境条件变好之后的营养体），称为芽孢<ul>
<li>结构：孢外壁、芽苞衣、皮层和核心<ul>
<li>芽苞的外壁层厚而致密，主要成分为脂蛋白，通透性差,不易着色</li>
<li>核心含有大量的DNA、RNA、蛋白质酶等物质，还含有2,6—吡啶二羧酸（DPA）,DPA是芽孢特有的成分。一般以DPA—Ca的形式存在</li>
<li>皮层主要含芽苞肽聚糖、DPA-Ca，皮层体积大，比较致密</li>
<li>芽苞平均含水量低，约40%</li>
</ul>
</li>
<li><strong>形成过程</strong>：营养细胞——核质体复制——芽孢横隔形成——核质体被原生质膜包围——形成前芽泡——前芽孢完成，另一核质体完全降解——内外前芽抱膜之间的特孢皮层形成；合成的DPA渗入积累到内生芽孢中——芽孢衣合成——菌体裂解，孢子释放——当环境条件适宜，芽孢萌步，芽孢壁被酶解，营养细胞出现——营养细胞二分裂——营养细胞分裂完成<ul>
<li>通过其形成过程分析其抗逆性机制：</li>
</ul>
</li>
<li><strong>特性</strong>，尤其是对芽孢抗逆性的理解：<ul>
<li>对高温、干燥、辐射、化学药物有强大的抵抗力</li>
<li>含水量低、壁厚而致密，通透性差，不易着色，折光性强</li>
<li>芽苞内新陈代谢几乎停止，处于休眠状态，但保持潜在萌发力</li>
<li>一个芽苞萌发只产生一个营养状态的细胞</li>
</ul>
</li>
<li>本质：既不是细菌生活周期的必经阶段，也不是细菌繁殖的一种形式，又不是对环境的消极反应，而是一种生命形式，一种独立的休眠体</li>
<li><strong>研究意义</strong>：<ul>
<li><strong>分类鉴定</strong></li>
<li><strong>保存菌种</strong>：是细菌的休眠体，适宜条件下重新转变成营养态细胞，用于产芽孢菌的保藏</li>
<li><strong>灭菌标准</strong>：芽孢是生物界中抗逆性最强的生命体，以是否能够消灭芽孢作为灭菌标准</li>
<li><strong>生物杀虫</strong></li>
<li><strong>分离菌种</strong></li>
<li>芽孢染色：芽孢与营养细胞化学成分差异较大，容易在光学显微镜下观察</li>
</ul>
</li>
<li><strong>伴孢晶体</strong>：少数芽孢杆菌会在芽苞旁形成一个菱形或双锥形的<em>碱溶性蛋白晶体</em><ul>
<li>特点：不溶于水，对蛋白酶类不敏感，易溶于碱性溶剂</li>
<li>对200多种昆虫尤其是鳞翅目昆虫的幼虫有毒杀作用，可用作生物农药</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>细菌的繁殖方式：细菌主要是通过无性繁殖产生后代，其繁殖方式是二分裂，简称裂殖<ul>
<li>同形裂殖：裂殖后形成的子细胞大小相等</li>
<li>异形裂殖：分裂产生两个大小不等的子细胞</li>
<li>繁殖过程：核的分裂和隔膜的形成——横隔壁形成——子细胞分裂</li>
<li>有的细菌还存在三分裂和复分裂</li>
</ul>
</li>
<li>细菌的菌落：<ul>
<li><strong>菌落</strong>：在固体培养基上，由单个细胞繁殖形成的肉眼可见的子细胞群体</li>
<li>菌苔：大量细胞密集生长，结果长成的各“菌落”连接成一片</li>
<li><strong>特征</strong>：包括大小、形状、颜色、边缘、质地、透明度、光泽、表面、湿润度等</li>
</ul>
</li>
</ul>
<img src="./_Img/微生物学笔记.assets/image-20230419111746614.png" alt="image-20230419111746614" style="zoom:50%;" />

<h3 id="放线菌"><a href="#放线菌" class="headerlink" title="放线菌"></a>放线菌</h3><ul>
<li><strong>定义</strong>：具有分枝状菌丝体和主要以外生孢子繁殖或断裂生殖的陆生性较强的原核微生物；是G+菌；菌丝从一个中心向四周辐射状呈放射状生长；多为腐生，少数寄生</li>
<li>应用：产生抗生素、酶、维生素等，也有固氮能力，在物质循环中有重要作用，能分解复杂有机物，提高土壤肥力</li>
<li>分布：含水较低的地方，以孢子或菌丝广泛存在于自然界。有机物丰富、呈微生物碱性的土壤中较多</li>
<li>与细菌比较：<ul>
<li>同为单细胞，菌丝比真菌细，其直径与细菌接近</li>
<li>同属原核生物</li>
<li><strong>细胞壁的主要成分是肽聚糖</strong>，胞壁含磷壁酸，G+</li>
<li>对环境要求与细菌相近</li>
<li>对溶菌酶敏感，细菌所敏感的抗生素，放线菌也同样敏感</li>
<li>总之，放线菌是一类介于细菌和真菌之间，而更接近细菌的原核生物</li>
</ul>
</li>
<li>形态：由分枝状菌丝组成。菌丝无隔膜，仍属单细胞。菌丝直径与杆菌相似（1µm左右）；细胞壁含磷壁酸、二氨基庚二酸，不含几丁质、纤维素；革兰氏阳性。</li>
<li><strong>菌丝分类</strong>：<ul>
<li>基内菌丝：又称营养菌丝，匍匐生长于培养基内，无隔，可<strong>营养吸收和排泄废物</strong>。直径0.2-1.2µm，长度100-600µm，色素可有可无，有的可产黄、橙、红、紫、蓝、绿、褐、黑等<strong>色素</strong>。</li>
<li>气生菌丝：基内菌丝长到一定时期，长出培养基外，伸向空间的菌丝，直径1-1.4µm, 长短不一，形状不一，直形或弯曲分枝，颜色较深。气生菌丝生长致密，覆盖整个菌落表面，菌丝成放射状。</li>
<li>孢子丝：当气生菌丝生长发育到一定阶段，气生菌丝上分化出的可形成孢子的菌丝，即孢子丝，又称产孢丝或<strong>繁殖</strong>菌丝。其形状和排列方式因种而异，<strong>常被作为对放线菌进行分类的依据</strong>。<ul>
<li>孢子丝类型：丛生、钩状、紧螺旋、松螺旋、一级轮生、二级轮生等</li>
</ul>
</li>
</ul>
</li>
<li>繁殖方式：<ul>
<li>无性孢子（主要）：<ul>
<li>分生孢子：在 形成成串或单个孢子，菌丝分裂形成（形成横隔——沿横隔断裂形成孢子——成熟孢子）</li>
<li>孢子囊孢子：在气生菌丝顶端或基内菌丝顶端膨大或盘卷缠绕形成孢子囊，在孢子囊内形成孢囊孢子<ul>
<li>孢囊：菌丝细胞在不同平面反复分裂，形成孢囊孢子，还有的孢囊孢子可以丛毛运动</li>
<li>孢子形态：有圆、卵状或柱状等，表面光滑或粗糙，有的还带有毛刺或鞭毛，色素因种而异</li>
</ul>
</li>
</ul>
</li>
<li>菌丝片段</li>
</ul>
</li>
<li>菌落形态：<ul>
<li>质地：致密、干燥、多皱、小而不蔓延、不挑起、表面有放射状沟纹</li>
<li>形状：<ul>
<li>能产生大量分枝和气生菌丝的菌种（如链霉菌）：菌落质地致密，与培养基结合紧密，小而不蔓延，不易挑起或挑起后不易破损</li>
<li>不能产生大量菌丝体的菌种（如诺卡氏菌）：黏着力差，粉质，针挑起易粉碎</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="蓝细菌"><a href="#蓝细菌" class="headerlink" title="蓝细菌"></a>蓝细菌</h3><ul>
<li><strong>定义</strong>：也称蓝藻或蓝绿藻，是一类含有叶绿素a、能以水作为供氢体和电子供体、通过光合作用将光能转变成化学能、同化CO2为有机物质的光合细菌。</li>
<li>特性：<ul>
<li>分布极广</li>
<li>形态差异极大，有球状、杆状和丝状等形态</li>
<li>细胞中含有叶绿素a，进行产氧型光合作用</li>
<li>具有<strong>原核生物</strong>的典型细胞结构</li>
<li>营养极为简单，不需要维生素，以硝酸盐或氨为氮源，多数能固氮，其异形细胞是进行固氮的场所</li>
<li>分泌黏液层、荚膜或形成鞘衣，因此具有强的抗干旱能力</li>
<li>无鞭毛，但能在固体表面滑行，进行光趋运动</li>
<li>许多种类细胞质中有气泡，使菌体漂浮，保持在光线最充足的地方以利光合作用</li>
</ul>
</li>
<li>生理：<ul>
<li>是光能自养型生物：只需空气、阳光、水分、少量无机盐</li>
<li>没有有性生殖，以裂殖为之，也可芽生殖，极少数有孢子</li>
<li>已知蓝细菌有20多种具固氮作用</li>
</ul>
</li>
</ul>
<h3 id="支原体、立克次氏体和衣原体"><a href="#支原体、立克次氏体和衣原体" class="headerlink" title="支原体、立克次氏体和衣原体"></a>支原体、立克次氏体和衣原体</h3><p>均是G-菌，其大小和特性均介于通常的细菌与病毒之间。</p>
<ul>
<li>重点是<strong>定义+特点</strong></li>
</ul>
<ul>
<li>支原体：自然界中<strong>天然无壁、独立营养、形体最微小</strong>的原核生物<ul>
<li>形态多变，有球形、丝状，二分分裂繁殖。最小的球形支原体0.25um，仅为一般球菌的1&#x2F;2-1&#x2F;4。在含有血清、营养丰富的培养基上可形成特色的“煎蛋形”菌落</li>
<li>对抗生素敏感，可引起人、动物、植物致病</li>
<li>具有氧化型或发酵型的产能代谢，在好氧或厌氧条件下生长</li>
<li><strong>能在人工培养基上独立生长</strong></li>
</ul>
</li>
<li>立克次氏体：是大小介于通常的细菌与病毒之间，在许多方面类似细菌，专性活细胞内寄生的原核微生物<ul>
<li>某些性质与病毒相近：专性活细胞寄生物，除五日热立克次氏体外均不能在人工培养基上生长繁殖（体内酶系不完全，一些必须的养料虚从宿主细胞获得；细胞膜比一般细菌的膜疏松，可透性膜）</li>
<li>从一种宿主传至另一宿主的特殊生活方式：主要以节肢动物为媒介，寄生在它们的消化道表皮细胞中，然后通过节肢动物叮咬和排泄物传播给人和其他动物</li>
<li>细胞形态多变</li>
</ul>
</li>
<li>衣原体：介于立克次氏体与病毒之间，能通过细菌滤器，专性活细胞内寄生的一类原核微生物<ul>
<li>细胞结构与细菌类似</li>
<li>细胞呈球形或椭圆形，直径0.2-0.3um，能通过细菌滤器</li>
<li>专性活细胞内寄生</li>
<li>在宿主细胞内生长繁殖具有独特的生活周期，即存在原体和始体两种形态</li>
<li>衣原体广泛寄生于人类、哺乳动物及鸟类，少数致病</li>
<li>衣原体不耐热，60度10分钟即被灭火，但不怕低温，冷冻干燥可保藏多年，对红霉素、氯霉素、四环素敏感</li>
</ul>
</li>
</ul>
<h2 id="第三章-真核微生物"><a href="#第三章-真核微生物" class="headerlink" title="第三章 真核微生物"></a>第三章 真核微生物</h2><p>她说真核内容少</p>
<ul>
<li>定义：细胞核具有核膜；能进行有丝分裂；细胞质中存在线粒体等细胞器的微小生物</li>
<li>主要类群：<ul>
<li>植物界：单细胞藻类</li>
<li>动物界：原生动物</li>
<li>菌物界：<ul>
<li>粘菌和卵菌</li>
<li><strong>真菌</strong>：<ul>
<li>单细胞真菌：酵母菌</li>
<li>丝状真菌：霉菌</li>
<li>大型真菌：蕈菌</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>真菌是最重要的真核微生物，它们的特点是：<ul>
<li>无叶绿素，不能进行光合作用</li>
<li>一般具有发达的菌丝体</li>
<li>细胞壁多含有几丁质</li>
<li>营养方式为异养吸收型</li>
<li>以产大量无性或有性孢子的形式进行繁殖</li>
<li>陆生性较强</li>
<li>以寄生或者腐生方式生存</li>
</ul>
</li>
</ul>
<h3 id="酵母菌"><a href="#酵母菌" class="headerlink" title="酵母菌"></a>酵母菌</h3><ul>
<li><p>定义：一般泛指能发酵糖类的各种单细胞真菌</p>
</li>
<li><p>特点：</p>
<ul>
<li>个体一般以单细胞状态存在</li>
<li>多数营出芽繁殖</li>
<li>能发酵糖类产能</li>
<li>细胞壁常含甘露聚糖</li>
<li>常生活在含糖量较高、酸度较大的环境中</li>
</ul>
</li>
<li><p>应用：</p>
<ul>
<li>食品：酿酒、制作面包、生产调味品</li>
<li>医药：生产酵母片、核糖核酸、核黄素、细胞色素C、B族维生素、乳糖酶、脂肪酶、氨基酸等</li>
<li>化工：使石油脱蜡、以石油为原料生产柠檬酸等</li>
<li>农业：生产饲料</li>
<li>生物工程：作为基因工程的受体菌</li>
</ul>
</li>
<li><p>危害：使物品变质，对人和动植物致病</p>
</li>
<li><p>形态：通常为圆形、卵圆形或椭圆形。也有特殊形态,比如柠檬型,假菌丝,三角形,藕节状,腊肠形等</p>
</li>
<li><p>大小：比细菌粗约10倍微米级，直径2-5um，长度5-30um，最长可达100um</p>
</li>
<li><p>细胞结构：细胞壁、细胞膜、细胞核、液泡、线粒体、内质网、微丝、微体、及内含物等，有的菌体还有出芽痕。</p>
<ul>
<li>细胞壁：<ul>
<li>化学组成：葡聚糖、甘露聚糖、蛋白质、脂类、几丁质（不是所有都有）</li>
<li>三层结构：外到内主要是甘露聚糖、蛋白质、葡聚糖</li>
<li>有些菌壁外含有由多糖构成的类似荚膜的结构，如异多糖和淀粉类物质</li>
</ul>
</li>
<li>细胞膜：<ul>
<li>组成：蛋白质（包括一些酶），糖类（甘露聚糖等），类脂（甘油单、双、三酯，甘油磷脂，甾醇等）</li>
<li>功能：<ul>
<li>调节细胞外溶质运送到细胞内的渗透屏障</li>
<li>细胞壁等大分子的生物合成和装配基地</li>
<li>部分酶的合成和作用场所</li>
</ul>
</li>
</ul>
</li>
<li>细胞核：<ul>
<li>具有双层膜结构的细胞器</li>
<li>功能：携带遗传信息，控制细胞的增殖和代谢</li>
</ul>
</li>
<li>细胞质和细胞器：<ul>
<li>细胞基质和细胞骨架：<ul>
<li>除细胞器以外的胶状溶液称为细胞基质</li>
<li>细胞骨架是由微管、肌动蛋白丝（微丝）和中间丝三种蛋白质纤维构成的细胞支架</li>
</ul>
</li>
<li>内质网：是分布在整个细胞中的由膜构成的管道和网状结构。在细胞中和核膜或细胞膜连在一起<ul>
<li>根据表面结构分为：<ul>
<li>粗糙型内质网：膜外附着有核糖体</li>
<li>光滑型内质网：表面没有附着的颗粒</li>
</ul>
</li>
<li>功能：起物质传递的作用，另外还有合成脂类和脂蛋白</li>
</ul>
</li>
<li>线粒体：双层膜，外形和大小与杆菌相似<ul>
<li>功能：蕴藏在有机物中的化学能转化成生命活动所需的能量</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>繁殖方式：</p>
<ul>
<li><strong>有性</strong>：（产子囊孢子）具有有性繁殖的酵母菌称为真酵母，酵母菌是以形成子囊和子囊孢子的方式进行有性繁殖的<ul>
<li>有性繁殖过程：细胞原生质体接触——质配——核配——减数分裂</li>
</ul>
</li>
<li>无性：只进行无性繁殖的酵母菌称为假酵母<ul>
<li><strong>芽殖</strong>：各属都存在，是酵母菌最常见的一种繁殖方式<ul>
<li>一个酵母能形成的芽数是有限的（平均24个）</li>
<li>出芽方式：多边出芽、两端出芽、三边出芽、单边出芽</li>
<li>芽殖过程：母细胞形成小突起——核裂——原生质分配——新膜形成——形成新细胞壁</li>
<li>假菌丝：有的酵母菌进行芽殖后，长大的子细胞不与母细胞立即分离，并继续除芽，细胞成串排列，这种菌丝状的细胞串就称为假菌丝。假菌丝的各细胞间仅以狭小的面积相连，呈藕节状。而霉菌的菌丝为真菌丝，即相连细胞间的横隔面积与细胞直径一致，呈竹节状的细胞串，称为真菌丝。</li>
</ul>
</li>
<li><strong>裂殖</strong>：在裂殖酵母菌中存在，与细菌相似的二分裂繁殖方式</li>
<li><strong>产无性孢子</strong>：节孢子、掷孢子、厚垣孢子</li>
</ul>
</li>
</ul>
</li>
<li><p>生活史：生活史又称生命周期，指上一代生物个体经一系列生长、发育阶段而产生下一代的全部过程</p>
<ul>
<li>营养体既能以单倍体也能以二倍体形式存在：<ul>
<li>特点：一般以营养体状态进行出芽繁殖</li>
</ul>
</li>
<li>营养体只能以单倍体形式存在：<ul>
<li>营养细胞为单倍体</li>
<li>无性繁殖为裂殖</li>
<li>二倍体细胞不能独立生活，此期极短。双倍体阶段短，一经生成立即减数分裂</li>
</ul>
</li>
<li>营养体只能以二倍体形式存在：<ul>
<li>营养体为二倍体不断进行芽殖，此阶段较长</li>
<li>单倍体的子囊孢子在子囊内发生接合</li>
<li>单倍体阶段仅以子囊孢子的形式存在，不能进行独立生活</li>
</ul>
</li>
</ul>
</li>
<li><p>菌落：菌落与细菌的相仿，但由于细胞比细菌的大，细胞内有许多分化的细胞器，细胞间隙含水量相对较少，以及不能运动等特点，因此<strong>菌落大而厚， 圆形，光滑湿润，粘性，颜色单调。常见白色、土黄色、红色</strong></p>
<ul>
<li>液体培养：<ul>
<li>好气性生长的酵母可在培养基表面上形成菌膜或菌醭，其厚度因种而异</li>
<li>有的酵母菌在生长过程中始终沉淀在培养基底部</li>
<li>有的酵母菌在培养基中均匀生长，使培养基呈浑浊状态</li>
</ul>
</li>
<li>上面酵母与下面酵母：并非分类学上的名称，而是在啤酒酿造业中根据酵母菌在容器内的情况而对酵母菌株进行的分类<ul>
<li>上面酵母：在发酵过程中细胞浮游在液体上层，是较活跃的发酵剂</li>
<li>下面酵母：在发酵过程中细胞沉于容器底层，是较缓慢的发酵剂</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="丝状真菌——霉菌"><a href="#丝状真菌——霉菌" class="headerlink" title="丝状真菌——霉菌"></a>丝状真菌——霉菌</h3><p>霉菌是<strong>丝状真菌</strong>的一个俗称，通常指那些菌丝体较为发达又不产生大型肉质子实体结构的真菌</p>
<ul>
<li>cmp：放线菌</li>
</ul>
<h4 id="分布："><a href="#分布：" class="headerlink" title="分布："></a>分布：</h4><ul>
<li>相当广泛，无所不在，种类和数量惊人</li>
<li>霉菌是各种复杂有机物，尤其是数量最大的纤维素、半纤维素和木质素的主要分解菌</li>
<li>一般情况下，霉菌在潮湿的环境下易于生长，特别是偏酸性的基质当中</li>
</ul>
<h4 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h4><ul>
<li>食品：酿制酱、酱油、干酪等</li>
<li>工业：生产有机酸、酶制剂、抗生素、维生素、生物碱、真菌多糖、植物生长刺激素、甾体激素类药物等</li>
<li>生物防治、污水处理和生物测定等</li>
<li><strong>基本理论研究</strong>：最著名的是利用粗糙脉胞菌进行生化遗传学方面的研究</li>
</ul>
<h4 id="危害："><a href="#危害：" class="headerlink" title="危害："></a>危害：</h4><ul>
<li>引起食品、生活用品以及一些工具、仪器、工业原料等的霉变</li>
<li>对动植物、人类致病</li>
<li>产生毒素，引起食物中毒</li>
<li>形态结构：霉菌的菌体由分枝或不分枝的菌丝构成。许多分枝菌丝相互交织在一起构成菌丝体。菌丝是中空管状结构，直径约2-10um<ul>
<li>霉菌菌丝类型：<ul>
<li>按形态分：<ul>
<li>无隔菌丝：为长管状单细胞，细胞质内含多个核。其生长表现为菌丝的延长和细胞核的增多。这是低等真菌所具有的菌丝类型</li>
<li>有隔菌丝：菌丝中有隔膜，被隔膜隔开的一段菌丝就是一个细胞，菌丝由多个细胞组成，每个细胞内有一至多个核。隔膜上有单孔或多孔，细胞质和细胞核可自由流通，每个细胞功能相同。这是高等真菌所具有的类型</li>
</ul>
</li>
<li><strong>按分化程度分</strong>：（与放线菌比较）<ul>
<li>营养菌丝（基内菌丝）：伸入到培养基内部，以吸收养分为主的菌丝</li>
<li>气生菌丝：向空中生长的菌丝，气生菌丝发育到一定阶段可分化成繁殖菌丝</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>细胞结构：霉菌的细胞膜、核线粒体和核糖体等成分与其它真核生物（酵母）基本相同。幼龄菌往往液泡小而少，老龄菌具有较大的液泡。<ul>
<li>细胞壁：除少数低等水生霉菌细胞壁含纤维素外，大部分霉菌细胞壁主要由几丁质组成。组成真菌细胞壁的另一类成分为无定型物质，主要是一些蛋白质、甘露聚糖和葡聚糖，它们填充于上述纤维状物质构成的网内或网外，充实细胞壁的结构</li>
</ul>
</li>
<li>菌丝体：由许多菌丝相互交织而成的一个菌丝集团<ul>
<li>营养菌丝体：密布在固体培养基质内部，主要执行吸收营养物功能的菌丝体</li>
<li>气生菌丝体：伸展到空间的菌丝体</li>
</ul>
</li>
<li>假根：有的真菌在菌丝下面长出根状菌丝，伸入基质中吸收养分并支持上部的菌丝，这种根状菌丝叫假根</li>
<li>吸器：专性寄生真菌（如锈菌）从菌丝产生出的旁枝，侵入寄主细胞内分化成指状、球状</li>
</ul>
<h4 id="霉菌的繁殖（讲过）"><a href="#霉菌的繁殖（讲过）" class="headerlink" title="霉菌的繁殖（讲过）"></a><strong>霉菌的繁殖</strong>（讲过）</h4><ul>
<li><strong>繁殖方式</strong>：对一些典型什么花生什么</li>
</ul>
<ol>
<li>无性繁殖：不经过两个性细胞的结合，只是由营养细胞分裂或分化形成同种新个体的过程</li>
</ol>
<ul>
<li>无性孢子：<strong>孢囊孢子（内生）、分生孢子（外生）</strong>、节孢子、厚垣孢子<ul>
<li><strong>孢囊孢子</strong>：由于生于孢子囊内，又叫<strong>内生孢子</strong>。它是由<strong>气生菌丝顶端膨大</strong>形成特殊囊状结构——孢子囊，孢子囊逐渐长大，在囊中形成许多核，每一个核外包以原生质并产生细胞壁，形成孢囊孢子。有静孢子（不生鞭毛，不能游动，根霉属）和游动孢子（生鞭毛，能游动，绵霉属）两种。</li>
<li><strong>分生孢子</strong>：生于细胞外，又称<strong>外生孢子</strong>。是大多数子囊菌纲及全部半知菌的无性繁殖方式。分生孢子是由菌丝顶端细胞或由分生孢子梗顶端细胞经过分割或缩缢而形成的单个或成簇的孢子；eg，曲霉，青霉，镰刀酶</li>
<li><strong>节孢子（粉孢子）</strong>：由菌丝断裂形成的外生孢子。当菌丝长到一定阶段，出现许多横膈膜，然后从横膈膜处断裂，产生许多孢子。孢子是成串的短柱状、筒状或两端钝圆的细胞；eg，白地霉</li>
<li><strong>厚垣孢子（壁厚孢子）</strong>：这类孢子有很厚的壁，又叫厚壁孢子。菌丝顶端或中间的个别细胞膨大、原生质浓缩、变圆，然后细胞壁加厚形成圆形、纺锤形或长方形的厚壁孢子。<strong>厚垣孢子也是霉菌的休眠体</strong>，对热、干燥等不良环境抵抗力很强</li>
</ul>
</li>
</ul>
<ol start="2">
<li>有性繁殖：经过两个性细胞结合而产生新个体的过程。有性繁殖多发生在特定的条件下，在自然条件下较多，在一般培养基上不常出现。多数霉菌是由菌丝分化形成特殊的性细胞（器官）——配子囊或由配子囊产生的配子（雄器和雌器）相互交配，形成有性孢子<ol>
<li>有性繁殖的三个阶段：<ul>
<li><strong>质配</strong>：两个性细胞的核共存于一个细胞中，形成双核细胞，每个核的染色体数目都是单倍体的（n+n）</li>
<li><strong>核配</strong>：形成二倍体接合子，核的染色体数目是双倍的（2n）</li>
<li><strong>减数分裂</strong>：形成单倍体有性孢子，核的染色体数目是单倍的（n）</li>
</ul>
</li>
<li>有性孢子：<strong>卵孢子、接合孢子、子囊孢子、担孢子</strong></li>
</ol>
<ul>
<li>卵孢子：由大小不同的配子囊结合后发育而成。小型的配子囊小型的配子囊称雄器，大型的配子囊称藏卵器，藏卵器内有一个或数个称为卵球的原生质团，它相当于高等生物的卵。当雄器与藏卵器配合时，雄器中的细胞质和细胞核通过受精管进入藏卵器，并与卵球结合，受精卵球生出外壁，发育成卵孢子。</li>
<li>接合孢子：由菌丝生出的结构基本相似、形态相同或略不同的两个配子囊接合。形态：厚壁、粗糙、黑壳。两个相邻的菌丝相遇，向对方生出<em>极短的侧枝，称原配子囊</em>。原配子囊接触后，顶端各自膨大并形成横隔，分隔形成两个<em>配子囊细胞</em>，配子囊下的部分称配子囊柄。相接触的两个配子囊之间的<em>横隔消失</em>，发生<em>质配、核配</em>，同时外部形成厚壁，成<em>接合孢子</em><ul>
<li><em>同宗配合</em>：菌体自身可孕，不需要别的菌体帮助而能独立进行有性生殖</li>
<li><em>异宗配合</em>：菌体自身不孕，需要借助别的<em>可亲和菌体的不同交配型</em>来进行有性生殖</li>
</ul>
</li>
<li>子囊孢子：在子囊内形成的有性孢子。形成子囊孢子是子囊菌纲的主要特征。<ul>
<li>子囊：<em>两性细胞接触以后形成的囊状结构</em>。有球形、棒形、圆筒形、长方形等因种而异。子囊内孢子通常是<em>1-8个</em></li>
</ul>
</li>
<li>担孢子</li>
</ul>
</li>
</ol>
<h4 id="霉菌菌落："><a href="#霉菌菌落：" class="headerlink" title="霉菌菌落："></a>霉菌菌落：</h4><p>菌落形态<strong>较大</strong>，质地一般比放线菌疏松、外观干燥，不透明，呈现或紧或松的蛛网状、绒毛状或棉絮状；菌落与培养基的连接紧密，不易挑取，菌落正反面的颜色和边缘与中心的颜色常不一致。比细菌、酵母菌的大。</p>
<ul>
<li>菌丝体在液体培养时的特化形态：有利于氧的传递以及营养物和代谢物的输送，对菌丝的生长代谢产物有利<ul>
<li>静止培养：霉菌往往在表面上生长，液面上形成菌膜</li>
<li>震荡培养：菌丝有时相互缠绕在一起形成菌丝球，菌丝球可能均匀地悬浮在培养液中或沉于培养液底部</li>
</ul>
</li>
</ul>
<p><img src="/./%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/image-20230421005146860.png" alt="image-20230421005146860"></p>
<h3 id="蕈菌"><a href="#蕈菌" class="headerlink" title="蕈菌"></a>蕈菌</h3><p>产大型子实体的真菌</p>
<h2 id="第四章-病毒"><a href="#第四章-病毒" class="headerlink" title="第四章 病毒"></a>第四章 病毒</h2><p>say：<em>繁殖方式动物植物比较</em>，病毒的定义，蛋白质繁殖的方式，病毒的形状和大小，五个阶段，繁殖过程，<em>一步生长曲线，各个时期的理解</em>(前提是烈性)，烈性噬菌体与<em>温和噬菌体</em>，<em>亚病毒</em><br>课后习题作业<br><strong>定义</strong>：病毒是含<strong>一种核酸</strong>，专性活细胞内寄生，只能依靠宿主细胞的代谢系统完成核酸的复制和蛋白质的合成，并经<strong>装配</strong>而达到增殖，又能在细胞外以无生命的大分子状态而存在的<strong>非细胞型</strong>微生物</p>
<h3 id="病毒的形态结构和化学组成"><a href="#病毒的形态结构和化学组成" class="headerlink" title="病毒的形态结构和化学组成"></a>病毒的形态结构和化学组成</h3><h4 id="对病毒的描述：非细胞生物"><a href="#对病毒的描述：非细胞生物" class="headerlink" title="对病毒的描述：非细胞生物"></a><strong>对病毒的描述：非细胞生物</strong></h4><ul>
<li>（真）病毒：<strong>至少含核酸和蛋白质</strong>两种组分</li>
<li>亚病毒：<ul>
<li>类病毒：裸露的，仅含一个单链环状低相对分子质量的RNA分子的病原体</li>
<li>卫星病毒：即一个小片段的RNA或DNA，他们完全依赖于另一专一辅助病毒的同时感染，基因才能复制和表达，才能完成增殖的亚病毒因子</li>
<li>卫星RNA：<strong>只有RNA</strong>。这一类寄生于专一辅助病毒壳体内，必须依赖于辅助病毒才能复制的RNA分子片段</li>
<li>朊病毒：是一类能侵染动物并在宿主细胞内复制的小分子无免疫性疏水<strong>蛋白质</strong></li>
</ul>
</li>
</ul>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul>
<li><strong>形体极其微小</strong>，必须在电子显微镜下才能观察，一般都可通过细菌滤器</li>
<li><strong>没有细胞构造</strong>，故也称分子生物</li>
<li>其<strong>主要成分仅是核酸和蛋白质</strong>两种</li>
<li><strong>每一种病毒只含有一种核酸</strong>，不是DNA就是RNA</li>
<li>既无产能酶系也无蛋白质合成系统</li>
<li>在宿主细胞协助下，通过核酸的复制和核酸蛋白装配的形式进行增殖，不存在个体生长和二均等分裂等细胞繁殖方式</li>
<li><strong>在宿主的活细胞内营专性寄生</strong></li>
<li><strong>在离体条件下，以无生命的化学大分子状态存在，并可形成结晶；可保持其侵染活性（非感染态）</strong></li>
<li>对一般抗生素不敏感，但对干扰素敏感</li>
<li>宿主范围：动物病毒、植物病毒、细菌病毒（或称噬菌体）</li>
</ul>
<h4 id="病毒的形状和大小"><a href="#病毒的形状和大小" class="headerlink" title="病毒的形状和大小"></a><strong>病毒的形状和大小</strong></h4><ul>
<li>形状：有球状、杆状、蝌蚪状、子弹状和丝状、冠状等。其基本形态为球状（或近似球状）、杆状和蝌蚪状。</li>
<li>大小：<ul>
<li>测定大小的单位是纳米，多数病毒的直径在100nm以下</li>
<li>个体小，必须在电镜下观察</li>
<li>不同病毒的毒粒大小差别很大</li>
</ul>
</li>
<li>典型病毒粒的构造：病毒粒子——成熟的、具有侵染力的单个病毒，又称病毒颗粒</li>
</ul>
<h4 id="病毒的典型结构"><a href="#病毒的典型结构" class="headerlink" title="病毒的典型结构"></a>病毒的典型结构</h4><p><img src="/./_Img/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/%E7%97%85%E6%AF%92%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="Img"><br>病毒粒子：成熟（结构完整）的、具有侵染力的单个病毒，又称为病毒颗粒</p>
<ul>
<li><em>基本成分</em>：<ul>
<li>核酸：位于中心，称为核心</li>
<li>蛋白质：包围在核心周围，形成衣壳</li>
</ul>
</li>
<li>核心和衣壳合成核衣壳（蛋白质基本单元），为病毒的基本结构</li>
<li>外面包裹着一层由脂类和多糖组成的包膜，有的包膜上还长有刺突</li>
</ul>
<h4 id="病毒粒的对称体制："><a href="#病毒粒的对称体制：" class="headerlink" title="病毒粒的对称体制："></a>病毒粒的对称体制：</h4><ul>
<li>螺旋对称：<ul>
<li>典型代表：烟草花叶病毒</li>
<li>无包膜：<ul>
<li>杆状：烟草花叶病毒等</li>
<li>丝状：大肠杆菌的f1、fd、M13等</li>
</ul>
</li>
<li>有包膜：<ul>
<li>卷曲状：正粘病毒（流感病毒）等</li>
<li>弹状：狂犬病毒，水泡性口膜炎病毒等</li>
</ul>
</li>
</ul>
</li>
<li>二十面体对称：可以容纳最多的核酸（二十面体容积最大）<ul>
<li>典型代表：腺病毒</li>
<li>无包膜：<ul>
<li>大型：腺病毒等，核心由线状双链DNA构成</li>
<li>小型：脊髓灰质炎病毒，$\phi$X174噬菌体等</li>
</ul>
</li>
<li>有包膜：疱疹病毒</li>
</ul>
</li>
<li>复合对称：<ul>
<li>典型代表：T偶数噬菌体</li>
<li>无包膜：大肠杆菌的T偶数噬菌体（蝌蚪状）等</li>
<li>有包膜：痘病毒（砖块状）</li>
</ul>
</li>
</ul>
<h4 id="化学组成："><a href="#化学组成：" class="headerlink" title="化学组成："></a>化学组成：</h4><p>核酸（DNA、RNA）和蛋白质。有的病毒还含有脂类、糖类等其他组分</p>
<ul>
<li>病毒核酸：单链DNA（ss NDA），双链DNA（ds DNA），单链RNA（ss RNA），双链RNA（ds RNA）<ul>
<li>分类：<ul>
<li>植物病毒绝大多数含RNA，少数含DNA</li>
<li>动物病毒一部分含DNA，一部分含RNA</li>
<li>细菌病毒则普遍含DNA，含RNA的极少<del>还不清楚是否有含DNA的真菌病毒</del></li>
</ul>
</li>
<li>病毒DNA分子有线状和环状之分</li>
<li>病毒核酸有正链(+)和负链(-)之分：将碱基序列与mRNA一致的核酸单链称为正链，与mRNA互补的核酸单链称为负链。<ul>
<li>($\pm$)DNA：大部分DNA病毒</li>
<li>($\pm$)RNA：动物呼肠孤病毒</li>
<li>($+$)DNA：大肠杆菌$\phi$X174噬菌体</li>
<li>($+$)RNA：所有单链RNA病毒&#x2F;大部分植物病毒</li>
<li>($-$)DNA：腺病毒</li>
<li>($-$)RNA：流感病毒</li>
</ul>
</li>
</ul>
</li>
<li>病毒蛋白质：<ul>
<li>有的病毒只有一种蛋白质，多数含有为数不多的几种蛋白质</li>
<li>不同病毒蛋白质的氨基酸组成和含量各不相同</li>
<li>病毒蛋白质主要在构成病毒结构、病毒的侵染与增殖过程中发挥作用：<ul>
<li>结构功能</li>
<li>吸附</li>
<li>破坏宿主细胞壁与细胞膜</li>
<li>增殖</li>
</ul>
</li>
</ul>
</li>
<li>其他成分：<ul>
<li>较复杂病毒（包膜病毒）含有脂类、多糖等成分</li>
<li>病毒的脂类主要以脂质双分子层的形式存在于病毒的包膜中</li>
<li>病毒所含的糖类主要以糖蛋白的形式存在于包膜的表面，决定着病毒的抗原性</li>
</ul>
</li>
</ul>
<h3 id="病毒的增殖"><a href="#病毒的增殖" class="headerlink" title="病毒的增殖"></a>病毒的增殖</h3><h4 id="原核生物的病毒——噬菌体"><a href="#原核生物的病毒——噬菌体" class="headerlink" title="原核生物的病毒——噬菌体"></a>原核生物的病毒——噬菌体</h4><p>病毒粒子并无个体的生长过程，而只有其两种基本成分的合成和装配，即<strong>核酸复制+蛋白质合成$\rightarrow$核蛋白</strong></p>
<ul>
<li><strong>分五个阶段</strong>(她讲了好多，掌握，核心是DNA复制蛋白质合成最后装配的过程)：<ol>
<li><strong>吸附</strong>：尾丝尖端与宿主细胞表面的特异性受体接触，触发尾丝散开，附着在受体上，随之把刺突、基板固定</li>
<li><strong>侵入</strong>：尾部的酶水解细胞壁的肽聚糖，使细胞壁产生小孔；尾鞘收缩，核酸通过中空的尾管压入胞内，蛋白质外壳留在胞外；</li>
<li><strong>增殖</strong>（复制与生物合成）：病毒利用宿主的生物合成机构和场所，使病毒核酸表达和复制，产生大量的病毒蛋白质和核酸；</li>
</ol>
<ul>
<li>病毒基因组的表达与复制存在很强的<strong>时序性</strong>：宿主原有蛋白-早期蛋白-次早期蛋白-晚期蛋白</li>
<li>病毒大分子合成：<ol>
<li>早期：病毒特异性酶的合成</li>
<li>病毒核酸复制</li>
<li>病毒结构蛋白质合成</li>
</ol>
</li>
<li>噬菌体核酸进入宿主细胞后，会控制宿主细胞的合成系统，然后以噬菌体核酸中的指令合成噬菌体所需的核酸和蛋白质；</li>
</ul>
<ol start="4">
<li>成熟（装配）</li>
<li>裂解（释放）</li>
</ol>
</li>
</ul>
<h4 id="噬菌斑"><a href="#噬菌斑" class="headerlink" title="噬菌斑"></a>噬菌斑</h4><ul>
<li>效价：表示每毫升试样中所含有的具侵染性的病毒粒子数<ul>
<li><strong>噬菌体的效价指能使感染细菌裂解，产生噬菌斑的噬菌体数</strong>，又称噬菌斑形成单位或感染中心</li>
<li>测定方法：双层平板法，<strong>避免二次吸附</strong></li>
</ul>
</li>
<li>双层平板法：<ul>
<li>优点：<ul>
<li>底层培养基，弥补玻璃皿底面不平的缺陷</li>
<li>全部噬菌斑都处于同一平面上，每一噬菌斑的大小接近，边缘清晰，且不发生上下噬菌斑重叠的现象</li>
<li>上层培养基中琼脂较稀，形成的噬菌斑较大，更有利于计数</li>
</ul>
</li>
</ul>
</li>
<li><strong>一步生长曲线</strong>：以<strong>效价</strong>（噬菌斑）为纵坐标，培养时间为横坐标所绘成的曲线<br><img src="/./_Img/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/%E4%B8%80%E6%AD%A5%E7%94%9F%E9%95%BF%E6%9B%B2%E7%BA%BF.png" alt="Img"><ul>
<li><strong>定量描述烈性噬菌体生长规律的实验曲线</strong></li>
<li>描述一个动力学过程：多少（效价），多久</li>
</ul>
</li>
<li>根据生长曲线，可分为：<strong>潜伏期——裂解期——平稳期</strong><ul>
<li>潜伏期：从噬菌体吸附细菌到细菌细胞释放新的噬菌体之前的这段时期，曲线平行于横轴，噬菌体数无变化样品中无游离的噬菌体。（潜伏期前的噬菌斑数是噬菌体数，也就是感染噬菌体的细菌数）</li>
<li>裂解期：曲线直线上升，直到达到一个极限子代：装配完成，噬菌体不断释放到培养基中</li>
<li>平稳期：感染细胞后复制的子代噬菌体全部释放，噬菌班数稳定，一次感染结束</li>
<li>平均每一个宿主细胞裂解后所产生的子代噬菌体数称作裂解量，裂解量&#x3D;稳定期噬菌斑数&#x2F;潜伏期噬菌斑数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 植物病毒：</span><br><span class="line">  - 植物病毒没有专门的吸附结构，通过昆虫口器、摩擦伤口和人为伤口进入寄主细胞。植物病毒在入住宿主细胞后脱去蛋白质外壳</span><br><span class="line">  - TMV的衣壳粒以双层盘的形式组装形成衣壳，pH的改变、RNA的嵌入对衣壳的装配起关键作用</span><br><span class="line">- 人类和脊椎动物病毒：</span><br><span class="line">  - 脊椎动物病毒包括DNA（腺病毒）和RNA（脊髓灰质炎病毒）病毒</span><br><span class="line">  - 侵入方式：移位——质膜融合——胞吞作用</span><br><span class="line">  - 释放方式：</span><br><span class="line">    - 无包膜的病毒，如腺病毒通过细胞裂解或局部破裂而释放</span><br><span class="line">    - 有包膜的DNA病毒，如疱疹病毒，以细胞质中通道释放到细胞外</span><br><span class="line">    - 有包膜的RNA病毒，如副流感病毒用出芽方式通过寄主细胞膜，释放到细胞外并获得细胞源性的包膜和产生刺突</span><br><span class="line">  - 空斑：人工培养的单层动物细胞感染病毒后，会形成类似噬菌斑的动物病毒群体</span><br><span class="line">  - 病斑：单层动物细胞受到肿瘤病毒的感染后，会使动物细胞恶性增生，形成类似细菌菌落的病灶</span><br><span class="line">- 昆虫病毒：多数昆虫病毒可在宿主细胞内形成光镜下呈多角形的包涵体，称多角体，成分为碱溶性结晶蛋白，其内包裹着数目不等的病毒粒</span><br><span class="line">  - 核形多角体病毒：在昆虫细胞核内增殖，具有蛋白质包涵体的杆状病毒</span><br><span class="line">  - 质形多角体病毒：在昆虫细胞质内增殖，可形成蛋白质包涵体的球状病毒</span><br><span class="line">  - 颗粒体病毒：具有蛋白质包涵体，每个包涵体内通常仅含有一个病毒粒的昆虫杆状病毒</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="噬菌体分为烈性噬菌体和温和噬菌体"><a href="#噬菌体分为烈性噬菌体和温和噬菌体" class="headerlink" title="噬菌体分为烈性噬菌体和温和噬菌体"></a>噬菌体分为<strong>烈性噬菌体和温和噬菌体</strong></h4><p>烈性噬菌体：大部分噬菌体感染宿主细胞，能在宿主细胞内增殖，产生大量子代噬菌体并引起细菌裂解<br>温和噬菌体（溶源性噬菌体）：噬菌体感染细胞后，将其核酸整合到宿主的基因组上，并且可以随宿主基因的复制而进行同步复制，在一般情况下不引起寄主细胞裂解<br><img src="/./_Img/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/%E7%83%88%E6%80%A7%E6%9F%94%E6%80%A7%E7%94%9F%E6%B4%BB%E5%8F%B2%E6%AF%94%E8%BE%83.png" alt="Img"></p>
<ul>
<li><strong>溶源性</strong>：温和噬菌体侵染敏感细菌后不裂解它们，而与细菌共存的特性，<em>比较区别</em></li>
<li><strong>特点</strong><ul>
<li>其核酸类型都是dsDNA</li>
<li>具有整合能力</li>
<li>具有同步复制能力</li>
</ul>
</li>
<li>前噬菌体（原噬菌体）：处于整合态的噬菌体核酸</li>
<li>溶源性细菌及其检出：<ul>
<li>溶源性细菌：在核染色体组上整合有前噬菌体并能正常生长繁殖而不被裂解的微生物</li>
<li>特点：<ul>
<li>可稳定遗传：子代细菌都有含有原噬菌体，均具有溶源性</li>
<li>可自发裂解：温和噬菌体的核酸也可从宿主DNA上脱落下来，恢复原来的状态，进行大量的复制，变成烈性噬菌体，自发裂解几率$10^{-2}\sim 10^{-5}$</li>
<li>可诱导裂解：用化学、物理方法诱导</li>
<li>具有“免疫性”：溶源菌对赋予其溶源性的噬菌体或相关的同源的噬菌体不敏感，对同源噬菌体具有免疫性，对非同源噬菌体没有免疫性</li>
<li>可复愈：自然遗失前噬菌体，但不发生自发裂解和诱导裂解</li>
<li>溶源转变：由于溶源菌整合了温和噬菌体的核酸而使自己产生一些新的生理特征</li>
</ul>
</li>
<li>检验方法：在合适的培养基中培养待测菌样——在对数期进行紫外线照射，诱导原噬菌体复制——进一步培养——过滤培养物，去除活菌体——滤液与指示菌混合、倒平板（或将滤液加到敏感性指示菌的液体培养物中）——观察是否有噬菌斑出现（或使菌液变清）<ul>
<li>敏感性指示菌：遇溶源菌裂解后所释放的温和噬菌体会裂解性生活的非溶源性菌株，这些菌株可以从自然界或菌种库中获得</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="病毒学研究的基本方法"><a href="#病毒学研究的基本方法" class="headerlink" title="病毒学研究的基本方法"></a>病毒学研究的基本方法</h3><ul>
<li>包涵体：感染病毒的宿主细胞内，出现在光学显微镜下可见的大小、形态、数量不等的小体，称为包涵体。在宿主细胞内形成包涵体是病毒的特征，不同的病毒其形成的包涵体具有不同的形态、结构和特性，可用于分类鉴定。<ul>
<li>本质：大多数是病毒粒子组成的，少数是细胞对病毒的反应</li>
<li>实践意义：病毒鉴定，临床诊断依据</li>
</ul>
</li>
<li>利用价值：<ul>
<li>创造新的花卉品种</li>
<li>防治细菌</li>
<li>抗霜冻噬菌体保护植物免受霜冻的危害</li>
<li>昆虫病毒用于防治害虫</li>
<li>基因工程中重要的载体</li>
</ul>
</li>
</ul>
<h3 id="亚病毒"><a href="#亚病毒" class="headerlink" title="亚病毒"></a>亚病毒</h3><ul>
<li>类病毒：裸露的，仅含一个单链环状低相对分子质量RNA分子的病原体；能独立侵染寄主，侵入寄主后也能自我复制，不需要辅助病毒；<ul>
<li>发现的第一个类病毒是马铃薯纺锤形块茎病类病毒</li>
</ul>
</li>
<li>拟病毒</li>
<li><em>朊病毒</em></li>
</ul>
<h2 id="第五章-微生物的营养和培养基"><a href="#第五章-微生物的营养和培养基" class="headerlink" title="第五章 微生物的营养和培养基"></a>第五章 微生物的营养和培养基</h2><p>微生物的营养类型（4），每一种类型的特殊微生物记忆几个，看教材<br>四种运输营养物质方式比较</p>
<p><img src="/./_Img/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/%E7%AC%AC%E4%BA%94%E7%AB%A0%E6%A1%86%E6%9E%B6.png" alt="Img"></p>
<h3 id="微生物的营养物质及其功能"><a href="#微生物的营养物质及其功能" class="headerlink" title="微生物的营养物质及其功能"></a>微生物的营养物质及其功能</h3><ul>
<li><strong>营养</strong>（营养作用）：微生物细胞从外界环境中摄取化学物质，获得生命活动所需的能量及其结构物质的生理过程</li>
<li>微生物细胞的构成：C、H、O、N、P、S以及其他微量元素。<ul>
<li>化学组成最主要的是蛋白质、核酸、多糖和脂质</li>
<li>70%是水</li>
<li>还有有机酸、维生素、激素等有机化合物</li>
<li>大分子可以占到细胞干重的96%</li>
</ul>
</li>
<li>碳源：能提供微生物营养所需碳元素或碳架的营养物质。<strong>碳是微生物细胞需要量最大的元素</strong><ul>
<li>低分子量的有机物：烃类、醇、羧酸、脂肪酸、糖及其衍生物、杂环化合物、氨基酸和核苷酸（糖类是微生物最广泛利用的碳源，尤其是葡萄糖）</li>
<li>复杂的有机大分子：蛋白质和核酸等</li>
<li>天然含碳物质：牛肉膏、蛋白胨、花生饼粉、糖蜜、石油及其不同的组分</li>
<li>简单的无机含碳化合物：$\mathrm{CO}_2$、$\mathrm{NaHCO}_3$和$\mathrm{CaCO_3}$等（$\mathrm{CO}_2$或碳酸盐是自养微生物唯一或主要的碳源，如蓝细菌和硝化细菌）</li>
<li><strong>不同微生物利用的碳源物质的范围有很大不同</strong><ul>
<li>有些微生物利用的碳源物质范围很广，有些微生物所能利用的碳源物质种类极其有限。对为数众多的化能异养微生物来说，碳源是兼有<em>能源功能</em>的双功能营养物</li>
</ul>
</li>
</ul>
</li>
<li>能源：是提供微生物生命活动所需能量的物质。<ul>
<li>大多数微生物的能源物质是<em>化学物质</em>（有机化合物和无机化合物），少数微生物的能源是光</li>
<li>葡萄糖是常见的一种<strong>兼有碳源于能源功能的双功能营养物</strong></li>
<li>光能自养微生物的能源是光，而碳源为$\mathrm{CO}_2$；化能自养微生物的能源为$\mathrm{NH4}^+$、$\mathrm{NO}_2$、单质$\mathrm{S}$、$\mathrm{H}_2$和$\mathrm{Fe}^{2+}$等<em>还原态无机化合物</em>，而碳源是$\mathrm{CO}_2$</li>
</ul>
</li>
<li>氮源：能提供微生物所需氮素的营养物质，是微生物细胞需要量<strong>仅次于碳</strong>的元素，常用<strong>分子氮</strong>（比如氮气，也是无机氮）<ul>
<li>种类：分子态氮、氨、铵盐和硝酸盐等无机含氮化合物，有尿素、氨基酸、嘌呤和嘧啶等有机氮化合物。固氮菌、根瘤菌和蓝细菌等能利用分子态氮（$\mathrm{N_2}$），转化为植物所需的铵盐</li>
<li>功能：提供细胞原生质和其他结构物质中的氮素，<em>一般不作为能源使用</em>。（例外：对亚硝化细菌和硝化细菌来说，$\mathrm{NO_2}$和$\mathrm{NH_3}$是<strong>兼有氮源和能源功能的双功能营养物质</strong>）</li>
<li>三重功能的营养物：对<em>异养生物</em>来说，含有C、H、O、N的有机化合物</li>
</ul>
</li>
<li>无机盐：是除了碳源、氮源和能源外，微生物生长必不可少的另一类营养物质。包括<strong>大量元素</strong>和<strong>微量元素</strong><ul>
<li>大量元素：P、S、K、Mg、Ca、Na、F等，浓度在$10^{-3}\sim 10^{-4}\mathrm{mol&#x2F;L}$范围内</li>
<li>微量元素：Co、Zn、Mo、Cu、Mn、Ni、W等，浓度在$10^{-6}\sim 10^{-8}\mathrm{mol&#x2F;L}$范围内</li>
<li>摄取形式：M、K、Na、Fe、Co、Zn、Mo、Cu、Mn和Ni等金属元素来源于无机盐的阳离子，而P、S等非金属元素极大多数来自于无机盐的盐根</li>
<li>生理功能：<ul>
<li>提供微生物细胞化学组成中除C和N外的重要元素</li>
<li>参与并稳定微生物细胞的结构</li>
<li>Mg、Cu和Zn是许多酶的激活剂，辅酶NAD是含P化合物，固氮酶含Fe、Mo辅因子</li>
<li>调节和维持微生物生长过程中诸如渗透压、氢离子浓度和氧化还原电位等生长条件</li>
<li>用作某些化能自养细菌的能源物质</li>
</ul>
</li>
</ul>
</li>
<li>生长因子：微生物生长所不可缺少的微量有机物质<ul>
<li>种类：维生素、氨基酸、嘌呤碱和嘧啶碱、卟啉及其衍生物、固醇、胺类、C2~C6直链或分支脂肪酸等</li>
<li>复苏促进因子Rpf是迄今为止发现的第一个能使休眠的细菌恢复生长繁殖能力的因子</li>
<li>功能：提供微生物细胞重要化学物质，如蛋白质、核酸和脂质等；作为辅助因子如辅酶和辅基等的组分和参与代谢</li>
<li>在微生物营养中对应微生物的生长因子，自然界还存在着微生物的<strong>生长抑制因子</strong></li>
<li>外源性的cAMP（环磷酸腺苷）影响真菌的生长，但依赖于选用的碳源的种类</li>
</ul>
</li>
<li>水：微生物营养中不可缺少的一种物质<ul>
<li>功能<ul>
<li>是微生物细胞的主要化学组成</li>
<li>是营养物质和代谢产物的良好溶剂</li>
<li>是细胞中各种生物和化学反应得以进行的介质，并参与许多生物化学反应</li>
<li>保证细胞内的温度不会因代谢过程中释放的能量骤然上升</li>
<li>利于生物大分子结构的稳定</li>
</ul>
</li>
<li>存在形式：自由水和结合水。<ul>
<li>结合水没有流动性和溶解力，微生物只能利用自由水。</li>
<li>水活度（aW）&#x3D;P溶液&#x2F;P纯水（p是渗透压）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="微生物营养类型"><a href="#微生物营养类型" class="headerlink" title="微生物营养类型"></a>微生物营养类型</h3><ul>
<li><strong>营养类型</strong>：根据能源、碳源和氢供体（氢供体和碳源几乎都是一致有机或无机）的不同，微生物营养类型可分为光能自养型、光能异养型、化能自养型、化能异养型：<ul>
<li><strong>光能自养型</strong>：利用光为能源，以$\mathrm{CO}_2$为基本碳源，还原$\mathrm{CO}_2$的氢供体是还原态无机化合物（$\mathrm{H_2O}$、$\mathrm{H_2S}$或$\mathrm{Na_2S_2O_3}$）。<ul>
<li>含有一种或几种光和色素，利用光和色素进行光合作用</li>
<li>蓝细菌含叶绿素</li>
<li>紫硫细菌与绿硫细菌含菌绿素</li>
</ul>
</li>
<li><strong>光能异养型</strong>：以光为能源，以有机碳化合物（甲酸、乙酸、甲醇、异丙醇、丙酮酸、乳酸等）作为碳源与氢供体营光合生长。<ul>
<li><strong>紫色非硫细菌</strong>具有利用甲醇作为唯一碳源进行光合生长的能力</li>
<li><strong>阳光细菌</strong>利用丙酮酸与乳酸作为唯一碳源光合生长</li>
</ul>
</li>
<li><strong>化能自养型</strong>：<em>既不需要光也不需要有机营养物质</em>，而是利用无机化合物氧化过程中释放出的能量，以$\mathrm{CO}_2$为碳源生长（氧化无机物释放能量）<ul>
<li>化能自养菌能生活在完全无机的环境中，硫化细菌、硝化细菌、铁细菌、氢细菌等都属于此营养类型<br><img src="/./_Img/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/%E5%8C%96%E8%83%BD%E8%87%AA%E5%85%BB%E5%9E%8B%E4%B8%A4%E4%BE%8B.png" alt="Img"></li>
</ul>
</li>
<li><strong>化能异养型</strong>：以有机碳化合物为能源，碳源和氢供体也是有机碳化合物，<strong>大多数微生物</strong>属于化能异养型。有机碳化合物是兼有能源与碳源功能的双重营养物<ul>
<li>根据营养物质是来自死亡或腐烂的生物物质，还是来自活的有机体又可分为腐生菌与寄生菌两种类型<ul>
<li>专性腐生菌：只能从<em>土壤和水</em>中而不能从宿主身上获得营养物质的腐生菌</li>
<li>专性寄生菌：必须从<em>活细胞</em>或组织中获得营养物质的，如立克次氏体、衣原体和病毒等</li>
<li>兼性寄生菌：以<em>腐生为主</em>、兼营寄生的兼性寄生菌，在适宜的条件下可致病</li>
<li>兼性腐生菌</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="note [info]">
            <p>四大营养类型微生物的<strong>划分是相对的</strong>，很多情况下<em>取决于生长环境</em>，许多微生物是<strong>兼性营养类型</strong>的，体现了微生物对环境很强的适应能力</p>
          </div>

<h3 id="营养物质进入微生物细胞"><a href="#营养物质进入微生物细胞" class="headerlink" title="营养物质进入微生物细胞"></a>营养物质进入微生物细胞</h3><ul>
<li>自由扩散：<ul>
<li>主要水、无机盐、水溶性小分子等</li>
<li>运输速率慢，非主要方式，水运最快</li>
</ul>
</li>
<li>促进&#x2F;协助扩散：<ul>
<li>糖和氨基酸等</li>
<li>借助细胞膜上特异性结合蛋白（类似的物质有抑制作用）</li>
</ul>
</li>
<li>主动运输：糖、无机离子、糖类、氨基酸和有机酸等<ul>
<li>微生物吸收营养物质的主要方式</li>
<li>速率较快</li>
</ul>
</li>
<li><strong>基团转位</strong>：物质在运输的同时由于受到<strong>化学修饰</strong>而源源不断进入细胞的一种运输方式。<em>主要存在于厌氧菌和兼性厌氧细菌中</em><ul>
<li>逆浓度梯度</li>
<li>需要能量</li>
<li>需<strong>特异性载体蛋白</strong>参与</li>
<li><strong>载体蛋白本身在运输前后发生变化</strong></li>
<li>运输物质：<strong>葡萄糖</strong>（大肠杆菌中磷酸化修饰）、甘露糖、乳糖、果糖、N-乙酰葡萄胺和半乳糖苷等糖及其衍生物外，还有嘌呤、嘧啶和脂肪酸等</li>
</ul>
</li>
<li>对于同种物质，不同微生物的运输方式可能不同（葡萄糖在大肠杆菌中集团转位，酵母菌中促进扩散）</li>
<li>重要的表，<strong>背过</strong><br><img src="/./%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/image-20230422003505321.png" alt="image-20230422003505321"></li>
</ul>
<h3 id="培养基"><a href="#培养基" class="headerlink" title="培养基"></a>培养基</h3><p>关注常用的培养基成分<br>培养基是是为人工培养微生物而制备的、提供微生物以合适营养条件的基质。</p>
<ul>
<li>制备培养基的基本原则：<ul>
<li>有的放矢：根据<strong>培养对象</strong>和<strong>目的</strong>制备培养基<ul>
<li>根据培养对象：<ul>
<li><strong>细菌</strong>：牛肉膏蛋白胨培养基，LB培养基</li>
<li>真菌：查氏合成培养基，PDA培养基</li>
<li>放线菌：高氏一号培养基</li>
<li>酵母菌：豆汁、麦芽汁</li>
</ul>
</li>
<li>根据培养目的：<ul>
<li>为了获取微生物细胞或是作为种子培养基：营养成分宜丰富些，C&#x2F;N比低。</li>
<li>为了获取代谢产物或是作为发酵培养基：C&#x2F;N比应该要高些，即所含氮源宜低些。</li>
<li>实验室一般培养：使用营养丰富、取材与制备均较方便的天然培养基。</li>
<li>代谢遗传研究：合成培养基</li>
</ul>
</li>
</ul>
</li>
<li>营养协调：培养基基应含有维持微生物最适生长所必须的一切营养物质，但的营养物质<strong>浓度与配比</strong>要合适<ul>
<li>各种营养要素的比例大体是：水﹥碳源﹥氮源﹥P、S﹥K、Mg﹥生长因子。</li>
<li><em>碳源与氮源的比例（即C&#x2F;N比）尤为重要。</em>C&#x2F;N比是指培养基所含碳源中的碳原子摩尔数与氮源中的氮原子<em>摩尔数之比</em>。不同微生物要求不同的C&#x2F;N比。如细菌和酵母菌培养基，通常用较低的C&#x2F;N。</li>
<li>还须注意培养基中<em>无机盐</em>的量以及它们之间的平衡。</li>
<li>添加<em>生长因子</em>时也要注意有适当的比例</li>
</ul>
</li>
<li>条件适宜：创造尽可能适宜的生长条件（pH、渗透压、氧气、二氧化碳）<ul>
<li>PH：<ul>
<li>在培养基中加入缓冲液来保持pH相对稳定</li>
<li>在培养基中加入指示剂便于持续观察pH变化</li>
</ul>
</li>
<li>渗透压：<ul>
<li>绝大多数在等渗溶液中生长</li>
<li>嗜盐嗜渗透压菌可以提高渗透压</li>
</ul>
</li>
</ul>
</li>
<li>经济节约</li>
<li>无菌状态<ul>
<li>按配方制备好的培养基必须经过灭菌处理，通常采用的灭菌方法有<em>高压蒸汽灭菌法</em>和<em>过滤灭菌法</em></li>
</ul>
</li>
</ul>
</li>
<li>培养基的种类及其应用<ul>
<li><p>按培养微生物的类群与营养类型</p>
</li>
<li><p>按对培养基化学成分的了解程度分类</p>
<ul>
<li><strong>合成培养基</strong>：通过顺序加入<strong>准确称量的高纯化学试剂</strong>，如无机盐和有机化合物，与蒸馏水配制而成的，<strong>所含成分的量，包括微量元素在内是确切知道的</strong><ul>
<li>优点：化学成分确定并精确定量，<strong>实验的可重复性高</strong>，定量要求高的工作中</li>
<li>缺点：价格较贵，配置较繁，且<strong>微生物生长比较一般</strong></li>
<li>培养放线菌的淀粉硝酸盐培养基（即高氏一号培养基）；培养真菌的蔗糖硝酸盐培养基（即察氏培养基）等</li>
</ul>
</li>
<li><strong>天然培养基</strong>：采用动植物组织或微生物细胞或他们的提取物或粗消化产物配制而成。配置这类培养基常用<strong>牛肉膏、蛋白胨、酵母膏、麦芽汁</strong>、玉米粉、马铃薯、胡萝卜、米饭、牛奶和血清等营养价值高的物质<ul>
<li>优点：取材方便，<strong>营养丰富</strong>，且配置方便</li>
<li>缺点：所用物质的<strong>成分不稳定</strong>，因而营养成分难以控制，<strong>实验结果的重复性差</strong>。适合于一般实验室中的菌种培养、发酵工业中生产菌种的培养和某些发酵产物的生产等</li>
</ul>
</li>
<li><strong>半合成培养基</strong>：指一类用纯化试剂和天然物质配置成的培养基<ul>
<li>培养真菌的马铃薯蔗糖培养基。</li>
</ul>
</li>
</ul>
</li>
<li><p>按培养基外观的物理状态分类</p>
<ul>
<li><strong>固体培养基</strong>：<ul>
<li>可溶解固体培养基：加入凝固剂如<em>琼脂</em>制成的培养基，其他的有：血琼脂、无机硅胶、瓜尔胶、黄原胶等<ul>
<li>凝固剂条件：<ul>
<li>不被微生物分解利用</li>
<li>在微生物生长温度范围内保持固体状态</li>
<li>凝固点温度对微生物无害</li>
<li>不因灭菌而破坏</li>
<li>透明度好、配置方便、价格低</li>
</ul>
</li>
</ul>
</li>
<li>不可溶解固体培养基：直接用天然固体状物质或在营养基质上覆盖滤膜等制成</li>
</ul>
</li>
<li><strong>半固体培养基</strong>：一般可在液体培养基中加入约0.5%-1%的琼脂制成柔软的浆糊半固体培养基；<ul>
<li>细菌的动力观察</li>
</ul>
</li>
<li><strong>液体培养基</strong>：一类呈液体状态的培养基，在实验室和生产实践中用途广泛，尤其适用于<strong>大规模的培养微生物</strong><ul>
<li>牛肉膏蛋白胨培养基（牛肉膏+蛋白胨+NaCl+水）</li>
<li>一般用于细菌培养</li>
</ul>
</li>
</ul>
</li>
<li><p>按培养基的功能</p>
<ul>
<li><strong>基本培养基</strong>：含有一般微生物生长繁殖所需基本营养成分的培养基，也称基础培养基，如牛肉膏蛋白胨培养基，营养琼脂培养基</li>
<li><strong>加富培养基</strong>：在基本培养基中加入某些特殊需要的营养成分，如血清、血红蛋白或某些特殊的生长因子</li>
<li><strong>选择培养基</strong>：通过加入不妨碍目的微生物生长而抑制非目的微生物生长的物质以达到选择目的的培养基，广泛用于菌种筛选等领域。常用物质有染料和抗生素</li>
<li><strong>鉴别培养基</strong>：是一类在培养基中添加某种化学物质而将目的或对象微生物与同一培养基中其他微生物区别开的培养基。用来鉴别的特性包括：菌落的大小或颜色、培养基颜色的变化以及是否产生气体或沉淀等</li>
<li><strong>选择压力培养基</strong>：与选择培养基类似，多用于基因工程</li>
<li><strong>极端微生物培养基</strong>：用于培养生活在极端环境的微生物</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第六章-微生物的代谢"><a href="#第六章-微生物的代谢" class="headerlink" title="第六章 微生物的代谢"></a>第六章 微生物的代谢</h2><ul>
<li>新陈代谢：一般泛指生物与周围环境进行物质交换和能量交换的过程。发生在活细胞中的各种分解代谢和合成代谢的总和<ul>
<li>新陈代谢&#x3D;分解代谢+合成代谢</li>
<li>分解代谢（异化）：指复杂的有机物分子通过分解代谢酶系的催化，产生简单分子、腺苷三磷酸（ATP）形式的能量和还原力的作用</li>
<li>合成代谢（同化）：指在合成代谢酶系的催化下，由简单小分子、ATP形式的能量和还原力一起合成复杂的大分子的过程</li>
</ul>
</li>
</ul>
<h3 id="微生物的能量代谢"><a href="#微生物的能量代谢" class="headerlink" title="微生物的能量代谢"></a>微生物的能量代谢</h3><ul>
<li>生物氧化的定义：就是发生在活细胞内的一系列产能性氧化反应的总称。<ul>
<li>过程：底物脱氢（或脱电子）作用——氢（或电子）的传递——最后氢受体接受氢（或电子）</li>
<li>功能：产能（ATP）；产还原力【H】小分子中间代谢物</li>
<li>类型：呼吸和发酵<ul>
<li>呼吸：受氢过程中最终受氢体为氧或无机氧化物的产能反应</li>
<li>发酵：受氢过程中最终受氢体为某一中间代谢物的产能反应</li>
</ul>
</li>
</ul>
</li>
<li>底物脱氢的四条途径：<strong>EMP</strong>、HMP、ED和PK途径<ul>
<li>EMP途径，又称糖酵解途径，是<strong>绝大多数微生物</strong>共有的一条<strong>基本代谢途径</strong>；对于专性厌氧微生物，EMP途径是<strong>产能唯一</strong>的途径<ul>
<li>预备性反应：<ul>
<li>葡萄糖$\stackrel{\mathrm{ATP-&gt;ADP}}{\Longrightarrow}$葡糖-6-磷酸${\Longrightarrow}$果糖-6-磷酸$\stackrel{\mathrm{ATP-&gt;ADP}}{\Longrightarrow}$果糖-1,6-二磷酸$\Longrightarrow$甘油醛-3-磷酸（$\leftrightharpoons$磷酸二羟丙酮）</li>
</ul>
</li>
<li>氧化还原反应：<ul>
<li>甘油醛-3-磷酸$\stackrel{\mathrm{NAD^+}-&gt;\mathrm{NADH+H^+}}{\Longrightarrow}$1,3二磷酸甘油酸$\stackrel{\mathrm{ADP-&gt;ATP}，底物水平磷酸化}{\Longrightarrow}$3-磷酸甘油酸$\Longrightarrow$2-磷酸甘油酸$\Longrightarrow$磷酸烯醇式丙酮酸$\stackrel{\mathrm{ADP-&gt;ATP}，底物水平磷酸化}{\Longrightarrow}$丙酮酸</li>
</ul>
</li>
<li>1分子葡萄糖可降解成2分子丙酮酸；消耗2分子ATP，产生4分子ATP，净得2分子ATP；产生2分子NADH</li>
<li>特点：<ul>
<li>基本代谢途径，产能效率低，提供多种中间代谢物作为合成代谢原料</li>
<li>有氧时，与三羧酸循环（TCA）连接</li>
<li>无氧时，丙酮酸及其进一步代谢产物乙醛被还原成各种发酵产物，与发酵工业有密切关系</li>
</ul>
</li>
<li>意义：可为细胞生命活动提供ATP和NADH</li>
</ul>
</li>
</ul>
</li>
<li>呼吸链（电子传递链）：由一系列氧化还原势不同的氢传递体组成的一组链状传递顺序。在氢或电子的传递过程中，通过与氧化磷酸化反应发生偶联，就可产生ATP形式的能量<ul>
<li><p>部位：原核生物发生在细胞膜上，真核生物发生在线粒体内膜上</p>
</li>
<li><p>组成：电子传递是从$\mathrm{NAD}$到$\mathrm{O_2}$，电子传递链中的电子传递体主要包括烟酰胺脱氢酶、黄素脱氢酶、CoQ、细胞色素和一些铁硫蛋白等</p>
<ul>
<li>烟酰胺脱氢酶类：以$\mathrm{NAD^+}$或$\mathrm{NADP^+}$为辅酶</li>
<li>黄素蛋白类：以$\mathrm{FMN}$或$\mathrm{FAD}$为辅基</li>
<li>铁硫蛋白（Fe-S）类：传递电子的氧化还原载体，辅基为分子中的含铁硫的中心部分。存在于呼吸链中几种酶复合体中，参与膜上的电子传递</li>
<li>泛醌（辅酶Q）类：脂溶性氢载体。广泛存在于真核生物线粒体内膜和G-菌的细胞膜上；G+菌和某些G-菌则含甲基萘醌。功能：收集来自呼吸链各种辅酶和辅基所输出的氢和电子，并将它们传递给细胞色素系统</li>
<li>细胞色素系统：位于呼吸链后端，功能是传递电子。原核生物细胞色素种类比真核生物种类多，有a&#x2F;a1&#x2F;a2&#x2F;a4&#x2F;b&#x2F;b1&#x2F;c&#x2F;c1&#x2F;c4&#x2F;d&#x2F;o等</li>
</ul>
</li>
<li><p>功能：传递电子；将电子传递过程中释放的能量合成ATP</p>
</li>
</ul>
</li>
</ul>
<img src="./微生物学笔记.assets/image-20230422170252742.png" alt="image-20230422170252742" style="zoom: 67%;" />

<ul>
<li><p>原核生物呼吸链的特点：</p>
<ul>
<li>电子供体种类多</li>
<li>电子受体种类多</li>
<li>存在于细胞膜上</li>
<li>呼吸链中的组分与含量多变，在不同的种间，不同的环境条件下是变化的</li>
<li>有分支呼吸链的存在，表现在来自不同的底物的还原力进入呼吸链时有不同的分支，不同的微生物细胞色素系统有别</li>
</ul>
</li>
<li><p>有氧呼吸：以分子氧为最终受体的生物氧化。第一阶段，葡萄糖分解为2分子丙酮酸，由EMP、HMP和ED途径完成；第二阶段，丙酮酸通过三羧酸循环彻底分解，形成$\mathrm{CO_2}$和$\mathrm{H_2O}$，产生大量ATP</p>
</li>
<li><p>无氧呼吸：一类呼吸链末端的氢受体为外源无机氧化物（个别为有机氧化物）的生物氧化，是一种无氧条件下进行的产能效率较低的特殊呼吸</p>
</li>
<li><p>发酵：脱氢过程产生还原型氢供体——$\mathrm{NADH+H^+}$和$\mathrm{NADPH+H^+}$产生，但产生的量并不多，如不及时使它们氧化再生，糖的分解产能将会中断，这样微生物就以葡萄糖分解的过程中形成的各种中间产物为氢（电子）受体来接受$\mathrm{NADH+H^+}$和$\mathrm{NADPH+H^+}$的氢（电子），于是产生了各种各样的发酵产物</p>
<ul>
<li>发酵产物种类：乙醇、乳酸、丙酸、丁酸、混合酸、丁二醇及乙酸等</li>
<li>由EMP途径中丙酮酸起始的发酵：同型乙醇发酵，同型乳酸发酵，混合酸发酵，2,3-丁二醇发酵等</li>
<li>同型乙醇发酵：发酵产物中仅有乙醇一种有机分子的酒精发酵</li>
<li>异型乙醇发酵：除主产物乙醇外，还存在有其他有机物分子的发酵，如HMP途径的乙醇发酵</li>
<li>同型乳酸发酵：在糖的发酵中，产物只有乳酸的发酵</li>
<li>异型乳酸发酵：发酵产物除乳酸外，还有乙醇与$\mathrm{CO_2}$，如经HMP途径</li>
</ul>
</li>
<li><p>化能自养微生物的生物氧化和产能</p>
<ul>
<li><p>化能自养微生物能量代谢的特点：</p>
<ul>
<li>无机底物的氧化直接与呼吸链发生联系</li>
<li>呼吸链的组分多样化，无机底物脱氢后，电子进入呼吸链的部位：电子可以从多处进入呼吸链，这是由于不同的氧化还原电位造成的</li>
<li>产能效率低</li>
</ul>
</li>
<li><p>氢细菌：好氧，氧化$\mathrm{H_2}$同化$\mathrm{CO_2}$，用所产成的ATP还原$\mathrm{CO_2}$构成细胞物质$\mathrm{[CH_2O]}$和生长</p>
</li>
<li><p>硝化细菌：能利用还原无机氮化合物进行自养生长。</p>
</li>
<li><p>反硝化细菌：化能异养微生物，兼性厌氧，无氧条件下利用硝酸盐作氢受体，将其还原成$\mathrm{NO-&gt;N_2}$</p>
</li>
</ul>
</li>
<li><p>光能微生物的能量代谢</p>
<ul>
<li>对光能微生物而言，可通过光合磷酸化将光能转变为化学能储存于ATP中</li>
<li>根据是否产生氧气，可将光合细菌分为产氧光合细菌和不产氧光合细菌</li>
<li>除蓝细菌具有叶绿素a，能进行水的裂解进行产氧的光合作用外，其他细菌没有叶绿素，只有菌绿素或其他光合色素，只能裂解无机物或简单有机物，进行不产氧的光合作用</li>
</ul>
</li>
</ul>
<h3 id="微生物特有的合成代谢途径"><a href="#微生物特有的合成代谢途径" class="headerlink" title="微生物特有的合成代谢途径"></a>微生物特有的合成代谢途径</h3><ul>
<li>肽聚糖的合成与青霉素抗菌机理<ul>
<li>肽聚糖：绝大多数原核微生物细胞壁所含有的独特成分，在细菌的生命活动中有重要功能，尤其是许多重要抗生素如青霉素、头孢霉素、万古霉素、环丝氨酸和杆菌肽等呈现其选择毒力的物质基础，在抗生素治疗上有特别意义的物质<ul>
<li>肽聚糖由三部分组成：<ul>
<li>聚糖链：由N-乙酰葡糖胺和N-乙酰胞壁酸两种糖衍生物通过$\beta$-1,4-糖苷键重复交替连接成</li>
<li>短肽：由四个氨基酸分子连接而成，借肽键连接在聚糖骨架链的N-乙酰胞壁酸的乙酰基上</li>
<li>肽桥：通过肽桥使相邻两条聚糖链上的短肽互相交联形成高强度的网状结构；氨基端与甲肽尾第4个氨基酸相连，羧基端与乙肽尾第3个氨基酸相连</li>
</ul>
</li>
<li>合成特点：<ul>
<li>合成机制复杂，步骤多，且合成部位几经转移</li>
<li>合成过程中需要有能够转运于控制肽聚糖结构元件的载体（UDP和细菌萜醇）参与</li>
</ul>
</li>
<li>合成过程：<ul>
<li>细胞质阶段：合成派克核苷酸</li>
<li>细胞膜阶段：合成肽聚糖单体</li>
<li>细胞膜外阶段：交联作用形成肽聚糖</li>
</ul>
</li>
</ul>
</li>
<li>抗生素对肽聚糖的抑制作用：<ul>
<li>$\beta$内酰胺类抗生素（青霉素与头孢菌素）：青霉素只对生长繁殖的细菌有抑制作用</li>
<li>万古霉素</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="微生物的次级代谢"><a href="#微生物的次级代谢" class="headerlink" title="微生物的次级代谢"></a>微生物的次级代谢</h3><ul>
<li>次级代谢：微生物在一定的生长时期，以初级代谢产物为前体，合成一些对微生物的生命活动<strong>无明确功能</strong>的物质的过程。</li>
<li>次级代谢产物：大多是分子结构比较复杂的化合物，可分为抗生素、激素、生物碱、毒素及维生素等类型</li>
</ul>
<h2 id="第七章-微生物的生长及其控制"><a href="#第七章-微生物的生长及其控制" class="headerlink" title="第七章 微生物的生长及其控制"></a>第七章 微生物的生长及其控制</h2><ul>
<li>生长：微生物细胞吸收营养物质，进行新陈代谢，当同化作用&gt;异化作用时，生命个体的重量和体积不断增大的过程</li>
<li>繁殖：生命个体生长到一定阶段，通过特定方式产生新的生命个体，即引起生命个体数量增加的生物学过程</li>
<li>个体生长：微生物细胞个体吸收营养物质，进行新陈代谢，原生质与细胞组分的增加为个体生长</li>
<li>群体生长：群体中个体数目的增加，可以用重量、体积、密度或浓度来衡量</li>
</ul>
<h3 id="微生物生长的研究方法"><a href="#微生物生长的研究方法" class="headerlink" title="微生物生长的研究方法"></a>微生物生长的研究方法</h3><ul>
<li>微生物的培养方法：<ul>
<li>实验室培养法：<ul>
<li>固体培养法：<ul>
<li>好氧菌培养</li>
<li>厌氧菌培养：高层琼脂柱、厌氧培养皿、厌氧罐、厌氧手套箱</li>
</ul>
</li>
<li>液体培养法<ul>
<li>好氧菌培养：试管培养、三角瓶（摇瓶）、台式发酵罐</li>
<li>厌氧菌培养</li>
</ul>
</li>
</ul>
</li>
<li>生产实践中的培养微生物装置<ul>
<li>固体培养法：好氧菌培养、厌氧菌培养</li>
<li>液体培养法：发酵罐</li>
</ul>
</li>
</ul>
</li>
<li>纯培养：从一个细胞或一群相同的细胞经过培养繁殖而得到的后代<ul>
<li>液体稀释法：适合于细胞较大的微生物</li>
<li>平板划线分离法：用接种环沾取少许待分离的材料，在无菌平板表面进行划线，微生物细胞数量将随着划线次数增多而减少，并逐渐分散开来。若划线适宜，微生物能一一分散，经培养后可在平板表面得到单菌落。<ul>
<li>特点：快速、方便</li>
<li>连续划线适用于浓度较小的样品，分区划线适用于浓度较大的样品</li>
</ul>
</li>
<li>平板涂布分离法</li>
<li>选择性培养分离法：为了从混杂的微生物群体中分离出某种微生物，可以根据该微生物的特点，包括营养、生理、生长条件等采用选择培养的方法进行分离</li>
</ul>
</li>
<li>纯培养生长的测定方法<ul>
<li>微生物细胞数目的检测法：<ul>
<li>总细胞计数法（血球计数板、比浊法）<ul>
<li>血球计数板法适用于个体较大细胞或颗粒，不适于细菌等较小个体的细胞。特点是快速准确</li>
<li>比浊法：在600nm波长下测定菌悬液的光密度，可反映出菌液的浓度</li>
</ul>
</li>
<li>活细胞计数法（活菌计数法、膜过滤法）<ul>
<li>平板菌落计数法（最常用的活菌计数法）：将适当稀释的菌液倾注或涂布在平板表面，经保温培养后，以平板上出现的菌落数乘以稀释度就可以计算出原菌液的含菌量</li>
<li>膜过滤法：常用于测定含菌量较少的空气和水中的微生物数目。将定量样品通过薄膜过滤，菌体被阻留在滤膜上，取下滤膜进行培养，然后计算菌落数，可求出样品中所含菌数</li>
</ul>
</li>
</ul>
</li>
<li>微生物生长量和生理指标测定法：湿重法，干重法，碳、氮含量法，其他生理指标<ul>
<li>干重法：将一定量的菌液中的菌体通过离心或过滤分离出来，然后烘干、称重。一般干重为湿重的10%-20%，而一个细菌细胞一般重约$10^{-12}-10^{-13}$g。该方法适合菌浓度较高的样品</li>
<li>生理指标法：<ul>
<li>测含氮量：蛋白质是细胞的主要物质，含量稳定，而氮是蛋白质的主要成分，通过测含氮量就可推知微生物的浓度</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="微生物的生长规律"><a href="#微生物的生长规律" class="headerlink" title="微生物的生长规律"></a>微生物的生长规律</h3><ul>
<li>微生物的群体生长<ul>
<li>无分支单细胞微生物的群体生长特征<ul>
<li>无分支单细胞微生物主要包括细菌和酵母菌，其群体生长是以群体中细胞数量的增加来表示的</li>
<li>由一个细胞分裂成为两个细胞的时间间隔称为世代，一个世代所需的时间就是代时，代时也就是群体细胞数目扩大一倍所需的时间，也成为倍增时间</li>
<li>每经过一个代时，细胞数目就增加一倍，呈指数增加，称为指数生长，这就是单细胞群体生长的特征</li>
<li>指数生长可用下式表示：$B_t&#x3D;B_0\times 2^n$，式中$B_0$为起始细胞数目，$B_t$为指数生长某个时刻$t$时的细胞数目，$n$为世代数</li>
</ul>
</li>
<li>无分支单细胞微生物的群体生长曲线<ul>
<li>生长曲线代表了细菌在新的环境中从开始生长、分裂直至死亡的整个动态变化过程</li>
<li><img src="/./%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/image-20230422231300161.png" alt="image-20230422231300161"></li>
<li>时期的划分：按照生长速率常数的不同</li>
<li>迟缓期：活菌数没增加，曲线平行于横轴<ul>
<li>特点：<ul>
<li>生长速率常数等于0</li>
<li>细胞形态变大或增长</li>
<li>细胞内RNA特别是rRNA含量增高</li>
<li>合成代谢活跃（核糖体、酶类、ATP合成加快），易产生诱导酶</li>
<li>对外界不良条件敏感，如氯化钠浓度、温度、抗生素等化学药物</li>
</ul>
</li>
<li>原因：适应新的环境条件，合成新的酶，积累必要的中间产物</li>
<li>影响迟缓期长短的因素：菌种、接种物菌龄、接种量、接种物受到损伤、培养基成分</li>
<li>发酵工业上，尽量缩短迟缓期：增加接种量，采用对数生长期的健壮菌种，调整培养基的成分，选用繁殖快的菌种</li>
<li>食品工业上，尽量在此期进行消毒或灭菌</li>
</ul>
</li>
<li>对数期：细胞数目以几何级数增加，其对数与时间呈直线关系<ul>
<li>特点：<ul>
<li>生长速率常数最大，代时最短</li>
<li>细胞进行平衡生长，菌体大小、形态、生理特征等比较一致</li>
<li>代谢最旺盛</li>
<li>细胞对理化因素较敏感</li>
</ul>
</li>
<li>影响因素：菌种、营养成分、营养物浓度、培养温度</li>
<li>应用意义：<ul>
<li>生产上用作接种的最佳菌龄</li>
<li>发酵工业上尽量延长该期，以达到较高的菌体密度</li>
<li>食品工业上尽量使有害微生物不能进入此期</li>
<li>是生理代谢及遗传研究或进行染色、形态观察等的良好材料</li>
</ul>
</li>
</ul>
</li>
<li>稳定期：<ul>
<li>特点：<ul>
<li>新增值的细胞数与老细胞的死亡数几乎相等，微生物的生长速率处于动态平衡，培养物中的细胞数目达到最高值</li>
<li>细胞分裂速度下降，开始积累内含物，产芽苞的细菌开始产芽苞</li>
<li>对于发酵生产来说，一般在稳定期的后期产物累积达到高峰，是最佳的收获时期</li>
</ul>
</li>
<li>产生原因：营养物尤其是生长限制因子的耗尽；营养物比例失调；有害代谢废物的积累；物化条件不合适</li>
<li>应用意义：<ul>
<li>发酵生产形成的重要时期（抗生素、氨基酸等），生产上尽量延长此期（补充营养物质，调pH，调温度）</li>
<li>稳定期细胞数目及其积累产物达到最高</li>
</ul>
</li>
</ul>
</li>
<li>衰亡期：<ul>
<li>特点：<ul>
<li>细胞死亡数增加，死亡数大大超过新增殖的细胞数，群体中的活菌数目急剧下降，出现负生长</li>
<li>细胞内颗粒更明显，细胞出现多形态、畸形或衰退形，芽苞开始释放</li>
<li>因菌体本身产生的酶及其代谢产物的作用，使菌体死亡、自溶等，发生自溶的菌生长曲线表现为向下跌落的趋势</li>
</ul>
</li>
<li>产生原因：生长条件的进一步恶化，使细胞内的分解代谢大大超过合成代谢，继而导致菌体的死亡</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="微生物生长的控制"><a href="#微生物生长的控制" class="headerlink" title="微生物生长的控制"></a>微生物生长的控制</h3><ul>
<li>灭菌：采用强烈的理化因素使任何物体内外部的<strong>一切微生物</strong>永远丧失其生长繁殖能力的措施</li>
<li>消毒：采用较温和的理化因素，仅仅杀死物体表面或内部的一部分<strong>对人体有害的病原菌</strong>，而对被处理物体基本无害的措施</li>
<li>防腐：利用理化因素完全抑制<strong>霉腐微生物</strong>的生长繁殖，从而达到防止物品发生霉腐的措施</li>
<li>化疗：即化学治疗，利用具有高度选择毒力的化学物质抑制<strong>宿主体内病原微生物</strong>的生长繁殖，从而达到治疗该病的一种措施</li>
<li>物理方法控制微生物的生长：<ul>
<li>利用高温进行灭菌：最常用的物理方法，包括干热灭菌法与湿热灭菌法<ul>
<li>干热灭菌法：<ul>
<li>焚烧法：将被灭菌物品在火焰中燃烧，适合无经济价值的物品灭菌及不怕烧的实验器具</li>
<li>干燥热空气灭菌法：将物品放入烘箱内，升温至150°C-170°C，维持1-2小时。适用于玻璃、陶瓷、金属物品的灭菌</li>
</ul>
</li>
<li>湿热灭菌法：温度低，时间短，灭菌效果高<ul>
<li>原因：<ul>
<li>菌体内含水量越高，蛋白质越容易凝固变性</li>
<li>蒸汽冷凝会放出潜热，迅速提高菌体温度</li>
<li>饱和水蒸汽穿透力强</li>
</ul>
</li>
</ul>
</li>
<li>高压蒸汽灭菌法：利用水的沸点随水蒸汽压力的增加而上升，以达到100°C以上高温灭菌的方法。适用于耐高温物品，玻璃仪器、含水或不含水的物品</li>
<li>煮沸消毒法</li>
<li>巴斯德消毒法（巴氏消毒法）：用较低的温度来杀死其中的病源微生物，这样既保持食品的营养风味，又进行了消毒<ul>
<li>该法一般将带消毒的液体食品置于62°C处理30min，然后迅速冷却，即可达到消毒目的</li>
</ul>
</li>
<li>间歇灭菌法：循环三次以上可保证彻底灭菌的目的</li>
</ul>
</li>
<li>过滤除菌法：采用滤孔比细菌还小的筛子或滤膜做成各种过滤器，当空气或液体流经筛子或滤膜时，微生物不能通过滤孔而被阻留在一侧，从而达到灭菌的目的。<strong>但不能去除病毒</strong><ul>
<li>应用：对含酶、血清、维生素和氨基酸等热敏物质除菌</li>
</ul>
</li>
</ul>
</li>
<li>控制有害微生物的化学因素：<ul>
<li>消毒剂：可以<strong>抑制或杀灭</strong>微生物，但对人体也可能产生有害作用的化学试剂。主要用于物体表面、器械、排泄物和环境中</li>
<li>防腐剂：可以<strong>抑制或阻止</strong>微生物生长，但对人体或动物体的毒性较低的化学试剂。主要用于肌体表面、食品、饮料药品</li>
<li>但现在消毒剂和防腐剂间的界限已并不很严格</li>
<li>消毒防腐剂的作用机理一般有三种方式：<ul>
<li>使微生物蛋白质凝固变性，发生沉淀，如酒精</li>
<li>破坏菌体的酶系统，影响菌体代谢，如过氧化氢等</li>
<li>降低微生物表面张力，增加细胞膜的通透性，使细胞发生破裂或溶解，如来苏儿等酚类物质</li>
</ul>
</li>
<li>化学治疗剂：能够特异性地作用于某些微生物并具有选择毒性的化学试剂，它们与非特异性的化学试剂相比对人体几乎没有毒性或毒性很小，可用作治疗微生物引起的疾病<ul>
<li>抗代谢药物（人工合成）：有些化合物在结构上与生物体所必需的代谢物很相似，以至于可以和特定的酶结合，从而阻碍酶的功能，干扰代谢的正常进行<ul>
<li>机理：作为菌细胞基本生长因子的竞争性抑制剂而阻止微生物对生长因子的利用，因而可以抑制微生物的生长</li>
</ul>
</li>
<li>抗生素（微生物所产生）：微生物在其生命过程中所产生的一类低分子量代谢产物，在很低浓度下就能抑制或杀死其他微生物的生长<ul>
<li>最小抑制浓度：表示抗生素的抗菌活性，单位是ug&#x2F;mL</li>
<li>抗菌谱：抗生素的作用对象有一定范围，这种作用范围称该抗生素的抗菌谱</li>
<li>作用机制：<ul>
<li>抑制细胞壁的合成（青霉素）</li>
<li>破坏细胞膜功能（多粘菌素）</li>
<li>抑制蛋白质合成（氯霉素、四环素、链霉素）</li>
<li>干扰核酸代谢（磺胺类、利福霉素、新生霉素、丝裂霉素、灰黄霉素）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>微生物的耐药性：也称抗药性，微生物能够抵抗化学药物作用而正常生长的能力<ul>
<li>原因：<ul>
<li>菌体内产生了分解药物的酶</li>
<li>改变细胞膜的透性而导致抗药性</li>
<li>与抗生素结合的有效部位发生变异</li>
<li>泵出机制</li>
<li>改变代谢途径</li>
</ul>
</li>
<li>阻止耐药性途径：<ul>
<li>少用抗生素</li>
<li>第一次用药剂量要足，有些抗生素要<strong>首剂加倍</strong></li>
<li>避免在同一时期或长期多次使用同种抗生素</li>
<li>不同抗生素（或其他药物）混合使用</li>
<li>对现有抗生素改造</li>
<li>筛选新抗生素</li>
</ul>
</li>
</ul>
</li>
<li>由非染色体所编码的药物抗性是由于细菌整合了带有药物抗性基因的质粒所引起的，这类质粒被称为R质粒</li>
</ul>
<h2 id="第八章-微生物的遗传与变异"><a href="#第八章-微生物的遗传与变异" class="headerlink" title="第八章 微生物的遗传与变异"></a>第八章 微生物的遗传与变异</h2><ul>
<li>遗传：子代与亲代相似</li>
<li>变异：子代与亲代间的差异，是生命的最本质特性之一</li>
<li>遗传型：生物的全部遗传因子所携带的遗传信息</li>
<li>表型：具有一定遗传型的个体，在特定环境条件下通过生长发育所表现出来的外表特征和内在特征的总和</li>
<li>遗传型+环境条件$\stackrel{代谢，发育}{\longrightarrow}$表型</li>
</ul>
<h3 id="微生物遗传物质的类型"><a href="#微生物遗传物质的类型" class="headerlink" title="微生物遗传物质的类型"></a>微生物遗传物质的类型</h3><ul>
<li>类型：核染色体和染色体外的遗传因子（质粒、线粒体DNA等）</li>
<li>基因：生物中具有<strong>遗传效应</strong>的<strong>核酸序列</strong>（DNA或RNA），是遗传的基本单位</li>
<li>基因产物：编码多肽的mRNA和非编码RNA<ul>
<li>非编码RNA：tRNA、rRNA、microRNA、snRNA、gRNA等</li>
</ul>
</li>
<li>微生物的核染色体：<ul>
<li>原核生物的基因组：<ul>
<li>染色体为双链环状的DNA分子（<strong>单倍体</strong>）</li>
<li>基因组上遗传信息具有<strong>连续性</strong>：基因数基本接近由它的基因组大小所估计的基因数。编码蛋白的基因<strong>不含内含子</strong>，遗传信息是连续的。但细菌和古生菌的rRNA和tRNA中也发现有内含子序列</li>
<li>功能相关的结构基因组成<strong>操纵子结构</strong></li>
<li>结构基因的单拷贝及rRNA基因的多拷贝</li>
<li>基因组的<strong>重复序列少而短</strong></li>
</ul>
</li>
<li>真核生物的基因组：<ul>
<li>典型的<strong>真核染色体结构</strong></li>
<li>大多数基因含<strong>内含子</strong>序列</li>
<li>有大量的<strong>重复序列</strong>（许多不参与转录）</li>
<li>没有明显的操纵子结构</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/./%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/image-20230423004040388.png" alt="image-20230423004040388"></p>
<ul>
<li>微生物的染色体外遗传因子：<ul>
<li>细菌质粒：质粒是一种独立于微生物细胞染色体外，能进行自主复制的遗传因子<ul>
<li>质粒所含的基因对宿主细胞一般是非必须的，在某些特殊条件下，质粒有时能赋予宿主细胞以特殊的机能，从而使宿主得到生长优势</li>
<li>结构特点：可双链也可单链，可环状也可线性，可DNA也可RNA，既存在于原核微生物也存在于真核微生物。对于细菌质粒，通常是一种共价闭环DNA分子且通常以超螺旋形式存在于细胞中</li>
<li>类型：<ul>
<li>严谨型质粒：复制受细胞核控制，与染色体DNA复制相伴随，一般一个寄主细胞内只有少数几个（1-5）拷贝</li>
<li>松弛型质粒：复制不受细胞核控制，在染色体DNA复制停止的情况下仍可以进行复制，在细胞内的数量可以达到10-200个或更多</li>
</ul>
</li>
<li>基因工程的应用：<ul>
<li>优点：体积小，易分离和操作；环状，稳定；独立复制；拷贝数多；存在标记位点，易筛选</li>
</ul>
</li>
<li>主要种类：F因子&#x2F;质粒，R因子&#x2F;质粒与Col因子等<ul>
<li>F质粒：最早发现的一种质粒。F因子的特性为可促进供体菌向受体菌传递染色体DNA或质粒</li>
<li>R质粒：与抗药性相关</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="细菌的基因转移和重组"><a href="#细菌的基因转移和重组" class="headerlink" title="细菌的基因转移和重组"></a>细菌的基因转移和重组</h3><ul>
<li>转化：原核微生物通过<strong>转化</strong>、转导、接合等形式进行遗传物质转移和基因重组<ul>
<li>自然转化：受体细胞直接吸收了来自供体细胞的DNA片段，并把它整合到自己的基因组中，细胞部分遗传性状发生变化的现象叫作转化</li>
<li>条件：建立了感受态的受体细胞（人工感受态可以通过$\mathrm{CaCl_2}$处理大肠杆菌），外源游离DNA分子（转化因子）</li>
<li>过程：感受态细胞的制备——DNA的结合与摄取</li>
<li>本质：细胞壁和细胞膜的结构发生改变，出现许多间隙，致使通透性增加，DNA分子便得以进入细胞内</li>
<li>人工$\mathrm{CaCl_2}$诱导可用于大肠杆菌、葡萄球菌以及其他一些G-菌的转化。其转化进去的质粒可以整合到宿主染色体，也可呈游离状态</li>
</ul>
</li>
</ul>
<h3 id="微生物的突变"><a href="#微生物的突变" class="headerlink" title="微生物的突变"></a>微生物的突变</h3><ul>
<li>突变：指染色体数量、结构与组成等发生改变，分为基因突变和染色体畸变</li>
<li><img src="/./%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6%E7%AC%94%E8%AE%B0.assets/image-20230423005916355.png" alt="image-20230423005916355"></li>
<li>遗传型变异（基因变异、基因突变）：生物体在外因或内因的作用下，遗传物质的结构或数量发生改变<ul>
<li>特点：<ul>
<li>在群体中以极低的几率出现（$10^{-5}\sim 10^{-10}$）</li>
<li>变化后形成的新性状是稳定的，可遗传的</li>
</ul>
</li>
<li>遗传密码的破译：<ul>
<li>方向：5’端到3’端</li>
<li>61个是编码氨基酸的密码子，UAA（赭石密码子）、UGA(乳石密码子)和UAG(琥珀密码子)是3个终止密码子，不代表任何氨基酸</li>
</ul>
</li>
</ul>
</li>
<li>基因突变率：每一世代中发生某一性状突变的几率$10^{-6}\sim 10^{-9}$，病毒基因突变率更高（$10^{-4}\sim 10^{-8}$）</li>
<li>自发突变：无人为因素下的低频率突变，由于DNA复制错误或DNA损失</li>
<li>诱发突变：<ul>
<li>物理诱变剂：射线如紫外线，X射线，$\gamma$射线，快中子</li>
<li>化学诱变剂：碱基类似物（5—氟尿嘧啶、5－氨基尿嘧啶等）；与碱基反应的物质（亚硝基胍、亚硝酸、烷化剂、氮芥等）；在DNA分子中插入或缺失碱基（丫啶类物质、丫啶氮芥衍生物）</li>
<li>生物诱变剂：噬菌体，转座子</li>
</ul>
</li>
</ul>
<h3 id="菌种的退化、复壮和保藏"><a href="#菌种的退化、复壮和保藏" class="headerlink" title="菌种的退化、复壮和保藏"></a>菌种的退化、复壮和保藏</h3><ul>
<li><p>影响微生物菌种稳定性的因素：变异、污染、死亡</p>
</li>
<li><p>退化：菌种在培养或保藏过程中，由于自发突变的存在，出现某些原有优良生产性状的劣化、遗传标记的丢失等现象，称为菌种的衰退</p>
<ul>
<li>常见的退化现象：<ul>
<li>菌落和细胞形态的改变</li>
<li>生长速度缓慢，产孢子越来越少</li>
<li>抵抗力、抗不良环境能力减弱</li>
<li>代谢产物生产能力或对宿主寄生能力下降</li>
</ul>
</li>
<li>防止衰退的措施：<ul>
<li>减少传代次数</li>
<li>创造良好的培养条件</li>
<li>经常进行纯种分离，并对相应的性状指标进行检查</li>
<li>采用有效的菌种保藏方法</li>
</ul>
</li>
</ul>
</li>
<li><p>复壮：使衰退的菌种恢复原来优良性状</p>
<ul>
<li>狭义的复壮：在菌种已发生退化的情况下，通过纯种分离和生产性能测定等方法，从退化的群体中找出<strong>未退化</strong>的个体，以达到恢复该菌原有典型性状的措施</li>
<li>广义的复壮：在菌种的生产性能未退化前就有意识的经常进行纯种的分离和生产性能测定工作，以期菌种的生产性能逐步提高。实际上是利用自发突变（正变）不断地从生产中选种</li>
<li>复壮措施：<ul>
<li>纯种分离</li>
<li>淘汰已退化的个体</li>
<li>采用有效的菌种保藏方法</li>
</ul>
</li>
</ul>
</li>
<li><p>保藏：</p>
<ul>
<li>目的：在一定时间内使菌种不死、不变、不污染，以供研究、生产之用</li>
<li>基本原则：<ul>
<li>挑选典型菌种的优良纯种</li>
<li>尽量使用分生孢子、芽苞等休眠体</li>
<li>创造有利于休眠的保藏环境（如干燥、低温和缺氧等）</li>
<li>尽可能多的采用不同的方法保藏一些比较重要的微生物菌株</li>
</ul>
</li>
<li>基本原理：根据微生物的生理生化特性，人为的创造条件，使微生物处于代谢不活泼，生长繁殖受到抑制的休眠状态，以减少菌种的变异。一般可以通过降低培养基营养成分、低温、干燥和缺氧等方法，达到防止突变、保持纯种的目的</li>
<li>常用方法：<ul>
<li>冷冻干燥保藏：需要低温保护剂如甘油，温度在-20°C以下</li>
<li>液氮保藏法：需要低温保护剂如甘油，温度在-150°C以下</li>
<li>斜面保藏法：在4°C冰箱保存，方法简单，存活率高，应用普遍</li>
</ul>
</li>
<li><img src="./微生物学笔记.assets/image-20230423011401943.png" alt="image-20230423011401943" style="zoom:67%;" /></li>
</ul>
</li>
<li><p>细菌或病毒适合做遗传学研究的实验材料的生物学特性原因：组成与结构简单，易于培养且繁殖快，研<br>究周期短</p>
<ul>
<li>细菌或病毒的组成与结构简单</li>
<li>细菌或病毒的核酸是裸露的，其核酸与蛋白容易拆分，提取纯化与标记等，这样就容易直接观察遗传物质的作用，从而使得实验结果受蛋白质的影响较小</li>
<li>用于上述遗传实验的细菌或病毒都特别易于在成分简单明确的培养基上生长繁殖</li>
<li>细菌或病毒繁殖速度快，研究周期短，有利于在短时间内得出实验结果</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学点</category>
      </categories>
      <tags>
        <tag>影像组学</tag>
      </tags>
  </entry>
</search>
